/* This file was automatically generated and should not be edited. */
/** Represents non-fractional signed whole numeric values. Since the value may
 * exceed the size of a 32-bit integer, it's encoded as a string. */
export type _BigInt = string
/** A (potentially binary) string encoded using base64. */
export type Base64String = string
/** An ISO-8601 encoded date string. */
export type Date = string
/** An ISO-8601 encoded UTC date string. */
export type DateTime = string
/** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
export type Float = number
/** A Git object ID. */
export type GitObjectID = string
/** A fully qualified reference name (e.g. `refs/heads/master`). */
export type GitRefname = string
/** Git SSH string */
export type GitSSHRemote = string
/** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
export type GitTimestamp = string
/** A string containing HTML code. */
export type HTML = string
/** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
export type ID = string
/** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
export type Int = number
/** An ISO-8601 encoded UTC date string with millisecond precision. */
export type PreciseDateTime = string
/** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
export type URI = string
/** A valid x509 certificate string */
export type X509Certificate = string
/** The actor's type.
 *
 * - `TEAM` Indicates a team actor.
 * - `USER` Indicates a user actor. */
export type ActorType = 'TEAM' | 'USER'
/** Properties by which Audit Log connections can be ordered.
 *
 * - `CREATED_AT` Order audit log entries by timestamp */
export type AuditLogOrderField = 'CREATED_AT'
/** Represents an annotation's information level.
 *
 * - `FAILURE` An annotation indicating an inescapable error.
 * - `NOTICE` An annotation indicating some information.
 * - `WARNING` An annotation indicating an ignorable error. */
export type CheckAnnotationLevel = 'FAILURE' | 'NOTICE' | 'WARNING'
/** The possible states for a check suite or run conclusion.
 *
 * - `ACTION_REQUIRED` The check suite or run requires action.
 * - `CANCELLED` The check suite or run has been cancelled.
 * - `FAILURE` The check suite or run has failed.
 * - `NEUTRAL` The check suite or run was neutral.
 * - `SKIPPED` The check suite or run was skipped.
 * - `STALE` The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
 * - `STARTUP_FAILURE` The check suite or run has failed at startup.
 * - `SUCCESS` The check suite or run has succeeded.
 * - `TIMED_OUT` The check suite or run has timed out. */
export type CheckConclusionState = 'ACTION_REQUIRED' | 'CANCELLED' | 'FAILURE' | 'NEUTRAL' | 'SKIPPED' | 'STALE' | 'STARTUP_FAILURE' | 'SUCCESS' | 'TIMED_OUT'
/** The possible states of a check run in a status rollup.
 *
 * - `ACTION_REQUIRED` The check run requires action.
 * - `CANCELLED` The check run has been cancelled.
 * - `COMPLETED` The check run has been completed.
 * - `FAILURE` The check run has failed.
 * - `IN_PROGRESS` The check run is in progress.
 * - `NEUTRAL` The check run was neutral.
 * - `PENDING` The check run is in pending state.
 * - `QUEUED` The check run has been queued.
 * - `SKIPPED` The check run was skipped.
 * - `STALE` The check run was marked stale by GitHub. Only GitHub can use this conclusion.
 * - `STARTUP_FAILURE` The check run has failed at startup.
 * - `SUCCESS` The check run has succeeded.
 * - `TIMED_OUT` The check run has timed out.
 * - `WAITING` The check run is in waiting state. */
export type CheckRunState = 'ACTION_REQUIRED' | 'CANCELLED' | 'COMPLETED' | 'FAILURE' | 'IN_PROGRESS' | 'NEUTRAL' | 'PENDING' | 'QUEUED' | 'SKIPPED' | 'STALE' | 'STARTUP_FAILURE' | 'SUCCESS' | 'TIMED_OUT' | 'WAITING'
/** The possible types of check runs.
 *
 * - `ALL` Every check run available.
 * - `LATEST` The latest check run. */
export type CheckRunType = 'ALL' | 'LATEST'
/** The possible states for a check suite or run status.
 *
 * - `COMPLETED` The check suite or run has been completed.
 * - `IN_PROGRESS` The check suite or run is in progress.
 * - `PENDING` The check suite or run is in pending state.
 * - `QUEUED` The check suite or run has been queued.
 * - `REQUESTED` The check suite or run has been requested.
 * - `WAITING` The check suite or run is in waiting state. */
export type CheckStatusState = 'COMPLETED' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED' | 'REQUESTED' | 'WAITING'
/** Collaborators affiliation level with a subject.
 *
 * - `ALL` All collaborators the authenticated user can see.
 * - `DIRECT` All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
 * - `OUTSIDE` All outside collaborators of an organization-owned subject. */
export type CollaboratorAffiliation = 'ALL' | 'DIRECT' | 'OUTSIDE'
/** A comment author association with repository.
 *
 * - `COLLABORATOR` Author has been invited to collaborate on the repository.
 * - `CONTRIBUTOR` Author has previously committed to the repository.
 * - `FIRST_TIMER` Author has not previously committed to GitHub.
 * - `FIRST_TIME_CONTRIBUTOR` Author has not previously committed to the repository.
 * - `MANNEQUIN` Author is a placeholder for an unclaimed user.
 * - `MEMBER` Author is a member of the organization that owns the repository.
 * - `NONE` Author has no association with the repository.
 * - `OWNER` Author is the owner of the repository. */
export type CommentAuthorAssociation = 'COLLABORATOR' | 'CONTRIBUTOR' | 'FIRST_TIMER' | 'FIRST_TIME_CONTRIBUTOR' | 'MANNEQUIN' | 'MEMBER' | 'NONE' | 'OWNER'
/** The possible errors that will prevent a user from updating a comment.
 *
 * - `ARCHIVED` Unable to create comment because repository is archived.
 * - `DENIED` You cannot update this comment
 * - `INSUFFICIENT_ACCESS` You must be the author or have write access to this repository to update this comment.
 * - `LOCKED` Unable to create comment because issue is locked.
 * - `LOGIN_REQUIRED` You must be logged in to update this comment.
 * - `MAINTENANCE` Repository is under maintenance.
 * - `VERIFIED_EMAIL_REQUIRED` At least one email address must be verified to update this comment. */
export type CommentCannotUpdateReason = 'ARCHIVED' | 'DENIED' | 'INSUFFICIENT_ACCESS' | 'LOCKED' | 'LOGIN_REQUIRED' | 'MAINTENANCE' | 'VERIFIED_EMAIL_REQUIRED'
/** Properties by which commit contribution connections can be ordered.
 *
 * - `COMMIT_COUNT` Order commit contributions by how many commits they represent.
 * - `OCCURRED_AT` Order commit contributions by when they were made. */
export type CommitContributionOrderField = 'COMMIT_COUNT' | 'OCCURRED_AT'
/** The status of a git comparison between two refs.
 *
 * - `AHEAD` The head ref is ahead of the base ref.
 * - `BEHIND` The head ref is behind the base ref.
 * - `DIVERGED` The head ref is both ahead and behind of the base ref, indicating git history has diverged.
 * - `IDENTICAL` The head ref and base ref are identical. */
export type ComparisonStatus = 'AHEAD' | 'BEHIND' | 'DIVERGED' | 'IDENTICAL'
/** Varying levels of contributions from none to many.
 *
 * - `FIRST_QUARTILE` Lowest 25% of days of contributions.
 * - `FOURTH_QUARTILE` Highest 25% of days of contributions. More contributions than the third quartile.
 * - `NONE` No contributions occurred.
 * - `SECOND_QUARTILE` Second lowest 25% of days of contributions. More contributions than the first quartile.
 * - `THIRD_QUARTILE` Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
export type ContributionLevel = 'FIRST_QUARTILE' | 'FOURTH_QUARTILE' | 'NONE' | 'SECOND_QUARTILE' | 'THIRD_QUARTILE'
/** The possible base permissions for repositories.
 *
 * - `ADMIN` Can read, write, and administrate repos by default
 * - `NONE` No access
 * - `READ` Can read repos by default
 * - `WRITE` Can read and write repos by default */
export type DefaultRepositoryPermissionField = 'ADMIN' | 'NONE' | 'READ' | 'WRITE'
/** The possible ecosystems of a dependency graph package.
 *
 * - `ACTIONS` GitHub Actions
 * - `COMPOSER` PHP packages hosted at packagist.org
 * - `GO` Go modules
 * - `MAVEN` Java artifacts hosted at the Maven central repository
 * - `NPM` JavaScript packages hosted at npmjs.com
 * - `NUGET` .NET packages hosted at the NuGet Gallery
 * - `PIP` Python packages hosted at PyPI.org
 * - `PUB` Dart packages hosted at pub.dev
 * - `RUBYGEMS` Ruby gems hosted at RubyGems.org
 * - `RUST` Rust crates
 * - `SWIFT` Swift packages */
export type DependencyGraphEcosystem = 'ACTIONS' | 'COMPOSER' | 'GO' | 'MAVEN' | 'NPM' | 'NUGET' | 'PIP' | 'PUB' | 'RUBYGEMS' | 'RUST' | 'SWIFT'
/** Properties by which deployment connections can be ordered.
 *
 * - `CREATED_AT` Order collection by creation time */
export type DeploymentOrderField = 'CREATED_AT'
/** The possible protection rule types.
 *
 * - `BRANCH_POLICY` Branch policy
 * - `REQUIRED_REVIEWERS` Required reviewers
 * - `WAIT_TIMER` Wait timer */
export type DeploymentProtectionRuleType = 'BRANCH_POLICY' | 'REQUIRED_REVIEWERS' | 'WAIT_TIMER'
/** The possible states for a deployment review.
 *
 * - `APPROVED` The deployment was approved.
 * - `REJECTED` The deployment was rejected. */
export type DeploymentReviewState = 'APPROVED' | 'REJECTED'
/** The possible states in which a deployment can be.
 *
 * - `ABANDONED` The pending deployment was not updated after 30 minutes.
 * - `ACTIVE` The deployment is currently active.
 * - `DESTROYED` An inactive transient deployment.
 * - `ERROR` The deployment experienced an error.
 * - `FAILURE` The deployment has failed.
 * - `INACTIVE` The deployment is inactive.
 * - `IN_PROGRESS` The deployment is in progress.
 * - `PENDING` The deployment is pending.
 * - `QUEUED` The deployment has queued
 * - `SUCCESS` The deployment was successful.
 * - `WAITING` The deployment is waiting. */
export type DeploymentState = 'ABANDONED' | 'ACTIVE' | 'DESTROYED' | 'ERROR' | 'FAILURE' | 'INACTIVE' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED' | 'SUCCESS' | 'WAITING'
/** The possible states for a deployment status.
 *
 * - `ERROR` The deployment experienced an error.
 * - `FAILURE` The deployment has failed.
 * - `INACTIVE` The deployment is inactive.
 * - `IN_PROGRESS` The deployment is in progress.
 * - `PENDING` The deployment is pending.
 * - `QUEUED` The deployment is queued
 * - `SUCCESS` The deployment was successful.
 * - `WAITING` The deployment is waiting. */
export type DeploymentStatusState = 'ERROR' | 'FAILURE' | 'INACTIVE' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED' | 'SUCCESS' | 'WAITING'
/** The possible sides of a diff.
 *
 * - `LEFT` The left side of the diff.
 * - `RIGHT` The right side of the diff. */
export type DiffSide = 'LEFT' | 'RIGHT'
/** The possible reasons for closing a discussion.
 *
 * - `DUPLICATE` The discussion is a duplicate of another
 * - `OUTDATED` The discussion is no longer relevant
 * - `RESOLVED` The discussion has been resolved */
export type DiscussionCloseReason = 'DUPLICATE' | 'OUTDATED' | 'RESOLVED'
/** Properties by which discussion connections can be ordered.
 *
 * - `CREATED_AT` Order discussions by creation time.
 * - `UPDATED_AT` Order discussions by most recent modification time. */
export type DiscussionOrderField = 'CREATED_AT' | 'UPDATED_AT'
/** Properties by which discussion poll option connections can be ordered.
 *
 * - `AUTHORED_ORDER` Order poll options by the order that the poll author specified when creating the poll.
 * - `VOTE_COUNT` Order poll options by the number of votes it has. */
export type DiscussionPollOptionOrderField = 'AUTHORED_ORDER' | 'VOTE_COUNT'
/** The possible states of a discussion.
 *
 * - `CLOSED` A discussion that has been closed
 * - `OPEN` A discussion that is open */
export type DiscussionState = 'CLOSED' | 'OPEN'
/** The possible state reasons of a discussion.
 *
 * - `DUPLICATE` The discussion is a duplicate of another
 * - `OUTDATED` The discussion is no longer relevant
 * - `REOPENED` The discussion was reopened
 * - `RESOLVED` The discussion has been resolved */
export type DiscussionStateReason = 'DUPLICATE' | 'OUTDATED' | 'REOPENED' | 'RESOLVED'
/** The possible reasons that a Dependabot alert was dismissed.
 *
 * - `FIX_STARTED` A fix has already been started
 * - `INACCURATE` This alert is inaccurate or incorrect
 * - `NOT_USED` Vulnerable code is not actually used
 * - `NO_BANDWIDTH` No bandwidth to fix this
 * - `TOLERABLE_RISK` Risk is tolerable to this project */
export type DismissReason = 'FIX_STARTED' | 'INACCURATE' | 'NOT_USED' | 'NO_BANDWIDTH' | 'TOLERABLE_RISK'
/** Properties by which enterprise administrator invitation connections can be ordered.
 *
 * - `CREATED_AT` Order enterprise administrator member invitations by creation time */
export type EnterpriseAdministratorInvitationOrderField = 'CREATED_AT'
/** The possible administrator roles in an enterprise account.
 *
 * - `BILLING_MANAGER` Represents a billing manager of the enterprise account.
 * - `OWNER` Represents an owner of the enterprise account. */
export type EnterpriseAdministratorRole = 'BILLING_MANAGER' | 'OWNER'
/** The possible values for the enterprise allow private repository forking policy value.
 *
 * - `ENTERPRISE_ORGANIZATIONS` Members can fork a repository to an organization within this enterprise.
 * - `ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS` Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
 * - `EVERYWHERE` Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
 * - `SAME_ORGANIZATION` Members can fork a repository only within the same organization (intra-org).
 * - `SAME_ORGANIZATION_USER_ACCOUNTS` Members can fork a repository to their user account or within the same organization.
 * - `USER_ACCOUNTS` Members can fork a repository to their user account. */
export type EnterpriseAllowPrivateRepositoryForkingPolicyValue = 'ENTERPRISE_ORGANIZATIONS' | 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS' | 'EVERYWHERE' | 'SAME_ORGANIZATION' | 'SAME_ORGANIZATION_USER_ACCOUNTS' | 'USER_ACCOUNTS'
/** The possible values for the enterprise base repository permission setting.
 *
 * - `ADMIN` Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
 * - `NONE` Organization members will only be able to clone and pull public repositories.
 * - `NO_POLICY` Organizations in the enterprise choose base repository permissions for their members.
 * - `READ` Organization members will be able to clone and pull all organization repositories.
 * - `WRITE` Organization members will be able to clone, pull, and push all organization repositories. */
export type EnterpriseDefaultRepositoryPermissionSettingValue = 'ADMIN' | 'NONE' | 'NO_POLICY' | 'READ' | 'WRITE'
/** The possible values for an enabled/no policy enterprise setting.
 *
 * - `INSECURE` The setting prevents insecure 2FA methods from being used by members of the enterprise.
 * - `NO_POLICY` There is no policy set for preventing insecure 2FA methods from being used by members of the enterprise. */
export type EnterpriseDisallowedMethodsSettingValue = 'INSECURE' | 'NO_POLICY'
/** The possible values for an enabled/disabled enterprise setting.
 *
 * - `DISABLED` The setting is disabled for organizations in the enterprise.
 * - `ENABLED` The setting is enabled for organizations in the enterprise.
 * - `NO_POLICY` There is no policy set for organizations in the enterprise. */
export type EnterpriseEnabledDisabledSettingValue = 'DISABLED' | 'ENABLED' | 'NO_POLICY'
/** The possible values for an enabled/no policy enterprise setting.
 *
 * - `ENABLED` The setting is enabled for organizations in the enterprise.
 * - `NO_POLICY` There is no policy set for organizations in the enterprise. */
export type EnterpriseEnabledSettingValue = 'ENABLED' | 'NO_POLICY'
/** Properties by which enterprise member invitation connections can be ordered.
 *
 * - `CREATED_AT` Order enterprise member invitations by creation time */
export type EnterpriseMemberInvitationOrderField = 'CREATED_AT'
/** Properties by which enterprise member connections can be ordered.
 *
 * - `CREATED_AT` Order enterprise members by creation time
 * - `LOGIN` Order enterprise members by login */
export type EnterpriseMemberOrderField = 'CREATED_AT' | 'LOGIN'
/** The possible values for the enterprise members can create repositories setting.
 *
 * - `ALL` Members will be able to create public and private repositories.
 * - `DISABLED` Members will not be able to create public or private repositories.
 * - `NO_POLICY` Organization owners choose whether to allow members to create repositories.
 * - `PRIVATE` Members will be able to create only private repositories.
 * - `PUBLIC` Members will be able to create only public repositories. */
export type EnterpriseMembersCanCreateRepositoriesSettingValue = 'ALL' | 'DISABLED' | 'NO_POLICY' | 'PRIVATE' | 'PUBLIC'
/** The possible values for the members can make purchases setting.
 *
 * - `DISABLED` The setting is disabled for organizations in the enterprise.
 * - `ENABLED` The setting is enabled for organizations in the enterprise. */
export type EnterpriseMembersCanMakePurchasesSettingValue = 'DISABLED' | 'ENABLED'
/** The possible values we have for filtering Platform::Objects::User#enterprises.
 *
 * - `ADMIN` Returns all enterprises in which the user is an admin.
 * - `ALL` Returns all enterprises in which the user is a member, admin, or billing manager.
 * - `BILLING_MANAGER` Returns all enterprises in which the user is a billing manager.
 * - `ORG_MEMBERSHIP` Returns all enterprises in which the user is a member of an org that is owned by the enterprise. */
export type EnterpriseMembershipType = 'ADMIN' | 'ALL' | 'BILLING_MANAGER' | 'ORG_MEMBERSHIP'
/** Properties by which enterprise connections can be ordered.
 *
 * - `NAME` Order enterprises by name */
export type EnterpriseOrderField = 'NAME'
/** Properties by which Enterprise Server installation connections can be ordered.
 *
 * - `CREATED_AT` Order Enterprise Server installations by creation time
 * - `CUSTOMER_NAME` Order Enterprise Server installations by customer name
 * - `HOST_NAME` Order Enterprise Server installations by host name */
export type EnterpriseServerInstallationOrderField = 'CREATED_AT' | 'CUSTOMER_NAME' | 'HOST_NAME'
/** Properties by which Enterprise Server user account email connections can be ordered.
 *
 * - `EMAIL` Order emails by email */
export type EnterpriseServerUserAccountEmailOrderField = 'EMAIL'
/** Properties by which Enterprise Server user account connections can be ordered.
 *
 * - `LOGIN` Order user accounts by login
 * - `REMOTE_CREATED_AT` Order user accounts by creation time on the Enterprise Server installation */
export type EnterpriseServerUserAccountOrderField = 'LOGIN' | 'REMOTE_CREATED_AT'
/** Properties by which Enterprise Server user accounts upload connections can be ordered.
 *
 * - `CREATED_AT` Order user accounts uploads by creation time */
export type EnterpriseServerUserAccountsUploadOrderField = 'CREATED_AT'
/** Synchronization state of the Enterprise Server user accounts upload
 *
 * - `FAILURE` The synchronization of the upload failed.
 * - `PENDING` The synchronization of the upload is pending.
 * - `SUCCESS` The synchronization of the upload succeeded. */
export type EnterpriseServerUserAccountsUploadSyncState = 'FAILURE' | 'PENDING' | 'SUCCESS'
/** The possible roles for enterprise membership.
 *
 * - `MEMBER` The user is a member of an organization in the enterprise.
 * - `OWNER` The user is an owner of an organization in the enterprise.
 * - `UNAFFILIATED` The user is not an owner of the enterprise, and not a member or owner of any
 * organizations in the enterprise; only for EMU-enabled enterprises. */
export type EnterpriseUserAccountMembershipRole = 'MEMBER' | 'OWNER' | 'UNAFFILIATED'
/** The possible GitHub Enterprise deployments where this user can exist.
 *
 * - `CLOUD` The user is part of a GitHub Enterprise Cloud deployment.
 * - `SERVER` The user is part of a GitHub Enterprise Server deployment. */
export type EnterpriseUserDeployment = 'CLOUD' | 'SERVER'
/** Properties by which environments connections can be ordered
 *
 * - `NAME` Order environments by name. */
export type EnvironmentOrderField = 'NAME'
/** Properties by which environments connections can be ordered
 *
 * - `ALL` All environments will be returned.
 * - `NONE` Environments exclude pinned will be returned
 * - `ONLY` Only pinned environment will be returned */
export type EnvironmentPinnedFilterField = 'ALL' | 'NONE' | 'ONLY'
/** The possible viewed states of a file .
 *
 * - `DISMISSED` The file has new changes since last viewed.
 * - `UNVIEWED` The file has not been marked as viewed.
 * - `VIEWED` The file has been marked as viewed. */
export type FileViewedState = 'DISMISSED' | 'UNVIEWED' | 'VIEWED'
/** The possible funding platforms for repository funding links.
 *
 * - `BUY_ME_A_COFFEE` Buy Me a Coffee funding platform.
 * - `COMMUNITY_BRIDGE` Community Bridge funding platform.
 * - `CUSTOM` Custom funding platform.
 * - `GITHUB` GitHub funding platform.
 * - `ISSUEHUNT` IssueHunt funding platform.
 * - `KO_FI` Ko-fi funding platform.
 * - `LFX_CROWDFUNDING` LFX Crowdfunding funding platform.
 * - `LIBERAPAY` Liberapay funding platform.
 * - `OPEN_COLLECTIVE` Open Collective funding platform.
 * - `PATREON` Patreon funding platform.
 * - `POLAR` Polar funding platform.
 * - `THANKS_DEV` thanks.dev funding platform.
 * - `TIDELIFT` Tidelift funding platform. */
export type FundingPlatform = 'BUY_ME_A_COFFEE' | 'COMMUNITY_BRIDGE' | 'CUSTOM' | 'GITHUB' | 'ISSUEHUNT' | 'KO_FI' | 'LFX_CROWDFUNDING' | 'LIBERAPAY' | 'OPEN_COLLECTIVE' | 'PATREON' | 'POLAR' | 'THANKS_DEV' | 'TIDELIFT'
/** Properties by which gist connections can be ordered.
 *
 * - `CREATED_AT` Order gists by creation time
 * - `PUSHED_AT` Order gists by push time
 * - `UPDATED_AT` Order gists by update time */
export type GistOrderField = 'CREATED_AT' | 'PUSHED_AT' | 'UPDATED_AT'
/** The privacy of a Gist
 *
 * - `ALL` Gists that are public and secret
 * - `PUBLIC` Public
 * - `SECRET` Secret */
export type GistPrivacy = 'ALL' | 'PUBLIC' | 'SECRET'
/** The state of a Git signature.
 *
 * - `BAD_CERT` The signing certificate or its chain could not be verified
 * - `BAD_EMAIL` Invalid email used for signing
 * - `EXPIRED_KEY` Signing key expired
 * - `GPGVERIFY_ERROR` Internal error - the GPG verification service misbehaved
 * - `GPGVERIFY_UNAVAILABLE` Internal error - the GPG verification service is unavailable at the moment
 * - `INVALID` Invalid signature
 * - `MALFORMED_SIG` Malformed signature
 * - `NOT_SIGNING_KEY` The usage flags for the key that signed this don't allow signing
 * - `NO_USER` Email used for signing not known to GitHub
 * - `OCSP_ERROR` Valid signature, though certificate revocation check failed
 * - `OCSP_PENDING` Valid signature, pending certificate revocation checking
 * - `OCSP_REVOKED` One or more certificates in chain has been revoked
 * - `UNKNOWN_KEY` Key used for signing not known to GitHub
 * - `UNKNOWN_SIG_TYPE` Unknown signature type
 * - `UNSIGNED` Unsigned
 * - `UNVERIFIED_EMAIL` Email used for signing unverified on GitHub
 * - `VALID` Valid signature and verified by GitHub */
export type GitSignatureState = 'BAD_CERT' | 'BAD_EMAIL' | 'EXPIRED_KEY' | 'GPGVERIFY_ERROR' | 'GPGVERIFY_UNAVAILABLE' | 'INVALID' | 'MALFORMED_SIG' | 'NOT_SIGNING_KEY' | 'NO_USER' | 'OCSP_ERROR' | 'OCSP_PENDING' | 'OCSP_REVOKED' | 'UNKNOWN_KEY' | 'UNKNOWN_SIG_TYPE' | 'UNSIGNED' | 'UNVERIFIED_EMAIL' | 'VALID'
/** The possible states in which authentication can be configured with an identity provider.
 *
 * - `CONFIGURED` Authentication with an identity provider is configured but not enforced.
 * - `ENFORCED` Authentication with an identity provider is configured and enforced.
 * - `UNCONFIGURED` Authentication with an identity provider is not configured. */
export type IdentityProviderConfigurationState = 'CONFIGURED' | 'ENFORCED' | 'UNCONFIGURED'
/** The possible values for the IP allow list enabled setting.
 *
 * - `DISABLED` The setting is disabled for the owner.
 * - `ENABLED` The setting is enabled for the owner. */
export type IpAllowListEnabledSettingValue = 'DISABLED' | 'ENABLED'
/** Properties by which IP allow list entry connections can be ordered.
 *
 * - `ALLOW_LIST_VALUE` Order IP allow list entries by the allow list value.
 * - `CREATED_AT` Order IP allow list entries by creation time. */
export type IpAllowListEntryOrderField = 'ALLOW_LIST_VALUE' | 'CREATED_AT'
/** The possible values for the IP allow list configuration for installed GitHub Apps setting.
 *
 * - `DISABLED` The setting is disabled for the owner.
 * - `ENABLED` The setting is enabled for the owner. */
export type IpAllowListForInstalledAppsEnabledSettingValue = 'DISABLED' | 'ENABLED'
/** The possible state reasons of a closed issue.
 *
 * - `COMPLETED` An issue that has been closed as completed
 * - `DUPLICATE` An issue that has been closed as a duplicate
 * - `NOT_PLANNED` An issue that has been closed as not planned */
export type IssueClosedStateReason = 'COMPLETED' | 'DUPLICATE' | 'NOT_PLANNED'
/** Properties by which issue comment connections can be ordered.
 *
 * - `UPDATED_AT` Order issue comments by update time */
export type IssueCommentOrderField = 'UPDATED_AT'
/** Properties by which issue connections can be ordered.
 *
 * - `COMMENTS` Order issues by comment count
 * - `CREATED_AT` Order issues by creation time
 * - `UPDATED_AT` Order issues by update time */
export type IssueOrderField = 'COMMENTS' | 'CREATED_AT' | 'UPDATED_AT'
/** The possible states of an issue.
 *
 * - `CLOSED` An issue that has been closed
 * - `OPEN` An issue that is still open */
export type IssueState = 'CLOSED' | 'OPEN'
/** The possible state reasons of an issue.
 *
 * - `COMPLETED` An issue that has been closed as completed
 * - `DUPLICATE` An issue that has been closed as a duplicate. To retrieve this value, set
 * `(enableDuplicate: true)` when querying the stateReason field.
 * - `NOT_PLANNED` An issue that has been closed as not planned
 * - `REOPENED` An issue that has been reopened */
export type IssueStateReason = 'COMPLETED' | 'DUPLICATE' | 'NOT_PLANNED' | 'REOPENED'
/** The possible item types found in a timeline.
 *
 * - `ADDED_TO_PROJECT_EVENT` Represents a 'added_to_project' event on a given issue or pull request.
 * - `ASSIGNED_EVENT` Represents an 'assigned' event on any assignable object.
 * - `CLOSED_EVENT` Represents a 'closed' event on any `Closable`.
 * - `COMMENT_DELETED_EVENT` Represents a 'comment_deleted' event on a given issue or pull request.
 * - `CONNECTED_EVENT` Represents a 'connected' event on a given issue or pull request.
 * - `CONVERTED_NOTE_TO_ISSUE_EVENT` Represents a 'converted_note_to_issue' event on a given issue or pull request.
 * - `CONVERTED_TO_DISCUSSION_EVENT` Represents a 'converted_to_discussion' event on a given issue.
 * - `CROSS_REFERENCED_EVENT` Represents a mention made by one issue or pull request to another.
 * - `DEMILESTONED_EVENT` Represents a 'demilestoned' event on a given issue or pull request.
 * - `DISCONNECTED_EVENT` Represents a 'disconnected' event on a given issue or pull request.
 * - `ISSUE_COMMENT` Represents a comment on an Issue.
 * - `LABELED_EVENT` Represents a 'labeled' event on a given issue or pull request.
 * - `LOCKED_EVENT` Represents a 'locked' event on a given issue or pull request.
 * - `MARKED_AS_DUPLICATE_EVENT` Represents a 'marked_as_duplicate' event on a given issue or pull request.
 * - `MENTIONED_EVENT` Represents a 'mentioned' event on a given issue or pull request.
 * - `MILESTONED_EVENT` Represents a 'milestoned' event on a given issue or pull request.
 * - `MOVED_COLUMNS_IN_PROJECT_EVENT` Represents a 'moved_columns_in_project' event on a given issue or pull request.
 * - `PARENT_ISSUE_ADDED_EVENT` Represents a 'parent_issue_added' event on a given issue.
 * - `PARENT_ISSUE_REMOVED_EVENT` Represents a 'parent_issue_removed' event on a given issue.
 * - `PINNED_EVENT` Represents a 'pinned' event on a given issue or pull request.
 * - `REFERENCED_EVENT` Represents a 'referenced' event on a given `ReferencedSubject`.
 * - `REMOVED_FROM_PROJECT_EVENT` Represents a 'removed_from_project' event on a given issue or pull request.
 * - `RENAMED_TITLE_EVENT` Represents a 'renamed' event on a given issue or pull request
 * - `REOPENED_EVENT` Represents a 'reopened' event on any `Closable`.
 * - `SUBSCRIBED_EVENT` Represents a 'subscribed' event on a given `Subscribable`.
 * - `SUB_ISSUE_ADDED_EVENT` Represents a 'sub_issue_added' event on a given issue.
 * - `SUB_ISSUE_REMOVED_EVENT` Represents a 'sub_issue_removed' event on a given issue.
 * - `TRANSFERRED_EVENT` Represents a 'transferred' event on a given issue or pull request.
 * - `UNASSIGNED_EVENT` Represents an 'unassigned' event on any assignable object.
 * - `UNLABELED_EVENT` Represents an 'unlabeled' event on a given issue or pull request.
 * - `UNLOCKED_EVENT` Represents an 'unlocked' event on a given issue or pull request.
 * - `UNMARKED_AS_DUPLICATE_EVENT` Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 * - `UNPINNED_EVENT` Represents an 'unpinned' event on a given issue or pull request.
 * - `UNSUBSCRIBED_EVENT` Represents an 'unsubscribed' event on a given `Subscribable`.
 * - `USER_BLOCKED_EVENT` Represents a 'user_blocked' event on a given user. */
export type IssueTimelineItemsItemType = 'ADDED_TO_PROJECT_EVENT' | 'ASSIGNED_EVENT' | 'CLOSED_EVENT' | 'COMMENT_DELETED_EVENT' | 'CONNECTED_EVENT' | 'CONVERTED_NOTE_TO_ISSUE_EVENT' | 'CONVERTED_TO_DISCUSSION_EVENT' | 'CROSS_REFERENCED_EVENT' | 'DEMILESTONED_EVENT' | 'DISCONNECTED_EVENT' | 'ISSUE_COMMENT' | 'LABELED_EVENT' | 'LOCKED_EVENT' | 'MARKED_AS_DUPLICATE_EVENT' | 'MENTIONED_EVENT' | 'MILESTONED_EVENT' | 'MOVED_COLUMNS_IN_PROJECT_EVENT' | 'PARENT_ISSUE_ADDED_EVENT' | 'PARENT_ISSUE_REMOVED_EVENT' | 'PINNED_EVENT' | 'REFERENCED_EVENT' | 'REMOVED_FROM_PROJECT_EVENT' | 'RENAMED_TITLE_EVENT' | 'REOPENED_EVENT' | 'SUBSCRIBED_EVENT' | 'SUB_ISSUE_ADDED_EVENT' | 'SUB_ISSUE_REMOVED_EVENT' | 'TRANSFERRED_EVENT' | 'UNASSIGNED_EVENT' | 'UNLABELED_EVENT' | 'UNLOCKED_EVENT' | 'UNMARKED_AS_DUPLICATE_EVENT' | 'UNPINNED_EVENT' | 'UNSUBSCRIBED_EVENT' | 'USER_BLOCKED_EVENT'
/** Properties by which label connections can be ordered.
 *
 * - `CREATED_AT` Order labels by creation time
 * - `NAME` Order labels by name */
export type LabelOrderField = 'CREATED_AT' | 'NAME'
/** Properties by which language connections can be ordered.
 *
 * - `SIZE` Order languages by the size of all files containing the language */
export type LanguageOrderField = 'SIZE'
/** The possible reasons that an issue or pull request was locked.
 *
 * - `OFF_TOPIC` The issue or pull request was locked because the conversation was off-topic.
 * - `RESOLVED` The issue or pull request was locked because the conversation was resolved.
 * - `SPAM` The issue or pull request was locked because the conversation was spam.
 * - `TOO_HEATED` The issue or pull request was locked because the conversation was too heated. */
export type LockReason = 'OFF_TOPIC' | 'RESOLVED' | 'SPAM' | 'TOO_HEATED'
/** Properties by which mannequins can be ordered.
 *
 * - `CREATED_AT` Order mannequins why when they were created.
 * - `LOGIN` Order mannequins alphabetically by their source login. */
export type MannequinOrderField = 'CREATED_AT' | 'LOGIN'
/** Whether or not a PullRequest can be merged.
 *
 * - `CONFLICTING` The pull request cannot be merged due to merge conflicts.
 * - `MERGEABLE` The pull request can be merged.
 * - `UNKNOWN` The mergeability of the pull request is still being calculated. */
export type MergeableState = 'CONFLICTING' | 'MERGEABLE' | 'UNKNOWN'
/** The possible default commit messages for merges.
 *
 * - `BLANK` Default to a blank commit message.
 * - `PR_BODY` Default to the pull request's body.
 * - `PR_TITLE` Default to the pull request's title. */
export type MergeCommitMessage = 'BLANK' | 'PR_BODY' | 'PR_TITLE'
/** The possible default commit titles for merges.
 *
 * - `MERGE_MESSAGE` Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 * - `PR_TITLE` Default to the pull request's title. */
export type MergeCommitTitle = 'MERGE_MESSAGE' | 'PR_TITLE'
/** The possible states for a merge queue entry.
 *
 * - `AWAITING_CHECKS` The entry is currently waiting for checks to pass.
 * - `LOCKED` The entry is currently locked.
 * - `MERGEABLE` The entry is currently mergeable.
 * - `QUEUED` The entry is currently queued.
 * - `UNMERGEABLE` The entry is currently unmergeable. */
export type MergeQueueEntryState = 'AWAITING_CHECKS' | 'LOCKED' | 'MERGEABLE' | 'QUEUED' | 'UNMERGEABLE'
/** When set to ALLGREEN, the merge commit created by merge queue for each PR in the
 * group must pass all required checks to merge. When set to HEADGREEN, only the
 * commit at the head of the merge group, i.e. the commit containing changes from
 * all of the PRs in the group, must pass its required checks to merge.
 *
 * - `ALLGREEN` The merge commit created by merge queue for each PR in the group must pass all required checks to merge
 * - `HEADGREEN` Only the commit at the head of the merge group must pass its required checks to merge. */
export type MergeQueueGroupingStrategy = 'ALLGREEN' | 'HEADGREEN'
/** Method to use when merging changes from queued pull requests.
 *
 * - `MERGE` Merge commit
 * - `REBASE` Rebase and merge
 * - `SQUASH` Squash and merge */
export type MergeQueueMergeMethod = 'MERGE' | 'REBASE' | 'SQUASH'
/** The possible merging strategies for a merge queue.
 *
 * - `ALLGREEN` Entries only allowed to merge if they are passing.
 * - `HEADGREEN` Failing Entires are allowed to merge if they are with a passing entry. */
export type MergeQueueMergingStrategy = 'ALLGREEN' | 'HEADGREEN'
/** Detailed status information about a pull request merge.
 *
 * - `BEHIND` The head ref is out of date.
 * - `BLOCKED` The merge is blocked.
 * - `CLEAN` Mergeable and passing commit status.
 * - `DIRTY` The merge commit cannot be cleanly created.
 * - ~~`DRAFT`~~ (deprecated) The merge is blocked due to the pull request being a draft.
 * - `HAS_HOOKS` Mergeable with passing commit status and pre-receive hooks.
 * - `UNKNOWN` The state cannot currently be determined.
 * - `UNSTABLE` Mergeable with non-passing commit status. */
export type MergeStateStatus = 'BEHIND' | 'BLOCKED' | 'CLEAN' | 'DIRTY' | 'DRAFT' | 'HAS_HOOKS' | 'UNKNOWN' | 'UNSTABLE'
/** Represents the different GitHub Enterprise Importer (GEI) migration sources.
 *
 * - `AZURE_DEVOPS` An Azure DevOps migration source.
 * - `BITBUCKET_SERVER` A Bitbucket Server migration source.
 * - `GITHUB_ARCHIVE` A GitHub Migration API source. */
export type MigrationSourceType = 'AZURE_DEVOPS' | 'BITBUCKET_SERVER' | 'GITHUB_ARCHIVE'
/** The GitHub Enterprise Importer (GEI) migration state.
 *
 * - `FAILED` The migration has failed.
 * - `FAILED_VALIDATION` The migration has invalid credentials.
 * - `IN_PROGRESS` The migration is in progress.
 * - `NOT_STARTED` The migration has not started.
 * - `PENDING_VALIDATION` The migration needs to have its credentials validated.
 * - `QUEUED` The migration has been queued.
 * - `SUCCEEDED` The migration has succeeded. */
export type MigrationState = 'FAILED' | 'FAILED_VALIDATION' | 'IN_PROGRESS' | 'NOT_STARTED' | 'PENDING_VALIDATION' | 'QUEUED' | 'SUCCEEDED'
/** Properties by which milestone connections can be ordered.
 *
 * - `CREATED_AT` Order milestones by when they were created.
 * - `DUE_DATE` Order milestones by when they are due.
 * - `NUMBER` Order milestones by their number.
 * - `UPDATED_AT` Order milestones by when they were last updated. */
export type MilestoneOrderField = 'CREATED_AT' | 'DUE_DATE' | 'NUMBER' | 'UPDATED_AT'
/** The possible states of a milestone.
 *
 * - `CLOSED` A milestone that has been closed.
 * - `OPEN` A milestone that is still open. */
export type MilestoneState = 'CLOSED' | 'OPEN'
/** The possible values for the notification restriction setting.
 *
 * - `DISABLED` The setting is disabled for the owner.
 * - `ENABLED` The setting is enabled for the owner. */
export type NotificationRestrictionSettingValue = 'DISABLED' | 'ENABLED'
/** The state of an OAuth application when it was created.
 *
 * - `ACTIVE` The OAuth application was active and allowed to have OAuth Accesses.
 * - `PENDING_DELETION` The OAuth application was in the process of being deleted.
 * - `SUSPENDED` The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns. */
export type OauthApplicationCreateAuditEntryState = 'ACTIVE' | 'PENDING_DELETION' | 'SUSPENDED'
/** The OIDC identity provider type
 *
 * - `AAD` Azure Active Directory */
export type OIDCProviderType = 'AAD'
/** The corresponding operation type for the action
 *
 * - `ACCESS` An existing resource was accessed
 * - `AUTHENTICATION` A resource performed an authentication event
 * - `CREATE` A new resource was created
 * - `MODIFY` An existing resource was modified
 * - `REMOVE` An existing resource was removed
 * - `RESTORE` An existing resource was restored
 * - `TRANSFER` An existing resource was transferred between multiple resources */
export type OperationType = 'ACCESS' | 'AUTHENTICATION' | 'CREATE' | 'MODIFY' | 'REMOVE' | 'RESTORE' | 'TRANSFER'
/** Possible directions in which to order a list of items when provided an `orderBy` argument.
 *
 * - `ASC` Specifies an ascending order for a given `orderBy` argument.
 * - `DESC` Specifies a descending order for a given `orderBy` argument. */
export type OrderDirection = 'ASC' | 'DESC'
/** The permissions available to members on an Organization.
 *
 * - `ADMIN` Can read, clone, push, and add collaborators to repositories.
 * - `READ` Can read and clone repositories. */
export type OrgAddMemberAuditEntryPermission = 'ADMIN' | 'READ'
/** The possible organization invitation roles.
 *
 * - `ADMIN` The user is invited to be an admin of the organization.
 * - `BILLING_MANAGER` The user is invited to be a billing manager of the organization.
 * - `DIRECT_MEMBER` The user is invited to be a direct member of the organization.
 * - `REINSTATE` The user's previous role will be reinstated. */
export type OrganizationInvitationRole = 'ADMIN' | 'BILLING_MANAGER' | 'DIRECT_MEMBER' | 'REINSTATE'
/** The possible organization invitation sources.
 *
 * - `MEMBER` The invitation was created from the web interface or from API
 * - `SCIM` The invitation was created from SCIM
 * - `UNKNOWN` The invitation was sent before this feature was added */
export type OrganizationInvitationSource = 'MEMBER' | 'SCIM' | 'UNKNOWN'
/** The possible organization invitation types.
 *
 * - `EMAIL` The invitation was to an email address.
 * - `USER` The invitation was to an existing user. */
export type OrganizationInvitationType = 'EMAIL' | 'USER'
/** The possible roles within an organization for its members.
 *
 * - `ADMIN` The user is an administrator of the organization.
 * - `MEMBER` The user is a member of the organization. */
export type OrganizationMemberRole = 'ADMIN' | 'MEMBER'
/** The possible values for the members can create repositories setting on an organization.
 *
 * - `ALL` Members will be able to create public and private repositories.
 * - `DISABLED` Members will not be able to create public or private repositories.
 * - `INTERNAL` Members will be able to create only internal repositories.
 * - `PRIVATE` Members will be able to create only private repositories. */
export type OrganizationMembersCanCreateRepositoriesSettingValue = 'ALL' | 'DISABLED' | 'INTERNAL' | 'PRIVATE'
/** The Octoshift Organization migration state.
 *
 * - `FAILED` The Octoshift migration has failed.
 * - `FAILED_VALIDATION` The Octoshift migration has invalid credentials.
 * - `IN_PROGRESS` The Octoshift migration is in progress.
 * - `NOT_STARTED` The Octoshift migration has not started.
 * - `PENDING_VALIDATION` The Octoshift migration needs to have its credentials validated.
 * - `POST_REPO_MIGRATION` The Octoshift migration is performing post repository migrations.
 * - `PRE_REPO_MIGRATION` The Octoshift migration is performing pre repository migrations.
 * - `QUEUED` The Octoshift migration has been queued.
 * - `REPO_MIGRATION` The Octoshift org migration is performing repository migrations.
 * - `SUCCEEDED` The Octoshift migration has succeeded. */
export type OrganizationMigrationState = 'FAILED' | 'FAILED_VALIDATION' | 'IN_PROGRESS' | 'NOT_STARTED' | 'PENDING_VALIDATION' | 'POST_REPO_MIGRATION' | 'PRE_REPO_MIGRATION' | 'QUEUED' | 'REPO_MIGRATION' | 'SUCCEEDED'
/** Properties by which organization connections can be ordered.
 *
 * - `CREATED_AT` Order organizations by creation time
 * - `LOGIN` Order organizations by login */
export type OrganizationOrderField = 'CREATED_AT' | 'LOGIN'
/** The billing plans available for organizations.
 *
 * - `BUSINESS` Team Plan
 * - `BUSINESS_PLUS` Enterprise Cloud Plan
 * - `FREE` Free Plan
 * - `TIERED_PER_SEAT` Tiered Per Seat Plan
 * - `UNLIMITED` Legacy Unlimited Plan */
export type OrgCreateAuditEntryBillingPlan = 'BUSINESS' | 'BUSINESS_PLUS' | 'FREE' | 'TIERED_PER_SEAT' | 'UNLIMITED'
/** Properties by which enterprise owners can be ordered.
 *
 * - `LOGIN` Order enterprise owners by login. */
export type OrgEnterpriseOwnerOrderField = 'LOGIN'
/** The reason a billing manager was removed from an Organization.
 *
 * - `SAML_EXTERNAL_IDENTITY_MISSING` SAML external identity missing
 * - `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY` SAML SSO enforcement requires an external identity
 * - `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE` The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
export type OrgRemoveBillingManagerAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
/** The type of membership a user has with an Organization.
 *
 * - `ADMIN` Organization owners have full access and can change several settings,
 * including the names of repositories that belong to the Organization and Owners
 * team membership. In addition, organization owners can delete the organization
 * and all of its repositories.
 * - `BILLING_MANAGER` A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
 * - `DIRECT_MEMBER` A direct member is a user that is a member of the Organization.
 * - `OUTSIDE_COLLABORATOR` An outside collaborator is a person who isn't explicitly a member of the
 * Organization, but who has Read, Write, or Admin permissions to one or more
 * repositories in the organization.
 * - `SUSPENDED` A suspended member.
 * - `UNAFFILIATED` An unaffiliated collaborator is a person who is not a member of the
 * Organization and does not have access to any repositories in the Organization. */
export type OrgRemoveMemberAuditEntryMembershipType = 'ADMIN' | 'BILLING_MANAGER' | 'DIRECT_MEMBER' | 'OUTSIDE_COLLABORATOR' | 'SUSPENDED' | 'UNAFFILIATED'
/** The reason a member was removed from an Organization.
 *
 * - `SAML_EXTERNAL_IDENTITY_MISSING` SAML external identity missing
 * - `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY` SAML SSO enforcement requires an external identity
 * - `TWO_FACTOR_ACCOUNT_RECOVERY` User was removed from organization during account recovery
 * - `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE` The organization required 2FA of its billing managers and this user did not have 2FA enabled.
 * - `USER_ACCOUNT_DELETED` User account has been deleted */
export type OrgRemoveMemberAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' | 'TWO_FACTOR_ACCOUNT_RECOVERY' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE' | 'USER_ACCOUNT_DELETED'
/** The type of membership a user has with an Organization.
 *
 * - `BILLING_MANAGER` A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
 * - `OUTSIDE_COLLABORATOR` An outside collaborator is a person who isn't explicitly a member of the
 * Organization, but who has Read, Write, or Admin permissions to one or more
 * repositories in the organization.
 * - `UNAFFILIATED` An unaffiliated collaborator is a person who is not a member of the
 * Organization and does not have access to any repositories in the organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryMembershipType = 'BILLING_MANAGER' | 'OUTSIDE_COLLABORATOR' | 'UNAFFILIATED'
/** The reason an outside collaborator was removed from an Organization.
 *
 * - `SAML_EXTERNAL_IDENTITY_MISSING` SAML external identity missing
 * - `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE` The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
export type OrgRemoveOutsideCollaboratorAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
/** The default permission a repository can have in an Organization.
 *
 * - `ADMIN` Can read, clone, push, and add collaborators to repositories.
 * - `NONE` No default permission value.
 * - `READ` Can read and clone repositories.
 * - `WRITE` Can read, clone and push to repositories. */
export type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = 'ADMIN' | 'NONE' | 'READ' | 'WRITE'
/** The permissions available to members on an Organization.
 *
 * - `ADMIN` Can read, clone, push, and add collaborators to repositories.
 * - `READ` Can read and clone repositories. */
export type OrgUpdateMemberAuditEntryPermission = 'ADMIN' | 'READ'
/** The permissions available for repository creation on an Organization.
 *
 * - `ALL` All organization members are restricted from creating any repositories.
 * - `INTERNAL` All organization members are restricted from creating internal repositories.
 * - `NONE` All organization members are allowed to create any repositories.
 * - `PRIVATE` All organization members are restricted from creating private repositories.
 * - `PRIVATE_INTERNAL` All organization members are restricted from creating private or internal repositories.
 * - `PUBLIC` All organization members are restricted from creating public repositories.
 * - `PUBLIC_INTERNAL` All organization members are restricted from creating public or internal repositories.
 * - `PUBLIC_PRIVATE` All organization members are restricted from creating public or private repositories. */
export type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = 'ALL' | 'INTERNAL' | 'NONE' | 'PRIVATE' | 'PRIVATE_INTERNAL' | 'PUBLIC' | 'PUBLIC_INTERNAL' | 'PUBLIC_PRIVATE'
/** Properties by which package file connections can be ordered.
 *
 * - `CREATED_AT` Order package files by creation time */
export type PackageFileOrderField = 'CREATED_AT'
/** Properties by which package connections can be ordered.
 *
 * - `CREATED_AT` Order packages by creation time */
export type PackageOrderField = 'CREATED_AT'
/** The possible types of a package.
 *
 * - `DEBIAN` A debian package.
 * - ~~`DOCKER`~~ (deprecated) A docker image.
 * - ~~`MAVEN`~~ (deprecated) A maven package.
 * - ~~`NPM`~~ (deprecated) An npm package.
 * - ~~`NUGET`~~ (deprecated) A nuget package.
 * - `PYPI` A python package.
 * - ~~`RUBYGEMS`~~ (deprecated) A rubygems package. */
export type PackageType = 'DEBIAN' | 'DOCKER' | 'MAVEN' | 'NPM' | 'NUGET' | 'PYPI' | 'RUBYGEMS'
/** Properties by which package version connections can be ordered.
 *
 * - `CREATED_AT` Order package versions by creation time */
export type PackageVersionOrderField = 'CREATED_AT'
/** The possible types of patch statuses.
 *
 * - `ADDED` The file was added. Git status 'A'.
 * - `CHANGED` The file's type was changed. Git status 'T'.
 * - `COPIED` The file was copied. Git status 'C'.
 * - `DELETED` The file was deleted. Git status 'D'.
 * - `MODIFIED` The file's contents were changed. Git status 'M'.
 * - `RENAMED` The file was renamed. Git status 'R'. */
export type PatchStatus = 'ADDED' | 'CHANGED' | 'COPIED' | 'DELETED' | 'MODIFIED' | 'RENAMED'
/** Represents items that can be pinned to a profile page or dashboard.
 *
 * - `GIST` A gist.
 * - `ISSUE` An issue.
 * - `ORGANIZATION` An organization.
 * - `PROJECT` A project.
 * - `PULL_REQUEST` A pull request.
 * - `REPOSITORY` A repository.
 * - `TEAM` A team.
 * - `USER` A user. */
export type PinnableItemType = 'GIST' | 'ISSUE' | 'ORGANIZATION' | 'PROJECT' | 'PULL_REQUEST' | 'REPOSITORY' | 'TEAM' | 'USER'
/** Preconfigured gradients that may be used to style discussions pinned within a repository.
 *
 * - `BLUE_MINT` A gradient of blue to mint
 * - `BLUE_PURPLE` A gradient of blue to purple
 * - `PINK_BLUE` A gradient of pink to blue
 * - `PURPLE_CORAL` A gradient of purple to coral
 * - `RED_ORANGE` A gradient of red to orange */
export type PinnedDiscussionGradient = 'BLUE_MINT' | 'BLUE_PURPLE' | 'PINK_BLUE' | 'PURPLE_CORAL' | 'RED_ORANGE'
/** Preconfigured background patterns that may be used to style discussions pinned within a repository.
 *
 * - `CHEVRON_UP` An upward-facing chevron pattern
 * - `DOT` A hollow dot pattern
 * - `DOT_FILL` A solid dot pattern
 * - `HEART_FILL` A heart pattern
 * - `PLUS` A plus sign pattern
 * - `ZAP` A lightning bolt pattern */
export type PinnedDiscussionPattern = 'CHEVRON_UP' | 'DOT' | 'DOT_FILL' | 'HEART_FILL' | 'PLUS' | 'ZAP'
/** Properties by which pinned environments connections can be ordered
 *
 * - `POSITION` Order pinned environments by position */
export type PinnedEnvironmentOrderField = 'POSITION'
/** The possible archived states of a project card.
 *
 * - `ARCHIVED` A project card that is archived
 * - `NOT_ARCHIVED` A project card that is not archived */
export type ProjectCardArchivedState = 'ARCHIVED' | 'NOT_ARCHIVED'
/** Various content states of a ProjectCard
 *
 * - `CONTENT_ONLY` The card has content only.
 * - `NOTE_ONLY` The card has a note only.
 * - `REDACTED` The card is redacted. */
export type ProjectCardState = 'CONTENT_ONLY' | 'NOTE_ONLY' | 'REDACTED'
/** The semantic purpose of the column - todo, in progress, or done.
 *
 * - `DONE` The column contains cards which are complete
 * - `IN_PROGRESS` The column contains cards which are currently being worked on
 * - `TODO` The column contains cards still to be worked on */
export type ProjectColumnPurpose = 'DONE' | 'IN_PROGRESS' | 'TODO'
/** Properties by which project connections can be ordered.
 *
 * - `CREATED_AT` Order projects by creation time
 * - `NAME` Order projects by name
 * - `UPDATED_AT` Order projects by update time */
export type ProjectOrderField = 'CREATED_AT' | 'NAME' | 'UPDATED_AT'
/** State of the project; either 'open' or 'closed'
 *
 * - `CLOSED` The project is closed.
 * - `OPEN` The project is open. */
export type ProjectState = 'CLOSED' | 'OPEN'
/** GitHub-provided templates for Projects
 *
 * - `AUTOMATED_KANBAN_V2` Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
 * - `AUTOMATED_REVIEWS_KANBAN` Create a board with triggers to automatically move cards across columns with review automation.
 * - `BASIC_KANBAN` Create a board with columns for To do, In progress and Done.
 * - `BUG_TRIAGE` Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
export type ProjectTemplate = 'AUTOMATED_KANBAN_V2' | 'AUTOMATED_REVIEWS_KANBAN' | 'BASIC_KANBAN' | 'BUG_TRIAGE'
/** The type of a project field.
 *
 * - `DATE` Date
 * - `NUMBER` Number
 * - `SINGLE_SELECT` Single Select
 * - `TEXT` Text */
export type ProjectV2CustomFieldType = 'DATE' | 'NUMBER' | 'SINGLE_SELECT' | 'TEXT'
/** Properties by which project v2 field connections can be ordered.
 *
 * - `CREATED_AT` Order project v2 fields by creation time
 * - `NAME` Order project v2 fields by name
 * - `POSITION` Order project v2 fields by position */
export type ProjectV2FieldOrderField = 'CREATED_AT' | 'NAME' | 'POSITION'
/** The type of a project field.
 *
 * - `ASSIGNEES` Assignees
 * - `DATE` Date
 * - `ITERATION` Iteration
 * - `LABELS` Labels
 * - `LINKED_PULL_REQUESTS` Linked Pull Requests
 * - `MILESTONE` Milestone
 * - `NUMBER` Number
 * - `REPOSITORY` Repository
 * - `REVIEWERS` Reviewers
 * - `SINGLE_SELECT` Single Select
 * - `TEXT` Text
 * - `TITLE` Title
 * - `TRACKED_BY` Tracked by
 * - `TRACKS` Tracks */
export type ProjectV2FieldType = 'ASSIGNEES' | 'DATE' | 'ITERATION' | 'LABELS' | 'LINKED_PULL_REQUESTS' | 'MILESTONE' | 'NUMBER' | 'REPOSITORY' | 'REVIEWERS' | 'SINGLE_SELECT' | 'TEXT' | 'TITLE' | 'TRACKED_BY' | 'TRACKS'
/** Properties by which project v2 item field value connections can be ordered.
 *
 * - `POSITION` Order project v2 item field values by the their position in the project */
export type ProjectV2ItemFieldValueOrderField = 'POSITION'
/** Properties by which project v2 item connections can be ordered.
 *
 * - `POSITION` Order project v2 items by the their position in the project */
export type ProjectV2ItemOrderField = 'POSITION'
/** The type of a project item.
 *
 * - `DRAFT_ISSUE` Draft Issue
 * - `ISSUE` Issue
 * - `PULL_REQUEST` Pull Request
 * - `REDACTED` Redacted Item */
export type ProjectV2ItemType = 'DRAFT_ISSUE' | 'ISSUE' | 'PULL_REQUEST' | 'REDACTED'
/** Properties by which projects can be ordered.
 *
 * - `CREATED_AT` The project's date and time of creation
 * - `NUMBER` The project's number
 * - `TITLE` The project's title
 * - `UPDATED_AT` The project's date and time of update */
export type ProjectV2OrderField = 'CREATED_AT' | 'NUMBER' | 'TITLE' | 'UPDATED_AT'
/** The possible roles of a collaborator on a project.
 *
 * - `ADMIN` The collaborator can view, edit, and maange the settings of the project
 * - `READ` The collaborator can view the project
 * - `WRITE` The collaborator can view and edit the project */
export type ProjectV2PermissionLevel = 'ADMIN' | 'READ' | 'WRITE'
/** The possible roles of a collaborator on a project.
 *
 * - `ADMIN` The collaborator can view, edit, and maange the settings of the project
 * - `NONE` The collaborator has no direct access to the project
 * - `READER` The collaborator can view the project
 * - `WRITER` The collaborator can view and edit the project */
export type ProjectV2Roles = 'ADMIN' | 'NONE' | 'READER' | 'WRITER'
/** The display color of a single-select field option.
 *
 * - `BLUE` BLUE
 * - `GRAY` GRAY
 * - `GREEN` GREEN
 * - `ORANGE` ORANGE
 * - `PINK` PINK
 * - `PURPLE` PURPLE
 * - `RED` RED
 * - `YELLOW` YELLOW */
export type ProjectV2SingleSelectFieldOptionColor = 'BLUE' | 'GRAY' | 'GREEN' | 'ORANGE' | 'PINK' | 'PURPLE' | 'RED' | 'YELLOW'
/** The possible states of a project v2.
 *
 * - `CLOSED` A project v2 that has been closed
 * - `OPEN` A project v2 that is still open */
export type ProjectV2State = 'CLOSED' | 'OPEN'
/** Properties by which project v2 status updates can be ordered.
 *
 * - `CREATED_AT` Allows chronological ordering of project v2 status updates. */
export type ProjectV2StatusUpdateOrderField = 'CREATED_AT'
/** The possible statuses of a project v2.
 *
 * - `AT_RISK` A project v2 that is at risk and encountering some challenges.
 * - `COMPLETE` A project v2 that is complete.
 * - `INACTIVE` A project v2 that is inactive.
 * - `OFF_TRACK` A project v2 that is off track and needs attention.
 * - `ON_TRACK` A project v2 that is on track with no risks. */
export type ProjectV2StatusUpdateStatus = 'AT_RISK' | 'COMPLETE' | 'INACTIVE' | 'OFF_TRACK' | 'ON_TRACK'
/** The layout of a project v2 view.
 *
 * - `BOARD_LAYOUT` Board layout
 * - `ROADMAP_LAYOUT` Roadmap layout
 * - `TABLE_LAYOUT` Table layout */
export type ProjectV2ViewLayout = 'BOARD_LAYOUT' | 'ROADMAP_LAYOUT' | 'TABLE_LAYOUT'
/** Properties by which project v2 view connections can be ordered.
 *
 * - `CREATED_AT` Order project v2 views by creation time
 * - `NAME` Order project v2 views by name
 * - `POSITION` Order project v2 views by position */
export type ProjectV2ViewOrderField = 'CREATED_AT' | 'NAME' | 'POSITION'
/** Properties by which project workflows can be ordered.
 *
 * - `CREATED_AT` The date and time of the workflow creation
 * - `NAME` The name of the workflow
 * - `NUMBER` The number of the workflow
 * - `UPDATED_AT` The date and time of the workflow update */
export type ProjectV2WorkflowsOrderField = 'CREATED_AT' | 'NAME' | 'NUMBER' | 'UPDATED_AT'
/** The possible methods for updating a pull request's head branch with the base branch.
 *
 * - `MERGE` Update branch via merge
 * - `REBASE` Update branch via rebase */
export type PullRequestBranchUpdateMethod = 'MERGE' | 'REBASE'
/** Represents available types of methods to use when merging a pull request.
 *
 * - `MERGE` Add all commits from the head branch to the base branch with a merge commit.
 * - `REBASE` Add all commits from the head branch onto the base branch individually.
 * - `SQUASH` Combine all commits from the head branch into a single commit in the base branch. */
export type PullRequestMergeMethod = 'MERGE' | 'REBASE' | 'SQUASH'
/** Properties by which pull_requests connections can be ordered.
 *
 * - `CREATED_AT` Order pull_requests by creation time
 * - `UPDATED_AT` Order pull_requests by update time */
export type PullRequestOrderField = 'CREATED_AT' | 'UPDATED_AT'
/** The possible states of a pull request review comment.
 *
 * - `PENDING` A comment that is part of a pending review
 * - `SUBMITTED` A comment that is part of a submitted review */
export type PullRequestReviewCommentState = 'PENDING' | 'SUBMITTED'
/** The review status of a pull request.
 *
 * - `APPROVED` The pull request has received an approving review.
 * - `CHANGES_REQUESTED` Changes have been requested on the pull request.
 * - `REVIEW_REQUIRED` A review is required before the pull request can be merged. */
export type PullRequestReviewDecision = 'APPROVED' | 'CHANGES_REQUESTED' | 'REVIEW_REQUIRED'
/** The possible events to perform on a pull request review.
 *
 * - `APPROVE` Submit feedback and approve merging these changes.
 * - `COMMENT` Submit general feedback without explicit approval.
 * - `DISMISS` Dismiss review so it now longer effects merging.
 * - `REQUEST_CHANGES` Submit feedback that must be addressed before merging. */
export type PullRequestReviewEvent = 'APPROVE' | 'COMMENT' | 'DISMISS' | 'REQUEST_CHANGES'
/** The possible states of a pull request review.
 *
 * - `APPROVED` A review allowing the pull request to merge.
 * - `CHANGES_REQUESTED` A review blocking the pull request from merging.
 * - `COMMENTED` An informational review.
 * - `DISMISSED` A review that has been dismissed.
 * - `PENDING` A review that has not yet been submitted. */
export type PullRequestReviewState = 'APPROVED' | 'CHANGES_REQUESTED' | 'COMMENTED' | 'DISMISSED' | 'PENDING'
/** The possible subject types of a pull request review comment.
 *
 * - `FILE` A comment that has been made against the file of a pull request
 * - `LINE` A comment that has been made against the line of a pull request */
export type PullRequestReviewThreadSubjectType = 'FILE' | 'LINE'
/** The possible states of a pull request.
 *
 * - `CLOSED` A pull request that has been closed without being merged.
 * - `MERGED` A pull request that has been closed by being merged.
 * - `OPEN` A pull request that is still open. */
export type PullRequestState = 'CLOSED' | 'MERGED' | 'OPEN'
/** The possible item types found in a timeline.
 *
 * - `ADDED_TO_MERGE_QUEUE_EVENT` Represents an 'added_to_merge_queue' event on a given pull request.
 * - `ADDED_TO_PROJECT_EVENT` Represents a 'added_to_project' event on a given issue or pull request.
 * - `ASSIGNED_EVENT` Represents an 'assigned' event on any assignable object.
 * - `AUTOMATIC_BASE_CHANGE_FAILED_EVENT` Represents a 'automatic_base_change_failed' event on a given pull request.
 * - `AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT` Represents a 'automatic_base_change_succeeded' event on a given pull request.
 * - `AUTO_MERGE_DISABLED_EVENT` Represents a 'auto_merge_disabled' event on a given pull request.
 * - `AUTO_MERGE_ENABLED_EVENT` Represents a 'auto_merge_enabled' event on a given pull request.
 * - `AUTO_REBASE_ENABLED_EVENT` Represents a 'auto_rebase_enabled' event on a given pull request.
 * - `AUTO_SQUASH_ENABLED_EVENT` Represents a 'auto_squash_enabled' event on a given pull request.
 * - `BASE_REF_CHANGED_EVENT` Represents a 'base_ref_changed' event on a given issue or pull request.
 * - `BASE_REF_DELETED_EVENT` Represents a 'base_ref_deleted' event on a given pull request.
 * - `BASE_REF_FORCE_PUSHED_EVENT` Represents a 'base_ref_force_pushed' event on a given pull request.
 * - `CLOSED_EVENT` Represents a 'closed' event on any `Closable`.
 * - `COMMENT_DELETED_EVENT` Represents a 'comment_deleted' event on a given issue or pull request.
 * - `CONNECTED_EVENT` Represents a 'connected' event on a given issue or pull request.
 * - `CONVERTED_NOTE_TO_ISSUE_EVENT` Represents a 'converted_note_to_issue' event on a given issue or pull request.
 * - `CONVERTED_TO_DISCUSSION_EVENT` Represents a 'converted_to_discussion' event on a given issue.
 * - `CONVERT_TO_DRAFT_EVENT` Represents a 'convert_to_draft' event on a given pull request.
 * - `CROSS_REFERENCED_EVENT` Represents a mention made by one issue or pull request to another.
 * - `DEMILESTONED_EVENT` Represents a 'demilestoned' event on a given issue or pull request.
 * - `DEPLOYED_EVENT` Represents a 'deployed' event on a given pull request.
 * - `DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT` Represents a 'deployment_environment_changed' event on a given pull request.
 * - `DISCONNECTED_EVENT` Represents a 'disconnected' event on a given issue or pull request.
 * - `HEAD_REF_DELETED_EVENT` Represents a 'head_ref_deleted' event on a given pull request.
 * - `HEAD_REF_FORCE_PUSHED_EVENT` Represents a 'head_ref_force_pushed' event on a given pull request.
 * - `HEAD_REF_RESTORED_EVENT` Represents a 'head_ref_restored' event on a given pull request.
 * - `ISSUE_COMMENT` Represents a comment on an Issue.
 * - `LABELED_EVENT` Represents a 'labeled' event on a given issue or pull request.
 * - `LOCKED_EVENT` Represents a 'locked' event on a given issue or pull request.
 * - `MARKED_AS_DUPLICATE_EVENT` Represents a 'marked_as_duplicate' event on a given issue or pull request.
 * - `MENTIONED_EVENT` Represents a 'mentioned' event on a given issue or pull request.
 * - `MERGED_EVENT` Represents a 'merged' event on a given pull request.
 * - `MILESTONED_EVENT` Represents a 'milestoned' event on a given issue or pull request.
 * - `MOVED_COLUMNS_IN_PROJECT_EVENT` Represents a 'moved_columns_in_project' event on a given issue or pull request.
 * - `PARENT_ISSUE_ADDED_EVENT` Represents a 'parent_issue_added' event on a given issue.
 * - `PARENT_ISSUE_REMOVED_EVENT` Represents a 'parent_issue_removed' event on a given issue.
 * - `PINNED_EVENT` Represents a 'pinned' event on a given issue or pull request.
 * - `PULL_REQUEST_COMMIT` Represents a Git commit part of a pull request.
 * - `PULL_REQUEST_COMMIT_COMMENT_THREAD` Represents a commit comment thread part of a pull request.
 * - `PULL_REQUEST_REVIEW` A review object for a given pull request.
 * - `PULL_REQUEST_REVIEW_THREAD` A threaded list of comments for a given pull request.
 * - `PULL_REQUEST_REVISION_MARKER` Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 * - `READY_FOR_REVIEW_EVENT` Represents a 'ready_for_review' event on a given pull request.
 * - `REFERENCED_EVENT` Represents a 'referenced' event on a given `ReferencedSubject`.
 * - `REMOVED_FROM_MERGE_QUEUE_EVENT` Represents a 'removed_from_merge_queue' event on a given pull request.
 * - `REMOVED_FROM_PROJECT_EVENT` Represents a 'removed_from_project' event on a given issue or pull request.
 * - `RENAMED_TITLE_EVENT` Represents a 'renamed' event on a given issue or pull request
 * - `REOPENED_EVENT` Represents a 'reopened' event on any `Closable`.
 * - `REVIEW_DISMISSED_EVENT` Represents a 'review_dismissed' event on a given issue or pull request.
 * - `REVIEW_REQUESTED_EVENT` Represents an 'review_requested' event on a given pull request.
 * - `REVIEW_REQUEST_REMOVED_EVENT` Represents an 'review_request_removed' event on a given pull request.
 * - `SUBSCRIBED_EVENT` Represents a 'subscribed' event on a given `Subscribable`.
 * - `SUB_ISSUE_ADDED_EVENT` Represents a 'sub_issue_added' event on a given issue.
 * - `SUB_ISSUE_REMOVED_EVENT` Represents a 'sub_issue_removed' event on a given issue.
 * - `TRANSFERRED_EVENT` Represents a 'transferred' event on a given issue or pull request.
 * - `UNASSIGNED_EVENT` Represents an 'unassigned' event on any assignable object.
 * - `UNLABELED_EVENT` Represents an 'unlabeled' event on a given issue or pull request.
 * - `UNLOCKED_EVENT` Represents an 'unlocked' event on a given issue or pull request.
 * - `UNMARKED_AS_DUPLICATE_EVENT` Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 * - `UNPINNED_EVENT` Represents an 'unpinned' event on a given issue or pull request.
 * - `UNSUBSCRIBED_EVENT` Represents an 'unsubscribed' event on a given `Subscribable`.
 * - `USER_BLOCKED_EVENT` Represents a 'user_blocked' event on a given user. */
export type PullRequestTimelineItemsItemType = 'ADDED_TO_MERGE_QUEUE_EVENT' | 'ADDED_TO_PROJECT_EVENT' | 'ASSIGNED_EVENT' | 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT' | 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT' | 'AUTO_MERGE_DISABLED_EVENT' | 'AUTO_MERGE_ENABLED_EVENT' | 'AUTO_REBASE_ENABLED_EVENT' | 'AUTO_SQUASH_ENABLED_EVENT' | 'BASE_REF_CHANGED_EVENT' | 'BASE_REF_DELETED_EVENT' | 'BASE_REF_FORCE_PUSHED_EVENT' | 'CLOSED_EVENT' | 'COMMENT_DELETED_EVENT' | 'CONNECTED_EVENT' | 'CONVERTED_NOTE_TO_ISSUE_EVENT' | 'CONVERTED_TO_DISCUSSION_EVENT' | 'CONVERT_TO_DRAFT_EVENT' | 'CROSS_REFERENCED_EVENT' | 'DEMILESTONED_EVENT' | 'DEPLOYED_EVENT' | 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT' | 'DISCONNECTED_EVENT' | 'HEAD_REF_DELETED_EVENT' | 'HEAD_REF_FORCE_PUSHED_EVENT' | 'HEAD_REF_RESTORED_EVENT' | 'ISSUE_COMMENT' | 'LABELED_EVENT' | 'LOCKED_EVENT' | 'MARKED_AS_DUPLICATE_EVENT' | 'MENTIONED_EVENT' | 'MERGED_EVENT' | 'MILESTONED_EVENT' | 'MOVED_COLUMNS_IN_PROJECT_EVENT' | 'PARENT_ISSUE_ADDED_EVENT' | 'PARENT_ISSUE_REMOVED_EVENT' | 'PINNED_EVENT' | 'PULL_REQUEST_COMMIT' | 'PULL_REQUEST_COMMIT_COMMENT_THREAD' | 'PULL_REQUEST_REVIEW' | 'PULL_REQUEST_REVIEW_THREAD' | 'PULL_REQUEST_REVISION_MARKER' | 'READY_FOR_REVIEW_EVENT' | 'REFERENCED_EVENT' | 'REMOVED_FROM_MERGE_QUEUE_EVENT' | 'REMOVED_FROM_PROJECT_EVENT' | 'RENAMED_TITLE_EVENT' | 'REOPENED_EVENT' | 'REVIEW_DISMISSED_EVENT' | 'REVIEW_REQUESTED_EVENT' | 'REVIEW_REQUEST_REMOVED_EVENT' | 'SUBSCRIBED_EVENT' | 'SUB_ISSUE_ADDED_EVENT' | 'SUB_ISSUE_REMOVED_EVENT' | 'TRANSFERRED_EVENT' | 'UNASSIGNED_EVENT' | 'UNLABELED_EVENT' | 'UNLOCKED_EVENT' | 'UNMARKED_AS_DUPLICATE_EVENT' | 'UNPINNED_EVENT' | 'UNSUBSCRIBED_EVENT' | 'USER_BLOCKED_EVENT'
/** The possible target states when updating a pull request.
 *
 * - `CLOSED` A pull request that has been closed without being merged.
 * - `OPEN` A pull request that is still open. */
export type PullRequestUpdateState = 'CLOSED' | 'OPEN'
/** Emojis that can be attached to Issues, Pull Requests and Comments.
 *
 * - `CONFUSED` Represents the `:confused:` emoji.
 * - `EYES` Represents the `:eyes:` emoji.
 * - `HEART` Represents the `:heart:` emoji.
 * - `HOORAY` Represents the `:hooray:` emoji.
 * - `LAUGH` Represents the `:laugh:` emoji.
 * - `ROCKET` Represents the `:rocket:` emoji.
 * - `THUMBS_DOWN` Represents the `:-1:` emoji.
 * - `THUMBS_UP` Represents the `:+1:` emoji. */
export type ReactionContent = 'CONFUSED' | 'EYES' | 'HEART' | 'HOORAY' | 'LAUGH' | 'ROCKET' | 'THUMBS_DOWN' | 'THUMBS_UP'
/** A list of fields that reactions can be ordered by.
 *
 * - `CREATED_AT` Allows ordering a list of reactions by when they were created. */
export type ReactionOrderField = 'CREATED_AT'
/** Properties by which ref connections can be ordered.
 *
 * - `ALPHABETICAL` Order refs by their alphanumeric name
 * - `TAG_COMMIT_DATE` Order refs by underlying commit date if the ref prefix is refs/tags/ */
export type RefOrderField = 'ALPHABETICAL' | 'TAG_COMMIT_DATE'
/** Properties by which release connections can be ordered.
 *
 * - `CREATED_AT` Order releases by creation time
 * - `NAME` Order releases alphabetically by name */
export type ReleaseOrderField = 'CREATED_AT' | 'NAME'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoAccessAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoAddMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoArchivedAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The merge options available for pull requests to this repository.
 *
 * - `MERGE` The pull request is added to the base branch in a merge commit.
 * - `REBASE` Commits from the pull request are added onto the base branch individually without a merge commit.
 * - `SQUASH` The pull request's commits are squashed into a single commit before they are merged to the base branch. */
export type RepoChangeMergeSettingAuditEntryMergeType = 'MERGE' | 'REBASE' | 'SQUASH'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoCreateAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoDestroyAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The privacy of a repository
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepoRemoveMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The reasons a piece of content can be reported or minimized.
 *
 * - `ABUSE` An abusive or harassing piece of content
 * - `DUPLICATE` A duplicated piece of content
 * - `OFF_TOPIC` An irrelevant piece of content
 * - `OUTDATED` An outdated piece of content
 * - `RESOLVED` The content has been resolved
 * - `SPAM` A spammy piece of content */
export type ReportedContentClassifiers = 'ABUSE' | 'DUPLICATE' | 'OFF_TOPIC' | 'OUTDATED' | 'RESOLVED' | 'SPAM'
/** The affiliation of a user to a repository
 *
 * - `COLLABORATOR` Repositories that the user has been added to as a collaborator.
 * - `ORGANIZATION_MEMBER` Repositories that the user has access to through being a member of an
 * organization. This includes every repository on every team that the user is on.
 * - `OWNER` Repositories that are owned by the authenticated user. */
export type RepositoryAffiliation = 'COLLABORATOR' | 'ORGANIZATION_MEMBER' | 'OWNER'
/** The reason a repository is listed as 'contributed'.
 *
 * - `COMMIT` Created a commit
 * - `ISSUE` Created an issue
 * - `PULL_REQUEST` Created a pull request
 * - `PULL_REQUEST_REVIEW` Reviewed a pull request
 * - `REPOSITORY` Created the repository */
export type RepositoryContributionType = 'COMMIT' | 'ISSUE' | 'PULL_REQUEST' | 'PULL_REQUEST_REVIEW' | 'REPOSITORY'
/** A repository interaction limit.
 *
 * - `COLLABORATORS_ONLY` Users that are not collaborators will not be able to interact with the repository.
 * - `CONTRIBUTORS_ONLY` Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
 * - `EXISTING_USERS` Users that have recently created their account will be unable to interact with the repository.
 * - `NO_LIMIT` No interaction limits are enabled. */
export type RepositoryInteractionLimit = 'COLLABORATORS_ONLY' | 'CONTRIBUTORS_ONLY' | 'EXISTING_USERS' | 'NO_LIMIT'
/** The length for a repository interaction limit to be enabled for.
 *
 * - `ONE_DAY` The interaction limit will expire after 1 day.
 * - `ONE_MONTH` The interaction limit will expire after 1 month.
 * - `ONE_WEEK` The interaction limit will expire after 1 week.
 * - `SIX_MONTHS` The interaction limit will expire after 6 months.
 * - `THREE_DAYS` The interaction limit will expire after 3 days. */
export type RepositoryInteractionLimitExpiry = 'ONE_DAY' | 'ONE_MONTH' | 'ONE_WEEK' | 'SIX_MONTHS' | 'THREE_DAYS'
/** Indicates where an interaction limit is configured.
 *
 * - `ORGANIZATION` A limit that is configured at the organization level.
 * - `REPOSITORY` A limit that is configured at the repository level.
 * - `USER` A limit that is configured at the user-wide level. */
export type RepositoryInteractionLimitOrigin = 'ORGANIZATION' | 'REPOSITORY' | 'USER'
/** Properties by which repository invitation connections can be ordered.
 *
 * - `CREATED_AT` Order repository invitations by creation time */
export type RepositoryInvitationOrderField = 'CREATED_AT'
/** The possible reasons a given repository could be in a locked state.
 *
 * - `BILLING` The repository is locked due to a billing related reason.
 * - `MIGRATING` The repository is locked due to a migration.
 * - `MOVING` The repository is locked due to a move.
 * - `RENAME` The repository is locked due to a rename.
 * - `TRADE_RESTRICTION` The repository is locked due to a trade controls related reason.
 * - `TRANSFERRING_OWNERSHIP` The repository is locked due to an ownership transfer. */
export type RepositoryLockReason = 'BILLING' | 'MIGRATING' | 'MOVING' | 'RENAME' | 'TRADE_RESTRICTION' | 'TRANSFERRING_OWNERSHIP'
/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
 *
 * - `ASC` Specifies an ascending order for a given `orderBy` argument.
 * - `DESC` Specifies a descending order for a given `orderBy` argument. */
export type RepositoryMigrationOrderDirection = 'ASC' | 'DESC'
/** Properties by which repository migrations can be ordered.
 *
 * - `CREATED_AT` Order mannequins why when they were created. */
export type RepositoryMigrationOrderField = 'CREATED_AT'
/** Properties by which repository connections can be ordered.
 *
 * - `CREATED_AT` Order repositories by creation time
 * - `NAME` Order repositories by name
 * - `PUSHED_AT` Order repositories by push time
 * - `STARGAZERS` Order repositories by number of stargazers
 * - `UPDATED_AT` Order repositories by update time */
export type RepositoryOrderField = 'CREATED_AT' | 'NAME' | 'PUSHED_AT' | 'STARGAZERS' | 'UPDATED_AT'
/** The access level to a repository
 *
 * - `ADMIN` Can read, clone, and push to this repository. Can also manage issues, pull
 * requests, and repository settings, including adding collaborators
 * - `MAINTAIN` Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
 * - `READ` Can read and clone this repository. Can also open and comment on issues and pull requests
 * - `TRIAGE` Can read and clone this repository. Can also manage issues and pull requests
 * - `WRITE` Can read, clone, and push to this repository. Can also manage issues and pull requests */
export type RepositoryPermission = 'ADMIN' | 'MAINTAIN' | 'READ' | 'TRIAGE' | 'WRITE'
/** The privacy of a repository
 *
 * - `PRIVATE` Private
 * - `PUBLIC` Public */
export type RepositoryPrivacy = 'PRIVATE' | 'PUBLIC'
/** Properties by which repository rule connections can be ordered.
 *
 * - `CREATED_AT` Order repository rules by created time
 * - `TYPE` Order repository rules by type
 * - `UPDATED_AT` Order repository rules by updated time */
export type RepositoryRuleOrderField = 'CREATED_AT' | 'TYPE' | 'UPDATED_AT'
/** The bypass mode for a specific actor on a ruleset.
 *
 * - `ALWAYS` The actor can always bypass rules
 * - `PULL_REQUEST` The actor can only bypass rules via a pull request */
export type RepositoryRulesetBypassActorBypassMode = 'ALWAYS' | 'PULL_REQUEST'
/** The targets supported for rulesets.
 *
 * - `BRANCH` Branch
 * - `PUSH` Push
 * - `REPOSITORY` repository
 * - `TAG` Tag */
export type RepositoryRulesetTarget = 'BRANCH' | 'PUSH' | 'REPOSITORY' | 'TAG'
/** The rule types supported in rulesets
 *
 * - `AUTHORIZATION` Authorization
 * - `BRANCH_NAME_PATTERN` Branch name pattern
 * - `CODE_SCANNING` Choose which tools must provide code scanning results before the reference is
 * updated. When configured, code scanning must be enabled and have results for
 * both the commit and the reference being updated.
 * - `COMMITTER_EMAIL_PATTERN` Committer email pattern
 * - `COMMIT_AUTHOR_EMAIL_PATTERN` Commit author email pattern
 * - `COMMIT_MESSAGE_PATTERN` Commit message pattern
 * - `CREATION` Only allow users with bypass permission to create matching refs.
 * - `DELETION` Only allow users with bypass permissions to delete matching refs.
 * - `FILE_EXTENSION_RESTRICTION` Prevent commits that include files with specified file extensions from being pushed to the commit graph.
 * - `FILE_PATH_RESTRICTION` Prevent commits that include changes in specified file paths from being pushed to the commit graph.
 * - `LOCK_BRANCH` Branch is read-only. Users cannot push to the branch.
 * - `MAX_FILE_PATH_LENGTH` Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.
 * - `MAX_FILE_SIZE` Prevent commits that exceed a specified file size limit from being pushed to the commit.
 * - `MAX_REF_UPDATES` Max ref updates
 * - `MERGE_QUEUE` Merges must be performed via a merge queue.
 * - `MERGE_QUEUE_LOCKED_REF` Merge queue locked ref
 * - `NON_FAST_FORWARD` Prevent users with push access from force pushing to refs.
 * - `PULL_REQUEST` Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 * - `REQUIRED_DEPLOYMENTS` Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 * - `REQUIRED_LINEAR_HISTORY` Prevent merge commits from being pushed to matching refs.
 * - `REQUIRED_REVIEW_THREAD_RESOLUTION` When enabled, all conversations on code must be resolved before a pull request
 * can be merged into a branch that matches this rule.
 * - `REQUIRED_SIGNATURES` Commits pushed to matching refs must have verified signatures.
 * - `REQUIRED_STATUS_CHECKS` Choose which status checks must pass before the ref is updated. When enabled,
 * commits must first be pushed to another ref where the checks pass.
 * - `REQUIRED_WORKFLOW_STATUS_CHECKS` Require all commits be made to a non-target branch and submitted via a pull
 * request and required workflow checks to pass before they can be merged.
 * - `SECRET_SCANNING` Secret scanning
 * - `TAG` Tag
 * - `TAG_NAME_PATTERN` Tag name pattern
 * - `UPDATE` Only allow users with bypass permission to update matching refs.
 * - `WORKFLOWS` Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 * - `WORKFLOW_UPDATES` Workflow files cannot be modified. */
export type RepositoryRuleType = 'AUTHORIZATION' | 'BRANCH_NAME_PATTERN' | 'CODE_SCANNING' | 'COMMITTER_EMAIL_PATTERN' | 'COMMIT_AUTHOR_EMAIL_PATTERN' | 'COMMIT_MESSAGE_PATTERN' | 'CREATION' | 'DELETION' | 'FILE_EXTENSION_RESTRICTION' | 'FILE_PATH_RESTRICTION' | 'LOCK_BRANCH' | 'MAX_FILE_PATH_LENGTH' | 'MAX_FILE_SIZE' | 'MAX_REF_UPDATES' | 'MERGE_QUEUE' | 'MERGE_QUEUE_LOCKED_REF' | 'NON_FAST_FORWARD' | 'PULL_REQUEST' | 'REQUIRED_DEPLOYMENTS' | 'REQUIRED_LINEAR_HISTORY' | 'REQUIRED_REVIEW_THREAD_RESOLUTION' | 'REQUIRED_SIGNATURES' | 'REQUIRED_STATUS_CHECKS' | 'REQUIRED_WORKFLOW_STATUS_CHECKS' | 'SECRET_SCANNING' | 'TAG' | 'TAG_NAME_PATTERN' | 'UPDATE' | 'WORKFLOWS' | 'WORKFLOW_UPDATES'
/** The repository's visibility level.
 *
 * - `INTERNAL` The repository is visible only to users in the same enterprise.
 * - `PRIVATE` The repository is visible only to those with explicit access.
 * - `PUBLIC` The repository is visible to everyone. */
export type RepositoryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'
/** The possible scopes of an alert's dependency.
 *
 * - `DEVELOPMENT` A dependency that is only used in development
 * - `RUNTIME` A dependency that is leveraged during application runtime */
export type RepositoryVulnerabilityAlertDependencyScope = 'DEVELOPMENT' | 'RUNTIME'
/** The possible states of an alert
 *
 * - `AUTO_DISMISSED` An alert that has been automatically closed by Dependabot.
 * - `DISMISSED` An alert that has been manually closed by a user.
 * - `FIXED` An alert that has been resolved by a code change.
 * - `OPEN` An alert that is still open. */
export type RepositoryVulnerabilityAlertState = 'AUTO_DISMISSED' | 'DISMISSED' | 'FIXED' | 'OPEN'
/** The possible states that can be requested when creating a check run.
 *
 * - `COMPLETED` The check suite or run has been completed.
 * - `IN_PROGRESS` The check suite or run is in progress.
 * - `PENDING` The check suite or run is in pending state.
 * - `QUEUED` The check suite or run has been queued.
 * - `WAITING` The check suite or run is in waiting state. */
export type RequestableCheckStatusState = 'COMPLETED' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED' | 'WAITING'
/** Possible roles a user may have in relation to an organization.
 *
 * - `DIRECT_MEMBER` A user who is a direct member of the organization.
 * - `OWNER` A user with full administrative access to the organization.
 * - `UNAFFILIATED` A user who is unaffiliated with the organization. */
export type RoleInOrganization = 'DIRECT_MEMBER' | 'OWNER' | 'UNAFFILIATED'
/** The level of enforcement for a rule or ruleset.
 *
 * - `ACTIVE` Rules will be enforced
 * - `DISABLED` Do not evaluate or enforce rules
 * - `EVALUATE` Allow admins to test rules before enforcing them. Admins can view insights on
 * the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
export type RuleEnforcement = 'ACTIVE' | 'DISABLED' | 'EVALUATE'
/** The possible digest algorithms used to sign SAML requests for an identity provider.
 *
 * - `SHA1` SHA1
 * - `SHA256` SHA256
 * - `SHA384` SHA384
 * - `SHA512` SHA512 */
export type SamlDigestAlgorithm = 'SHA1' | 'SHA256' | 'SHA384' | 'SHA512'
/** The possible signature algorithms used to sign SAML requests for a Identity Provider.
 *
 * - `RSA_SHA1` RSA-SHA1
 * - `RSA_SHA256` RSA-SHA256
 * - `RSA_SHA384` RSA-SHA384
 * - `RSA_SHA512` RSA-SHA512 */
export type SamlSignatureAlgorithm = 'RSA_SHA1' | 'RSA_SHA256' | 'RSA_SHA384' | 'RSA_SHA512'
/** Properties by which saved reply connections can be ordered.
 *
 * - `UPDATED_AT` Order saved reply by when they were updated. */
export type SavedReplyOrderField = 'UPDATED_AT'
/** Represents the individual results of a search.
 *
 * - `DISCUSSION` Returns matching discussions in repositories.
 * - `ISSUE` Returns results matching issues in repositories.
 * - `REPOSITORY` Returns results matching repositories.
 * - `USER` Returns results matching users and organizations on GitHub. */
export type SearchType = 'DISCUSSION' | 'ISSUE' | 'REPOSITORY' | 'USER'
/** Classification of the advisory.
 *
 * - `GENERAL` Classification of general advisories.
 * - `MALWARE` Classification of malware advisories. */
export type SecurityAdvisoryClassification = 'GENERAL' | 'MALWARE'
/** The possible ecosystems of a security vulnerability's package.
 *
 * - `ACTIONS` GitHub Actions
 * - `COMPOSER` PHP packages hosted at packagist.org
 * - `ERLANG` Erlang/Elixir packages hosted at hex.pm
 * - `GO` Go modules
 * - `MAVEN` Java artifacts hosted at the Maven central repository
 * - `NPM` JavaScript packages hosted at npmjs.com
 * - `NUGET` .NET packages hosted at the NuGet Gallery
 * - `PIP` Python packages hosted at PyPI.org
 * - `PUB` Dart packages hosted at pub.dev
 * - `RUBYGEMS` Ruby gems hosted at RubyGems.org
 * - `RUST` Rust crates
 * - `SWIFT` Swift packages */
export type SecurityAdvisoryEcosystem = 'ACTIONS' | 'COMPOSER' | 'ERLANG' | 'GO' | 'MAVEN' | 'NPM' | 'NUGET' | 'PIP' | 'PUB' | 'RUBYGEMS' | 'RUST' | 'SWIFT'
/** Identifier formats available for advisories.
 *
 * - `CVE` Common Vulnerabilities and Exposures Identifier.
 * - `GHSA` GitHub Security Advisory ID. */
export type SecurityAdvisoryIdentifierType = 'CVE' | 'GHSA'
/** Properties by which security advisory connections can be ordered.
 *
 * - `EPSS_PERCENTAGE` Order advisories by EPSS percentage
 * - `EPSS_PERCENTILE` Order advisories by EPSS percentile
 * - `PUBLISHED_AT` Order advisories by publication time
 * - `UPDATED_AT` Order advisories by update time */
export type SecurityAdvisoryOrderField = 'EPSS_PERCENTAGE' | 'EPSS_PERCENTILE' | 'PUBLISHED_AT' | 'UPDATED_AT'
/** Severity of the vulnerability.
 *
 * - `CRITICAL` Critical.
 * - `HIGH` High.
 * - `LOW` Low.
 * - `MODERATE` Moderate. */
export type SecurityAdvisorySeverity = 'CRITICAL' | 'HIGH' | 'LOW' | 'MODERATE'
/** Properties by which security vulnerability connections can be ordered.
 *
 * - `UPDATED_AT` Order vulnerability by update time */
export type SecurityVulnerabilityOrderField = 'UPDATED_AT'
/** Software or company that hosts social media accounts.
 *
 * - `BLUESKY` Decentralized microblogging social platform.
 * - `FACEBOOK` Social media and networking website.
 * - `GENERIC` Catch-all for social media providers that do not yet have specific handling.
 * - `HOMETOWN` Fork of Mastodon with a greater focus on local posting.
 * - `INSTAGRAM` Social media website with a focus on photo and video sharing.
 * - `LINKEDIN` Professional networking website.
 * - `MASTODON` Open-source federated microblogging service.
 * - `NPM` JavaScript package registry.
 * - `REDDIT` Social news aggregation and discussion website.
 * - `TWITCH` Live-streaming service.
 * - `TWITTER` Microblogging website.
 * - `YOUTUBE` Online video platform. */
export type SocialAccountProvider = 'BLUESKY' | 'FACEBOOK' | 'GENERIC' | 'HOMETOWN' | 'INSTAGRAM' | 'LINKEDIN' | 'MASTODON' | 'NPM' | 'REDDIT' | 'TWITCH' | 'TWITTER' | 'YOUTUBE'
/** Properties by which sponsorable connections can be ordered.
 *
 * - `LOGIN` Order sponsorable entities by login (username). */
export type SponsorableOrderField = 'LOGIN'
/** Properties by which sponsor and lifetime value connections can be ordered.
 *
 * - `LIFETIME_VALUE` Order results by how much money the sponsor has paid in total.
 * - `SPONSOR_LOGIN` Order results by the sponsor's login (username).
 * - `SPONSOR_RELEVANCE` Order results by the sponsor's relevance to the viewer. */
export type SponsorAndLifetimeValueOrderField = 'LIFETIME_VALUE' | 'SPONSOR_LOGIN' | 'SPONSOR_RELEVANCE'
/** Properties by which sponsor connections can be ordered.
 *
 * - `LOGIN` Order sponsorable entities by login (username).
 * - `RELEVANCE` Order sponsors by their relevance to the viewer. */
export type SponsorOrderField = 'LOGIN' | 'RELEVANCE'
/** The possible actions that GitHub Sponsors activities can represent.
 *
 * - `CANCELLED_SPONSORSHIP` The activity was cancelling a sponsorship.
 * - `NEW_SPONSORSHIP` The activity was starting a sponsorship.
 * - `PENDING_CHANGE` The activity was scheduling a downgrade or cancellation.
 * - `REFUND` The activity was funds being refunded to the sponsor or GitHub.
 * - `SPONSOR_MATCH_DISABLED` The activity was disabling matching for a previously matched sponsorship.
 * - `TIER_CHANGE` The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
export type SponsorsActivityAction = 'CANCELLED_SPONSORSHIP' | 'NEW_SPONSORSHIP' | 'PENDING_CHANGE' | 'REFUND' | 'SPONSOR_MATCH_DISABLED' | 'TIER_CHANGE'
/** Properties by which GitHub Sponsors activity connections can be ordered.
 *
 * - `TIMESTAMP` Order activities by when they happened. */
export type SponsorsActivityOrderField = 'TIMESTAMP'
/** The possible time periods for which Sponsors activities can be requested.
 *
 * - `ALL` Don't restrict the activity to any date range, include all activity.
 * - `DAY` The previous calendar day.
 * - `MONTH` The previous thirty days.
 * - `WEEK` The previous seven days. */
export type SponsorsActivityPeriod = 'ALL' | 'DAY' | 'MONTH' | 'WEEK'
/** Represents countries or regions for billing and residence for a GitHub Sponsors profile.
 *
 * - `AD` Andorra
 * - `AE` United Arab Emirates
 * - `AF` Afghanistan
 * - `AG` Antigua and Barbuda
 * - `AI` Anguilla
 * - `AL` Albania
 * - `AM` Armenia
 * - `AO` Angola
 * - `AQ` Antarctica
 * - `AR` Argentina
 * - `AS` American Samoa
 * - `AT` Austria
 * - `AU` Australia
 * - `AW` Aruba
 * - `AX` Åland
 * - `AZ` Azerbaijan
 * - `BA` Bosnia and Herzegovina
 * - `BB` Barbados
 * - `BD` Bangladesh
 * - `BE` Belgium
 * - `BF` Burkina Faso
 * - `BG` Bulgaria
 * - `BH` Bahrain
 * - `BI` Burundi
 * - `BJ` Benin
 * - `BL` Saint Barthélemy
 * - `BM` Bermuda
 * - `BN` Brunei Darussalam
 * - `BO` Bolivia
 * - `BQ` Bonaire, Sint Eustatius and Saba
 * - `BR` Brazil
 * - `BS` Bahamas
 * - `BT` Bhutan
 * - `BV` Bouvet Island
 * - `BW` Botswana
 * - `BY` Belarus
 * - `BZ` Belize
 * - `CA` Canada
 * - `CC` Cocos (Keeling) Islands
 * - `CD` Congo (Kinshasa)
 * - `CF` Central African Republic
 * - `CG` Congo (Brazzaville)
 * - `CH` Switzerland
 * - `CI` Côte d'Ivoire
 * - `CK` Cook Islands
 * - `CL` Chile
 * - `CM` Cameroon
 * - `CN` China
 * - `CO` Colombia
 * - `CR` Costa Rica
 * - `CV` Cape Verde
 * - `CW` Curaçao
 * - `CX` Christmas Island
 * - `CY` Cyprus
 * - `CZ` Czech Republic
 * - `DE` Germany
 * - `DJ` Djibouti
 * - `DK` Denmark
 * - `DM` Dominica
 * - `DO` Dominican Republic
 * - `DZ` Algeria
 * - `EC` Ecuador
 * - `EE` Estonia
 * - `EG` Egypt
 * - `EH` Western Sahara
 * - `ER` Eritrea
 * - `ES` Spain
 * - `ET` Ethiopia
 * - `FI` Finland
 * - `FJ` Fiji
 * - `FK` Falkland Islands
 * - `FM` Micronesia
 * - `FO` Faroe Islands
 * - `FR` France
 * - `GA` Gabon
 * - `GB` United Kingdom
 * - `GD` Grenada
 * - `GE` Georgia
 * - `GF` French Guiana
 * - `GG` Guernsey
 * - `GH` Ghana
 * - `GI` Gibraltar
 * - `GL` Greenland
 * - `GM` Gambia
 * - `GN` Guinea
 * - `GP` Guadeloupe
 * - `GQ` Equatorial Guinea
 * - `GR` Greece
 * - `GS` South Georgia and South Sandwich Islands
 * - `GT` Guatemala
 * - `GU` Guam
 * - `GW` Guinea-Bissau
 * - `GY` Guyana
 * - `HK` Hong Kong
 * - `HM` Heard and McDonald Islands
 * - `HN` Honduras
 * - `HR` Croatia
 * - `HT` Haiti
 * - `HU` Hungary
 * - `ID` Indonesia
 * - `IE` Ireland
 * - `IL` Israel
 * - `IM` Isle of Man
 * - `IN` India
 * - `IO` British Indian Ocean Territory
 * - `IQ` Iraq
 * - `IR` Iran
 * - `IS` Iceland
 * - `IT` Italy
 * - `JE` Jersey
 * - `JM` Jamaica
 * - `JO` Jordan
 * - `JP` Japan
 * - `KE` Kenya
 * - `KG` Kyrgyzstan
 * - `KH` Cambodia
 * - `KI` Kiribati
 * - `KM` Comoros
 * - `KN` Saint Kitts and Nevis
 * - `KR` Korea, South
 * - `KW` Kuwait
 * - `KY` Cayman Islands
 * - `KZ` Kazakhstan
 * - `LA` Laos
 * - `LB` Lebanon
 * - `LC` Saint Lucia
 * - `LI` Liechtenstein
 * - `LK` Sri Lanka
 * - `LR` Liberia
 * - `LS` Lesotho
 * - `LT` Lithuania
 * - `LU` Luxembourg
 * - `LV` Latvia
 * - `LY` Libya
 * - `MA` Morocco
 * - `MC` Monaco
 * - `MD` Moldova
 * - `ME` Montenegro
 * - `MF` Saint Martin (French part)
 * - `MG` Madagascar
 * - `MH` Marshall Islands
 * - `MK` Macedonia
 * - `ML` Mali
 * - `MM` Myanmar
 * - `MN` Mongolia
 * - `MO` Macau
 * - `MP` Northern Mariana Islands
 * - `MQ` Martinique
 * - `MR` Mauritania
 * - `MS` Montserrat
 * - `MT` Malta
 * - `MU` Mauritius
 * - `MV` Maldives
 * - `MW` Malawi
 * - `MX` Mexico
 * - `MY` Malaysia
 * - `MZ` Mozambique
 * - `NA` Namibia
 * - `NC` New Caledonia
 * - `NE` Niger
 * - `NF` Norfolk Island
 * - `NG` Nigeria
 * - `NI` Nicaragua
 * - `NL` Netherlands
 * - `NO` Norway
 * - `NP` Nepal
 * - `NR` Nauru
 * - `NU` Niue
 * - `NZ` New Zealand
 * - `OM` Oman
 * - `PA` Panama
 * - `PE` Peru
 * - `PF` French Polynesia
 * - `PG` Papua New Guinea
 * - `PH` Philippines
 * - `PK` Pakistan
 * - `PL` Poland
 * - `PM` Saint Pierre and Miquelon
 * - `PN` Pitcairn
 * - `PR` Puerto Rico
 * - `PS` Palestine
 * - `PT` Portugal
 * - `PW` Palau
 * - `PY` Paraguay
 * - `QA` Qatar
 * - `RE` Reunion
 * - `RO` Romania
 * - `RS` Serbia
 * - `RU` Russian Federation
 * - `RW` Rwanda
 * - `SA` Saudi Arabia
 * - `SB` Solomon Islands
 * - `SC` Seychelles
 * - `SD` Sudan
 * - `SE` Sweden
 * - `SG` Singapore
 * - `SH` Saint Helena
 * - `SI` Slovenia
 * - `SJ` Svalbard and Jan Mayen Islands
 * - `SK` Slovakia
 * - `SL` Sierra Leone
 * - `SM` San Marino
 * - `SN` Senegal
 * - `SO` Somalia
 * - `SR` Suriname
 * - `SS` South Sudan
 * - `ST` Sao Tome and Principe
 * - `SV` El Salvador
 * - `SX` Sint Maarten (Dutch part)
 * - `SZ` Swaziland
 * - `TC` Turks and Caicos Islands
 * - `TD` Chad
 * - `TF` French Southern Lands
 * - `TG` Togo
 * - `TH` Thailand
 * - `TJ` Tajikistan
 * - `TK` Tokelau
 * - `TL` Timor-Leste
 * - `TM` Turkmenistan
 * - `TN` Tunisia
 * - `TO` Tonga
 * - `TR` Türkiye
 * - `TT` Trinidad and Tobago
 * - `TV` Tuvalu
 * - `TW` Taiwan
 * - `TZ` Tanzania
 * - `UA` Ukraine
 * - `UG` Uganda
 * - `UM` United States Minor Outlying Islands
 * - `US` United States of America
 * - `UY` Uruguay
 * - `UZ` Uzbekistan
 * - `VA` Vatican City
 * - `VC` Saint Vincent and the Grenadines
 * - `VE` Venezuela
 * - `VG` Virgin Islands, British
 * - `VI` Virgin Islands, U.S.
 * - `VN` Vietnam
 * - `VU` Vanuatu
 * - `WF` Wallis and Futuna Islands
 * - `WS` Samoa
 * - `YE` Yemen
 * - `YT` Mayotte
 * - `ZA` South Africa
 * - `ZM` Zambia
 * - `ZW` Zimbabwe */
export type SponsorsCountryOrRegionCode = 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AS' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FM' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MH' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MP' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PW' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SZ' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VI' | 'VN' | 'VU' | 'WF' | 'WS' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW'
/** The different kinds of goals a GitHub Sponsors member can have.
 *
 * - `MONTHLY_SPONSORSHIP_AMOUNT` The goal is about getting a certain amount in USD from sponsorships each month.
 * - `TOTAL_SPONSORS_COUNT` The goal is about reaching a certain number of sponsors. */
export type SponsorsGoalKind = 'MONTHLY_SPONSORSHIP_AMOUNT' | 'TOTAL_SPONSORS_COUNT'
/** Properties by which sponsorship update connections can be ordered.
 *
 * - `CREATED_AT` Order sponsorship newsletters by when they were created. */
export type SponsorshipNewsletterOrderField = 'CREATED_AT'
/** Properties by which sponsorship connections can be ordered.
 *
 * - `CREATED_AT` Order sponsorship by creation time. */
export type SponsorshipOrderField = 'CREATED_AT'
/** How payment was made for funding a GitHub Sponsors sponsorship.
 *
 * - `GITHUB` Payment was made through GitHub.
 * - `PATREON` Payment was made through Patreon. */
export type SponsorshipPaymentSource = 'GITHUB' | 'PATREON'
/** The privacy of a sponsorship
 *
 * - `PRIVATE` Private
 * - `PUBLIC` Public */
export type SponsorshipPrivacy = 'PRIVATE' | 'PUBLIC'
/** The different kinds of records that can be featured on a GitHub Sponsors profile page.
 *
 * - `REPOSITORY` A repository owned by the user or organization with the GitHub Sponsors profile.
 * - `USER` A user who belongs to the organization with the GitHub Sponsors profile. */
export type SponsorsListingFeaturedItemFeatureableType = 'REPOSITORY' | 'USER'
/** Properties by which Sponsors tiers connections can be ordered.
 *
 * - `CREATED_AT` Order tiers by creation time.
 * - `MONTHLY_PRICE_IN_CENTS` Order tiers by their monthly price in cents */
export type SponsorsTierOrderField = 'CREATED_AT' | 'MONTHLY_PRICE_IN_CENTS'
/** The possible default commit messages for squash merges.
 *
 * - `BLANK` Default to a blank commit message.
 * - `COMMIT_MESSAGES` Default to the branch's commit messages.
 * - `PR_BODY` Default to the pull request's body. */
export type SquashMergeCommitMessage = 'BLANK' | 'COMMIT_MESSAGES' | 'PR_BODY'
/** The possible default commit titles for squash merges.
 *
 * - `COMMIT_OR_PR_TITLE` Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * - `PR_TITLE` Default to the pull request's title. */
export type SquashMergeCommitTitle = 'COMMIT_OR_PR_TITLE' | 'PR_TITLE'
/** Properties by which star connections can be ordered.
 *
 * - `STARRED_AT` Allows ordering a list of stars by when they were created. */
export type StarOrderField = 'STARRED_AT'
/** The possible commit status states.
 *
 * - `ERROR` Status is errored.
 * - `EXPECTED` Status is expected.
 * - `FAILURE` Status is failing.
 * - `PENDING` Status is pending.
 * - `SUCCESS` Status is successful. */
export type StatusState = 'ERROR' | 'EXPECTED' | 'FAILURE' | 'PENDING' | 'SUCCESS'
/** The possible states of a subscription.
 *
 * - `IGNORED` The User is never notified.
 * - `SUBSCRIBED` The User is notified of all conversations.
 * - `UNSUBSCRIBED` The User is only notified when participating or @mentioned. */
export type SubscriptionState = 'IGNORED' | 'SUBSCRIBED' | 'UNSUBSCRIBED'
/** Properties by which team discussion comment connections can be ordered.
 *
 * - `NUMBER` Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
export type TeamDiscussionCommentOrderField = 'NUMBER'
/** Properties by which team discussion connections can be ordered.
 *
 * - `CREATED_AT` Allows chronological ordering of team discussions. */
export type TeamDiscussionOrderField = 'CREATED_AT'
/** Properties by which team member connections can be ordered.
 *
 * - `CREATED_AT` Order team members by creation time
 * - `LOGIN` Order team members by login */
export type TeamMemberOrderField = 'CREATED_AT' | 'LOGIN'
/** The possible team member roles; either 'maintainer' or 'member'.
 *
 * - `MAINTAINER` A team maintainer has permission to add and remove team members.
 * - `MEMBER` A team member has no administrative permissions on the team. */
export type TeamMemberRole = 'MAINTAINER' | 'MEMBER'
/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 *
 * - `ALL` Includes immediate and child team members for the team.
 * - `CHILD_TEAM` Includes only child team members for the team.
 * - `IMMEDIATE` Includes only immediate members of the team. */
export type TeamMembershipType = 'ALL' | 'CHILD_TEAM' | 'IMMEDIATE'
/** The possible team notification values.
 *
 * - `NOTIFICATIONS_DISABLED` No one will receive notifications.
 * - `NOTIFICATIONS_ENABLED` Everyone will receive notifications when the team is @mentioned. */
export type TeamNotificationSetting = 'NOTIFICATIONS_DISABLED' | 'NOTIFICATIONS_ENABLED'
/** Properties by which team connections can be ordered.
 *
 * - `NAME` Allows ordering a list of teams by name. */
export type TeamOrderField = 'NAME'
/** The possible team privacy values.
 *
 * - `SECRET` A secret team can only be seen by its members.
 * - `VISIBLE` A visible team can be seen and @mentioned by every member of the organization. */
export type TeamPrivacy = 'SECRET' | 'VISIBLE'
/** Properties by which team repository connections can be ordered.
 *
 * - `CREATED_AT` Order repositories by creation time
 * - `NAME` Order repositories by name
 * - `PERMISSION` Order repositories by permission
 * - `PUSHED_AT` Order repositories by push time
 * - `STARGAZERS` Order repositories by number of stargazers
 * - `UPDATED_AT` Order repositories by update time */
export type TeamRepositoryOrderField = 'CREATED_AT' | 'NAME' | 'PERMISSION' | 'PUSHED_AT' | 'STARGAZERS' | 'UPDATED_AT'
/** The possible team review assignment algorithms
 *
 * - `LOAD_BALANCE` Balance review load across the entire team
 * - `ROUND_ROBIN` Alternate reviews between each team member */
export type TeamReviewAssignmentAlgorithm = 'LOAD_BALANCE' | 'ROUND_ROBIN'
/** The role of a user on a team.
 *
 * - `ADMIN` User has admin rights on the team.
 * - `MEMBER` User is a member of the team. */
export type TeamRole = 'ADMIN' | 'MEMBER'
/** The possible states of a thread subscription form action
 *
 * - `NONE` The User cannot subscribe or unsubscribe to the thread
 * - `SUBSCRIBE` The User can subscribe to the thread
 * - `UNSUBSCRIBE` The User can unsubscribe to the thread */
export type ThreadSubscriptionFormAction = 'NONE' | 'SUBSCRIBE' | 'UNSUBSCRIBE'
/** The possible states of a subscription.
 *
 * - `DISABLED` The subscription status is currently disabled.
 * - `IGNORING_LIST` The User is never notified because they are ignoring the list
 * - `IGNORING_THREAD` The User is never notified because they are ignoring the thread
 * - `NONE` The User is not recieving notifications from this thread
 * - `SUBSCRIBED_TO_LIST` The User is notified becuase they are watching the list
 * - `SUBSCRIBED_TO_THREAD` The User is notified because they are subscribed to the thread
 * - `SUBSCRIBED_TO_THREAD_EVENTS` The User is notified because they chose custom settings for this thread.
 * - `SUBSCRIBED_TO_THREAD_TYPE` The User is notified because they chose custom settings for this thread.
 * - `UNAVAILABLE` The subscription status is currently unavailable. */
export type ThreadSubscriptionState = 'DISABLED' | 'IGNORING_LIST' | 'IGNORING_THREAD' | 'NONE' | 'SUBSCRIBED_TO_LIST' | 'SUBSCRIBED_TO_THREAD' | 'SUBSCRIBED_TO_THREAD_EVENTS' | 'SUBSCRIBED_TO_THREAD_TYPE' | 'UNAVAILABLE'
/** Reason that the suggested topic is declined.
 *
 * - ~~`NOT_RELEVANT`~~ (deprecated) The suggested topic is not relevant to the repository.
 * - ~~`PERSONAL_PREFERENCE`~~ (deprecated) The viewer does not like the suggested topic.
 * - ~~`TOO_GENERAL`~~ (deprecated) The suggested topic is too general for the repository.
 * - ~~`TOO_SPECIFIC`~~ (deprecated) The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
export type TopicSuggestionDeclineReason = 'NOT_RELEVANT' | 'PERSONAL_PREFERENCE' | 'TOO_GENERAL' | 'TOO_SPECIFIC'
/** The possible states of a tracked issue.
 *
 * - `CLOSED` The tracked issue is closed
 * - `OPEN` The tracked issue is open */
export type TrackedIssueStates = 'CLOSED' | 'OPEN'
/** Filters by whether or not 2FA is enabled and if the method configured is considered secure or insecure.
 *
 * - `DISABLED` No method of two-factor authentication.
 * - `INSECURE` Has an insecure method of two-factor authentication. GitHub currently defines this as SMS two-factor authentication.
 * - `SECURE` Has only secure methods of two-factor authentication. */
export type TwoFactorCredentialSecurityType = 'DISABLED' | 'INSECURE' | 'SECURE'
/** The possible durations that a user can be blocked for.
 *
 * - `ONE_DAY` The user was blocked for 1 day
 * - `ONE_MONTH` The user was blocked for 30 days
 * - `ONE_WEEK` The user was blocked for 7 days
 * - `PERMANENT` The user was blocked permanently
 * - `THREE_DAYS` The user was blocked for 3 days */
export type UserBlockDuration = 'ONE_DAY' | 'ONE_MONTH' | 'ONE_WEEK' | 'PERMANENT' | 'THREE_DAYS'
/** Properties by which user status connections can be ordered.
 *
 * - `UPDATED_AT` Order user statuses by when they were updated. */
export type UserStatusOrderField = 'UPDATED_AT'
/** Whether a user being viewed contains public or private information.
 *
 * - `PRIVATE` A user containing information only visible to the authenticated user.
 * - `PUBLIC` A user that is publicly visible. */
export type UserViewType = 'PRIVATE' | 'PUBLIC'
/** Properties by which verifiable domain connections can be ordered.
 *
 * - `CREATED_AT` Order verifiable domains by their creation date.
 * - `DOMAIN` Order verifiable domains by the domain name. */
export type VerifiableDomainOrderField = 'CREATED_AT' | 'DOMAIN'
/** Properties by which workflow run connections can be ordered.
 *
 * - `CREATED_AT` Order workflow runs by most recently created */
export type WorkflowRunOrderField = 'CREATED_AT'
/** The possible states for a workflow.
 *
 * - `ACTIVE` The workflow is active.
 * - `DELETED` The workflow was deleted from the git repository.
 * - `DISABLED_FORK` The workflow was disabled by default on a fork.
 * - `DISABLED_INACTIVITY` The workflow was disabled for inactivity in the repository.
 * - `DISABLED_MANUALLY` The workflow was disabled manually. */
export type WorkflowState = 'ACTIVE' | 'DELETED' | 'DISABLED_FORK' | 'DISABLED_INACTIVITY' | 'DISABLED_MANUALLY'
/** Types that can be assigned to issues. */
export type Assignee = Bot | Mannequin | Organization | User
/** Types that can initiate an audit log event. */
export type AuditEntryActor = Bot | Organization | User
/** Types which can be actors for `BranchActorAllowance` objects. */
export type BranchActorAllowanceActor = App | Team | User
/** Types that can represent a repository ruleset bypass actor. */
export type BypassActor = App | Team
/** An object which can have its data claimed or claim data from another. */
export type Claimable = Mannequin | User
/** The object which triggered a `ClosedEvent`. */
export type Closer = Commit | ProjectV2 | PullRequest
/** Represents either a issue the viewer can access or a restricted contribution. */
export type CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution
/** Represents either a pull request the viewer can access or a restricted contribution. */
export type CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution
/** Represents either a repository the viewer can access or a restricted contribution. */
export type CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution
/** Users and teams. */
export type DeploymentReviewer = Team | User
/** An object that is a member of an enterprise. */
export type EnterpriseMember = EnterpriseUserAccount | User
/** Types that can own an IP allow list. */
export type IpAllowListOwner = App | Enterprise | Organization
/** Used for return value of Repository.issueOrPullRequest. */
export type IssueOrPullRequest = Issue | PullRequest
/** An item in an issue timeline */
export type IssueTimelineItem = AssignedEvent | ClosedEvent | Commit | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MilestonedEvent | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent
/** An item in an issue timeline */
export type IssueTimelineItems = AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DisconnectedEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | ParentIssueAddedEvent | ParentIssueRemovedEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubIssueAddedEvent | SubIssueRemovedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent
/** Types that can be inside a Milestone. */
export type MilestoneItem = Issue | PullRequest
/** An audit entry in an organization audit log. */
export type OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry | MembersCanDeleteReposDisableAuditEntry | MembersCanDeleteReposEnableAuditEntry | OauthApplicationCreateAuditEntry | OrgAddBillingManagerAuditEntry | OrgAddMemberAuditEntry | OrgBlockUserAuditEntry | OrgConfigDisableCollaboratorsOnlyAuditEntry | OrgConfigEnableCollaboratorsOnlyAuditEntry | OrgCreateAuditEntry | OrgDisableOauthAppRestrictionsAuditEntry | OrgDisableSamlAuditEntry | OrgDisableTwoFactorRequirementAuditEntry | OrgEnableOauthAppRestrictionsAuditEntry | OrgEnableSamlAuditEntry | OrgEnableTwoFactorRequirementAuditEntry | OrgInviteMemberAuditEntry | OrgInviteToBusinessAuditEntry | OrgOauthAppAccessApprovedAuditEntry | OrgOauthAppAccessBlockedAuditEntry | OrgOauthAppAccessDeniedAuditEntry | OrgOauthAppAccessRequestedAuditEntry | OrgOauthAppAccessUnblockedAuditEntry | OrgRemoveBillingManagerAuditEntry | OrgRemoveMemberAuditEntry | OrgRemoveOutsideCollaboratorAuditEntry | OrgRestoreMemberAuditEntry | OrgUnblockUserAuditEntry | OrgUpdateDefaultRepositoryPermissionAuditEntry | OrgUpdateMemberAuditEntry | OrgUpdateMemberRepositoryCreationPermissionAuditEntry | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | PrivateRepositoryForkingDisableAuditEntry | PrivateRepositoryForkingEnableAuditEntry | RepoAccessAuditEntry | RepoAddMemberAuditEntry | RepoAddTopicAuditEntry | RepoArchivedAuditEntry | RepoChangeMergeSettingAuditEntry | RepoConfigDisableAnonymousGitAccessAuditEntry | RepoConfigDisableCollaboratorsOnlyAuditEntry | RepoConfigDisableContributorsOnlyAuditEntry | RepoConfigDisableSockpuppetDisallowedAuditEntry | RepoConfigEnableAnonymousGitAccessAuditEntry | RepoConfigEnableCollaboratorsOnlyAuditEntry | RepoConfigEnableContributorsOnlyAuditEntry | RepoConfigEnableSockpuppetDisallowedAuditEntry | RepoConfigLockAnonymousGitAccessAuditEntry | RepoConfigUnlockAnonymousGitAccessAuditEntry | RepoCreateAuditEntry | RepoDestroyAuditEntry | RepoRemoveMemberAuditEntry | RepoRemoveTopicAuditEntry | RepositoryVisibilityChangeDisableAuditEntry | RepositoryVisibilityChangeEnableAuditEntry | TeamAddMemberAuditEntry | TeamAddRepositoryAuditEntry | TeamChangeParentTeamAuditEntry | TeamRemoveMemberAuditEntry | TeamRemoveRepositoryAuditEntry
/** Types of memberships that can be restored for an Organization member. */
export type OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData | OrgRestoreMemberMembershipRepositoryAuditEntryData | OrgRestoreMemberMembershipTeamAuditEntryData
/** Types that can grant permissions on a repository to a user */
export type PermissionGranter = Organization | Repository | Team
/** Types that can be pinned to a profile page. */
export type PinnableItem = Gist | Repository
/** Types that can be inside Project Cards. */
export type ProjectCardItem = Issue | PullRequest
/** Possible collaborators for a project. */
export type ProjectV2Actor = Team | User
/** Configurations for project fields. */
export type ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField
/** Types that can be inside Project Items. */
export type ProjectV2ItemContent = DraftIssue | Issue | PullRequest
/** Project field values */
export type ProjectV2ItemFieldValue = ProjectV2ItemFieldDateValue | ProjectV2ItemFieldIterationValue | ProjectV2ItemFieldLabelValue | ProjectV2ItemFieldMilestoneValue | ProjectV2ItemFieldNumberValue | ProjectV2ItemFieldPullRequestValue | ProjectV2ItemFieldRepositoryValue | ProjectV2ItemFieldReviewerValue | ProjectV2ItemFieldSingleSelectValue | ProjectV2ItemFieldTextValue | ProjectV2ItemFieldUserValue
/** An item in a pull request timeline */
export type PullRequestTimelineItem = AssignedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | Commit | CommitCommentThread | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MergedEvent | MilestonedEvent | PullRequestReview | PullRequestReviewComment | PullRequestReviewThread | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent
/** An item in a pull request timeline */
export type PullRequestTimelineItems = AddedToMergeQueueEvent | AddedToProjectEvent | AssignedEvent | AutoMergeDisabledEvent | AutoMergeEnabledEvent | AutoRebaseEnabledEvent | AutoSquashEnabledEvent | AutomaticBaseChangeFailedEvent | AutomaticBaseChangeSucceededEvent | BaseRefChangedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertToDraftEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | DisconnectedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MergedEvent | MilestonedEvent | MovedColumnsInProjectEvent | ParentIssueAddedEvent | ParentIssueRemovedEvent | PinnedEvent | PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | ReadyForReviewEvent | ReferencedEvent | RemovedFromMergeQueueEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubIssueAddedEvent | SubIssueRemovedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent
/** Types that can be an actor. */
export type PushAllowanceActor = App | Team | User
/** Types that can be assigned to reactions. */
export type Reactor = Bot | Mannequin | Organization | User
/** Any referencable object */
export type ReferencedSubject = Issue | PullRequest
/** An object which has a renamable title */
export type RenamedTitleSubject = Issue | PullRequest
/** Types that can be requested reviewers. */
export type RequestedReviewer = Bot | Mannequin | Team | User
/** Types that can be an actor. */
export type ReviewDismissalAllowanceActor = App | Team | User
/** Types which can be parameters for `RepositoryRule` objects. */
export type RuleParameters = BranchNamePatternParameters | CodeScanningParameters | CommitAuthorEmailPatternParameters | CommitMessagePatternParameters | CommitterEmailPatternParameters | FileExtensionRestrictionParameters | FilePathRestrictionParameters | MaxFilePathLengthParameters | MaxFileSizeParameters | MergeQueueParameters | PullRequestParameters | RequiredDeploymentsParameters | RequiredStatusChecksParameters | TagNamePatternParameters | UpdateParameters | WorkflowsParameters
/** Types which can have `RepositoryRule` objects. */
export type RuleSource = Enterprise | Organization | Repository
/** The results of a search. */
export type SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User
/** Entities that can sponsor others via GitHub Sponsors */
export type Sponsor = Organization | User
/** Entities that can be sponsored via GitHub Sponsors */
export type SponsorableItem = Organization | User
/** A record that can be featured on a GitHub Sponsors profile. */
export type SponsorsListingFeatureableItem = Repository | User
/** Types that can be inside a StatusCheckRollup context. */
export type StatusCheckRollupContext = CheckRun | StatusContext
/** Types that can be added to a user list. */
export type UserListItems = Repository
/** Types that can own a verifiable domain. */
export type VerifiableDomainOwner = Enterprise | Organization
/** Autogenerated return type of AbortQueuedMigrations. */
export interface AbortQueuedMigrationsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Did the operation succeed? */
  success?: boolean | null
}
/** Autogenerated return type of AbortRepositoryMigration. */
export interface AbortRepositoryMigrationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Did the operation succeed? */
  success?: boolean | null
}
/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation. */
export interface AcceptEnterpriseAdministratorInvitationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The invitation that was accepted. */
  invitation?: EnterpriseAdministratorInvitation | null
  /** A message confirming the result of accepting an administrator invitation. */
  message?: string | null
}
/** Autogenerated return type of AcceptEnterpriseMemberInvitation. */
export interface AcceptEnterpriseMemberInvitationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The invitation that was accepted. */
  invitation?: EnterpriseMemberInvitation | null
  /** A message confirming the result of accepting an unaffiliated member invitation. */
  message?: string | null
}
/** Autogenerated return type of AcceptTopicSuggestion. */
export interface AcceptTopicSuggestionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The accepted topic.
   *
   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC. */
  topic?: Topic | null
}
/** Autogenerated return type of AccessUserNamespaceRepository. */
export interface AccessUserNamespaceRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The time that repository access expires at */
  expiresAt?: DateTime | null
  /** The repository that is temporarily accessible. */
  repository?: Repository | null
}
/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface Actor {
  __typename?: string
  /** A URL pointing to the actor's public avatar. */
  avatarUrl: URI
  /** The username of the actor. */
  login: string
  /** The HTTP path for this actor. */
  resourcePath: URI
  /** The HTTP URL for this actor. */
  url: URI
}
/** Location information for an actor */
export interface ActorLocation {
  __typename?: string
  /** City */
  city?: string | null
  /** Country name */
  country?: string | null
  /** Country code */
  countryCode?: string | null
  /** Region name */
  region?: string | null
  /** Region or state code */
  regionCode?: string | null
}
/** Autogenerated return type of AddAssigneesToAssignable. */
export interface AddAssigneesToAssignablePayload {
  __typename?: string
  /** The item that was assigned. */
  assignable?: Assignable | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of AddComment. */
export interface AddCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The edge from the subject's comment connection. */
  commentEdge?: IssueCommentEdge | null
  /** The subject */
  subject?: Node | null
  /** The edge from the subject's timeline connection. */
  timelineEdge?: IssueTimelineItemEdge | null
}
/** Autogenerated return type of AddDiscussionComment. */
export interface AddDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created discussion comment. */
  comment?: DiscussionComment | null
}
/** Autogenerated return type of AddDiscussionPollVote. */
export interface AddDiscussionPollVotePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The poll option that a vote was added to. */
  pollOption?: DiscussionPollOption | null
}
/** Represents an 'added_to_merge_queue' event on a given pull request. */
export interface AddedToMergeQueueEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who added this Pull Request to the merge queue */
  enqueuer?: User | null
  /** The Node ID of the AddedToMergeQueueEvent object */
  id: ID
  /** The merge queue where this pull request was added to. */
  mergeQueue?: MergeQueue | null
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
}
/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the AddedToProjectEvent object */
  id: ID
  /** Project referenced by event. */
  project?: Project | null
  /** Project card referenced by this project event. */
  projectCard?: ProjectCard | null
  /** Column name referenced by this project event. */
  projectColumnName: string
}
/** Autogenerated return type of AddEnterpriseOrganizationMember. */
export interface AddEnterpriseOrganizationMemberPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The users who were added to the organization. */
  users?: User[] | null
}
/** Autogenerated return type of AddEnterpriseSupportEntitlement. */
export interface AddEnterpriseSupportEntitlementPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of adding the support entitlement. */
  message?: string | null
}
/** Autogenerated return type of AddLabelsToLabelable. */
export interface AddLabelsToLabelablePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item that was labeled. */
  labelable?: Labelable | null
}
/** Autogenerated return type of AddProjectCard. */
export interface AddProjectCardPayload {
  __typename?: string
  /** The edge from the ProjectColumn's card connection. */
  cardEdge?: ProjectCardEdge | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ProjectColumn */
  projectColumn?: ProjectColumn | null
}
/** Autogenerated return type of AddProjectColumn. */
export interface AddProjectColumnPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The edge from the project's column connection. */
  columnEdge?: ProjectColumnEdge | null
  /** The project */
  project?: Project | null
}
/** Autogenerated return type of AddProjectV2DraftIssue. */
export interface AddProjectV2DraftIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The draft issue added to the project. */
  projectItem?: ProjectV2Item | null
}
/** Autogenerated return type of AddProjectV2ItemById. */
export interface AddProjectV2ItemByIdPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item added to the project. */
  item?: ProjectV2Item | null
}
/** Autogenerated return type of AddPullRequestReviewComment. */
export interface AddPullRequestReviewCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created comment. */
  comment?: PullRequestReviewComment | null
  /** The edge from the review's comment connection. */
  commentEdge?: PullRequestReviewCommentEdge | null
}
/** Autogenerated return type of AddPullRequestReview. */
export interface AddPullRequestReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created pull request review. */
  pullRequestReview?: PullRequestReview | null
  /** The edge from the pull request's review connection. */
  reviewEdge?: PullRequestReviewEdge | null
}
/** Autogenerated return type of AddPullRequestReviewThread. */
export interface AddPullRequestReviewThreadPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created thread. */
  thread?: PullRequestReviewThread | null
}
/** Autogenerated return type of AddPullRequestReviewThreadReply. */
export interface AddPullRequestReviewThreadReplyPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created reply. */
  comment?: PullRequestReviewComment | null
}
/** Autogenerated return type of AddReaction. */
export interface AddReactionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The reaction object. */
  reaction?: Reaction | null
  /** The reaction groups for the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** The reactable subject. */
  subject?: Reactable | null
}
/** Autogenerated return type of AddStar. */
export interface AddStarPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The starrable. */
  starrable?: Starrable | null
}
/** Autogenerated return type of AddSubIssue. */
export interface AddSubIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The parent issue that the sub-issue was added to. */
  issue?: Issue | null
  /** The sub-issue of the parent. */
  subIssue?: Issue | null
}
/** Autogenerated return type of AddUpvote. */
export interface AddUpvotePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The votable subject. */
  subject?: Votable | null
}
/** Autogenerated return type of AddVerifiableDomain. */
export interface AddVerifiableDomainPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The verifiable domain that was added. */
  domain?: VerifiableDomain | null
}
/** An announcement banner for an enterprise or organization. */
export interface AnnouncementBanner {
  __typename?: string
  /** The date the announcement was created */
  createdAt: DateTime
  /** The expiration date of the announcement, if any */
  expiresAt?: DateTime | null
  /** Whether the announcement can be dismissed by the user */
  isUserDismissible: boolean
  /** The text of the announcement */
  message?: string | null
}
/** Represents an announcement banner. */
export interface AnnouncementBannerI {
  __typename?: string
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: string | null
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: DateTime | null
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: DateTime | null
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: boolean | null
}
/** A GitHub App. */
export interface App extends Node {
  __typename?: string
  /** The client ID of the app. */
  clientId?: string | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The description of the app. */
  description?: string | null
  /** The Node ID of the App object */
  id: ID
  /** The IP addresses of the app. */
  ipAllowListEntries: IpAllowListEntryConnection
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: string
  /** A URL pointing to the app's logo. */
  logoUrl: URI
  /** The name of the app. */
  name: string
  /** A slug based on the name of the app for use in URLs. */
  slug: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The URL to the app's homepage. */
  url: URI
}
/** Autogenerated return type of ApproveDeployments. */
export interface ApproveDeploymentsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The affected deployments. */
  deployments?: Deployment[] | null
}
/** Autogenerated return type of ApproveVerifiableDomain. */
export interface ApproveVerifiableDomainPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The verifiable domain that was approved. */
  domain?: VerifiableDomain | null
}
/** Autogenerated return type of ArchiveProjectV2Item. */
export interface ArchiveProjectV2ItemPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item archived from the project. */
  item?: ProjectV2Item | null
}
/** Autogenerated return type of ArchiveRepository. */
export interface ArchiveRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository that was marked as archived. */
  repository?: Repository | null
}
/** An object that can have users assigned to it. */
export interface Assignable {
  __typename?: string
  /** A list of Users assigned to this object. */
  assignees: UserConnection
}
/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the assignable associated with the event. */
  assignable: Assignable
  /** Identifies the user or mannequin that was assigned. */
  assignee?: Assignee | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the AssignedEvent object */
  id: ID
  /** Identifies the user who was assigned.
   *
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC. */
  user?: User | null
}
/** An entry in the audit log. */
export interface AuditEntry {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the AutomaticBaseChangeFailedEvent object */
  id: ID
  /** The new base for this PR */
  newBase: string
  /** The old base for this PR */
  oldBase: string
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the AutomaticBaseChangeSucceededEvent object */
  id: ID
  /** The new base for this PR */
  newBase: string
  /** The old base for this PR */
  oldBase: string
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** Represents a 'auto_merge_disabled' event on a given pull request. */
export interface AutoMergeDisabledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who disabled auto-merge for this Pull Request */
  disabler?: User | null
  /** The Node ID of the AutoMergeDisabledEvent object */
  id: ID
  /** PullRequest referenced by event */
  pullRequest?: PullRequest | null
  /** The reason auto-merge was disabled */
  reason?: string | null
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode?: string | null
}
/** Represents a 'auto_merge_enabled' event on a given pull request. */
export interface AutoMergeEnabledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who enabled auto-merge for this Pull Request */
  enabler?: User | null
  /** The Node ID of the AutoMergeEnabledEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
}
/** Represents an auto-merge request for a pull request */
export interface AutoMergeRequest {
  __typename?: string
  /** The email address of the author of this auto-merge request. */
  authorEmail?: string | null
  /** The commit message of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging. */
  commitBody?: string | null
  /** The commit title of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging */
  commitHeadline?: string | null
  /** When was this auto-merge request was enabled. */
  enabledAt?: DateTime | null
  /** The actor who created the auto-merge request. */
  enabledBy?: Actor | null
  /** The merge method of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging. */
  mergeMethod: PullRequestMergeMethod
  /** The pull request that this auto-merge request is set against. */
  pullRequest: PullRequest
}
/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export interface AutoRebaseEnabledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler?: User | null
  /** The Node ID of the AutoRebaseEnabledEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
}
/** Represents a 'auto_squash_enabled' event on a given pull request. */
export interface AutoSquashEnabledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler?: User | null
  /** The Node ID of the AutoSquashEnabledEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
}
/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the BaseRefChangedEvent object */
  id: ID
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName: string
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** Represents a 'base_ref_deleted' event on a given pull request. */
export interface BaseRefDeletedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName?: string | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the BaseRefDeletedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
}
/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit?: Commit | null
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the BaseRefForcePushedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref?: Ref | null
}
/** Represents a Git blame. */
export interface Blame {
  __typename?: string
  /** The list of ranges from a Git blame. */
  ranges: BlameRange[]
}
/** Represents a range of information from a Git blame. */
export interface BlameRange {
  __typename?: string
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is
   * calculated as a 2-quantile and determines the length of distance between the
   * median age of all the changes in the file and the recency of the current
   * range's change. */
  age: Int
  /** Identifies the line author */
  commit: Commit
  /** The ending line for the range */
  endingLine: Int
  /** The starting line for the range */
  startingLine: Int
}
/** Represents a Git blob. */
export interface Blob extends GitObject, Node {
  __typename?: string
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: string
  /** Byte size of Blob object */
  byteSize: Int
  /** The HTTP path for this Git object */
  commitResourcePath: URI
  /** The HTTP URL for this Git object */
  commitUrl: URI
  /** The Node ID of the Blob object */
  id: ID
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  isBinary?: boolean | null
  /** Indicates whether the contents is truncated */
  isTruncated: boolean
  /** The Git object ID */
  oid: GitObjectID
  /** The Repository the Git object belongs to */
  repository: Repository
  /** UTF8 text data or null if the Blob is binary */
  text?: string | null
}
/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface Bot extends Actor, Node, UniformResourceLocatable {
  __typename?: string
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: URI
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Bot object */
  id: ID
  /** The username of the actor. */
  login: string
  /** The HTTP path for this bot */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this bot */
  url: URI
}
/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParameters {
  __typename?: string
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate: boolean
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** A branch protection rule. */
export interface BranchProtectionRule extends Node {
  __typename?: string
  /** Can this branch be deleted. */
  allowsDeletions: boolean
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: boolean
  /** Is branch creation a protected operation. */
  blocksCreations: boolean
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances: BypassForcePushAllowanceConnection
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection
  /** The actor who created this branch protection rule. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews: boolean
  /** The Node ID of the BranchProtectionRule object */
  id: ID
  /** Can admins override branch protection. */
  isAdminEnforced: boolean
  /** Whether users can pull changes from upstream when the branch is locked. Set to
   * `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge: boolean
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch: boolean
  /** Repository refs that are protected by this rule */
  matchingRefs: RefConnection
  /** Identifies the protection rule pattern. */
  pattern: string
  /** A list push allowances for this branch protection rule. */
  pushAllowances: PushAllowanceConnection
  /** The repository associated with this branch protection rule. */
  repository?: Repository | null
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval: boolean
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Int | null
  /** List of required deployment environments that must be deployed successfully to update matching branches */
  requiredDeploymentEnvironments?: (string | null)[] | null
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: (string | null)[] | null
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks?: RequiredStatusCheckDescription[] | null
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews: boolean
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: boolean
  /** Are commits required to be signed. */
  requiresCommitSignatures: boolean
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: boolean
  /** Does this branch require deployment to specific environments before merging */
  requiresDeployments: boolean
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: boolean
  /** Are status checks required to update matching branches. */
  requiresStatusChecks: boolean
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks: boolean
  /** Is pushing to matching branches restricted. */
  restrictsPushes: boolean
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals: boolean
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection
}
/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflict {
  __typename?: string
  /** Identifies the branch protection rule. */
  branchProtectionRule?: BranchProtectionRule | null
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule?: BranchProtectionRule | null
  /** Identifies the branch ref that has conflicting rules */
  ref?: Ref | null
}
/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (BranchProtectionRuleConflictEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (BranchProtectionRuleConflict | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: BranchProtectionRuleConflict | null
}
/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (BranchProtectionRuleEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (BranchProtectionRule | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface BranchProtectionRuleEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: BranchProtectionRule | null
}
/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
export interface BypassForcePushAllowance extends Node {
  __typename?: string
  /** The actor that can force push. */
  actor?: BranchActorAllowanceActor | null
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRule | null
  /** The Node ID of the BypassForcePushAllowance object */
  id: ID
}
/** The connection type for BypassForcePushAllowance. */
export interface BypassForcePushAllowanceConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (BypassForcePushAllowanceEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (BypassForcePushAllowance | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface BypassForcePushAllowanceEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: BypassForcePushAllowance | null
}
/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
export interface BypassPullRequestAllowance extends Node {
  __typename?: string
  /** The actor that can bypass. */
  actor?: BranchActorAllowanceActor | null
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRule | null
  /** The Node ID of the BypassPullRequestAllowance object */
  id: ID
}
/** The connection type for BypassPullRequestAllowance. */
export interface BypassPullRequestAllowanceConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (BypassPullRequestAllowanceEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (BypassPullRequestAllowance | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface BypassPullRequestAllowanceEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: BypassPullRequestAllowance | null
}
/** Autogenerated return type of CancelEnterpriseAdminInvitation. */
export interface CancelEnterpriseAdminInvitationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The invitation that was canceled. */
  invitation?: EnterpriseAdministratorInvitation | null
  /** A message confirming the result of canceling an administrator invitation. */
  message?: string | null
}
/** Autogenerated return type of CancelEnterpriseMemberInvitation. */
export interface CancelEnterpriseMemberInvitationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The invitation that was canceled. */
  invitation?: EnterpriseMemberInvitation | null
  /** A message confirming the result of canceling an member invitation. */
  message?: string | null
}
/** Autogenerated return type of CancelSponsorship. */
export interface CancelSponsorshipPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier?: SponsorsTier | null
}
/** Autogenerated return type of ChangeUserStatus. */
export interface ChangeUserStatusPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Your updated status. */
  status?: UserStatus | null
}
/** A single check annotation. */
export interface CheckAnnotation {
  __typename?: string
  /** The annotation's severity level. */
  annotationLevel?: CheckAnnotationLevel | null
  /** The path to the file that this annotation was made on. */
  blobUrl: URI
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The position of this annotation. */
  location: CheckAnnotationSpan
  /** The annotation's message. */
  message: string
  /** The path that this annotation was made on. */
  path: string
  /** Additional information about the annotation. */
  rawDetails?: string | null
  /** The annotation's title */
  title?: string | null
}
/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CheckAnnotationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CheckAnnotation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CheckAnnotationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CheckAnnotation | null
}
/** A character position in a check annotation. */
export interface CheckAnnotationPosition {
  __typename?: string
  /** Column number (1 indexed). */
  column?: Int | null
  /** Line number (1 indexed). */
  line: Int
}
/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpan {
  __typename?: string
  /** End position (inclusive). */
  end: CheckAnnotationPosition
  /** Start position (inclusive). */
  start: CheckAnnotationPosition
}
/** A check run. */
export interface CheckRun extends Node, RequirableByPullRequest, UniformResourceLocatable {
  __typename?: string
  /** The check run's annotations */
  annotations?: CheckAnnotationConnection | null
  /** The check suite that this run is a part of. */
  checkSuite: CheckSuite
  /** Identifies the date and time when the check run was completed. */
  completedAt?: DateTime | null
  /** The conclusion of the check run. */
  conclusion?: CheckConclusionState | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The corresponding deployment for this job, if any */
  deployment?: Deployment | null
  /** The URL from which to find full details of the check run on the integrator's site. */
  detailsUrl?: URI | null
  /** A reference for the check run on the integrator's system. */
  externalId?: string | null
  /** The Node ID of the CheckRun object */
  id: ID
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: boolean
  /** The name of the check for this check run. */
  name: string
  /** Information about a pending deployment, if any, in this check run */
  pendingDeploymentRequest?: DeploymentRequest | null
  /** The permalink to the check run summary. */
  permalink: URI
  /** The repository associated with this check run. */
  repository: Repository
  /** The HTTP path for this check run. */
  resourcePath: URI
  /** Identifies the date and time when the check run was started. */
  startedAt?: DateTime | null
  /** The current status of the check run. */
  status: CheckStatusState
  /** The check run's steps */
  steps?: CheckStepConnection | null
  /** A string representing the check run's summary */
  summary?: string | null
  /** A string representing the check run's text */
  text?: string | null
  /** A string representing the check run */
  title?: string | null
  /** The HTTP URL for this check run. */
  url: URI
}
/** The connection type for CheckRun. */
export interface CheckRunConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CheckRunEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CheckRun | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CheckRunEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CheckRun | null
}
/** Represents a count of the state of a check run. */
export interface CheckRunStateCount {
  __typename?: string
  /** The number of check runs with this state. */
  count: Int
  /** The state of a check run. */
  state: CheckRunState
}
/** A single check step. */
export interface CheckStep {
  __typename?: string
  /** Identifies the date and time when the check step was completed. */
  completedAt?: DateTime | null
  /** The conclusion of the check step. */
  conclusion?: CheckConclusionState | null
  /** A reference for the check step on the integrator's system. */
  externalId?: string | null
  /** The step's name. */
  name: string
  /** The index of the step in the list of steps of the parent check run. */
  number: Int
  /** Number of seconds to completion. */
  secondsToCompletion?: Int | null
  /** Identifies the date and time when the check step was started. */
  startedAt?: DateTime | null
  /** The current status of the check step. */
  status: CheckStatusState
}
/** The connection type for CheckStep. */
export interface CheckStepConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CheckStepEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CheckStep | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CheckStepEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CheckStep | null
}
/** A check suite. */
export interface CheckSuite extends Node {
  __typename?: string
  /** The GitHub App which created this check suite. */
  app?: App | null
  /** The name of the branch for this check suite. */
  branch?: Ref | null
  /** The check runs associated with a check suite. */
  checkRuns?: CheckRunConnection | null
  /** The commit for this check suite */
  commit: Commit
  /** The conclusion of this check suite. */
  conclusion?: CheckConclusionState | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who triggered the check suite. */
  creator?: User | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the CheckSuite object */
  id: ID
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests?: PullRequestConnection | null
  /** The push that triggered this check suite. */
  push?: Push | null
  /** The repository associated with this check suite. */
  repository: Repository
  /** The HTTP path for this check suite */
  resourcePath: URI
  /** The status of this check suite. */
  status: CheckStatusState
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this check suite */
  url: URI
  /** The workflow run associated with this check suite. */
  workflowRun?: WorkflowRun | null
}
/** The connection type for CheckSuite. */
export interface CheckSuiteConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CheckSuiteEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CheckSuite | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CheckSuiteEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CheckSuite | null
}
/** Autogenerated return type of ClearLabelsFromLabelable. */
export interface ClearLabelsFromLabelablePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item that was unlabeled. */
  labelable?: Labelable | null
}
/** Autogenerated return type of ClearProjectV2ItemFieldValue. */
export interface ClearProjectV2ItemFieldValuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated item. */
  projectV2Item?: ProjectV2Item | null
}
/** Autogenerated return type of CloneProject. */
export interface CloneProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId?: string | null
  /** The new cloned project. */
  project?: Project | null
}
/** Autogenerated return type of CloneTemplateRepository. */
export interface CloneTemplateRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new repository. */
  repository?: Repository | null
}
/** An object that can be closed */
export interface Closable {
  __typename?: string
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
}
/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Object that was closed. */
  closable: Closable
  /** Object which triggered the creation of this event. */
  closer?: Closer | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ClosedEvent object */
  id: ID
  /** The HTTP path for this closed event. */
  resourcePath: URI
  /** The reason the issue state was changed to closed. */
  stateReason?: IssueStateReason | null
  /** The HTTP URL for this closed event. */
  url: URI
}
/** Autogenerated return type of CloseDiscussion. */
export interface CloseDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that was closed. */
  discussion?: Discussion | null
}
/** Autogenerated return type of CloseIssue. */
export interface CloseIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue that was closed. */
  issue?: Issue | null
}
/** Autogenerated return type of ClosePullRequest. */
export interface ClosePullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that was closed. */
  pullRequest?: PullRequest | null
}
/** The Code of Conduct for a repository */
export interface CodeOfConduct extends Node {
  __typename?: string
  /** The body of the Code of Conduct */
  body?: string | null
  /** The Node ID of the CodeOfConduct object */
  id: ID
  /** The key for the Code of Conduct */
  key: string
  /** The formal name of the Code of Conduct */
  name: string
  /** The HTTP path for this Code of Conduct */
  resourcePath?: URI | null
  /** The HTTP URL for this Code of Conduct */
  url?: URI | null
}
/** Choose which tools must provide code scanning results before the reference is
 * updated. When configured, code scanning must be enabled and have results for
 * both the commit and the reference being updated. */
export interface CodeScanningParameters {
  __typename?: string
  /** Tools that must provide code scanning results for this rule to pass. */
  codeScanningTools: CodeScanningTool[]
}
/** A tool that must provide code scanning results for this rule to pass. */
export interface CodeScanningTool {
  __typename?: string
  /** The severity level at which code scanning results that raise alerts block a
   * reference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  alertsThreshold: string
  /** The severity level at which code scanning results that raise security alerts
   * block a reference update. For more information on security severity levels,
   * see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  securityAlertsThreshold: string
  /** The name of a code scanning tool */
  tool: string
}
/** Represents a comment. */
export interface Comment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the Comment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The user who authored the deleted comment. */
  deletedCommentAuthor?: Actor | null
  /** The Node ID of the CommentDeletedEvent object */
  id: ID
}
/** Represents a Git commit. */
export interface Commit extends GitObject, Node, Subscribable, UniformResourceLocatable {
  __typename?: string
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: string
  /** The number of additions in this commit. */
  additions: Int
  /** The merged Pull Request that introduced the commit to the repository. If the
   * commit is not present in the default branch, additionally returns open Pull
   * Requests associated with the commit */
  associatedPullRequests?: PullRequestConnection | null
  /** Authorship details of the commit. */
  author?: GitActor | null
  /** Check if the committer and the author match. */
  authoredByCommitter: boolean
  /** The datetime when this commit was authored. */
  authoredDate: DateTime
  /** The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first. */
  authors: GitActorConnection
  /** Fetches `git blame` information. */
  blame: Blame
  /** We recommend using the `changedFilesIfAvailable` field instead of
   * `changedFiles`, as `changedFiles` will cause your request to return an error
   * if GitHub is unable to calculate the number of changed files.
   *
   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC. */
  changedFiles: Int
  /** The number of changed files in this commit. If GitHub is unable to calculate
   * the number of changed files (for example due to a timeout), this will return
   * `null`. We recommend using this field instead of `changedFiles`. */
  changedFilesIfAvailable?: Int | null
  /** The check suites associated with a commit. */
  checkSuites?: CheckSuiteConnection | null
  /** Comments made on the commit. */
  comments: CommitCommentConnection
  /** The HTTP path for this Git object */
  commitResourcePath: URI
  /** The HTTP URL for this Git object */
  commitUrl: URI
  /** The datetime when this commit was committed. */
  committedDate: DateTime
  /** Check if committed via GitHub web UI. */
  committedViaWeb: boolean
  /** Committer details of the commit. */
  committer?: GitActor | null
  /** The number of deletions in this commit. */
  deletions: Int
  /** The deployments associated with a commit. */
  deployments?: DeploymentConnection | null
  /** The tree entry representing the file located at the given path. */
  file?: TreeEntry | null
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  history: CommitHistoryConnection
  /** The Node ID of the Commit object */
  id: ID
  /** The Git commit message */
  message: string
  /** The Git commit message body */
  messageBody: string
  /** The commit message body rendered to HTML. */
  messageBodyHTML: HTML
  /** The Git commit message headline */
  messageHeadline: string
  /** The commit message headline rendered to HTML. */
  messageHeadlineHTML: HTML
  /** The Git object ID */
  oid: GitObjectID
  /** The organization this commit was made on behalf of. */
  onBehalfOf?: Organization | null
  /** The parents of a commit. */
  parents: CommitConnection
  /** The datetime when this commit was pushed.
   *
   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC. */
  pushedDate?: DateTime | null
  /** The Repository this commit belongs to */
  repository: Repository
  /** The HTTP path for this commit */
  resourcePath: URI
  /** Commit signing information, if present. */
  signature?: GitSignature | null
  /** Status information for this commit */
  status?: Status | null
  /** Check and Status rollup information for this commit. */
  statusCheckRollup?: StatusCheckRollup | null
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  submodules: SubmoduleConnection
  /** Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes. */
  tarballUrl: URI
  /** Commit's root Tree */
  tree: Tree
  /** The HTTP path for the tree of this commit */
  treeResourcePath: URI
  /** The HTTP URL for the tree of this commit */
  treeUrl: URI
  /** The HTTP URL for this commit */
  url: URI
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
  /** Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes. */
  zipballUrl: URI
}
/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParameters {
  __typename?: string
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate: boolean
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Represents a comment on a given Commit. */
export interface CommitComment extends Comment, Deletable, Minimizable, Node, Reactable, RepositoryNode, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** Identifies the comment body. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the commit associated with the comment, if the commit exists. */
  commit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the CommitComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Identifies the file path associated with the comment. */
  path?: string | null
  /** Identifies the line position associated with the comment. */
  position?: Int | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path permalink for this commit comment. */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL permalink for this commit comment. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** The connection type for CommitComment. */
export interface CommitCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CommitCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CommitComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CommitCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CommitComment | null
}
/** A thread of comments on a commit. */
export interface CommitCommentThread extends Node, RepositoryNode {
  __typename?: string
  /** The comments that exist in this thread. */
  comments: CommitCommentConnection
  /** The commit the comments were made on. */
  commit?: Commit | null
  /** The Node ID of the CommitCommentThread object */
  id: ID
  /** The file the comments were made on. */
  path?: string | null
  /** The position in the diff for the commit that the comment was made on. */
  position?: Int | null
  /** The repository associated with this node. */
  repository: Repository
}
/** The connection type for Commit. */
export interface CommitConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CommitEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Commit | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepository {
  __typename?: string
  /** The commit contributions, each representing a day. */
  contributions: CreatedCommitContributionConnection
  /** The repository in which the commits were made. */
  repository: Repository
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath: URI
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url: URI
}
/** An edge in a connection. */
export interface CommitEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Commit | null
}
/** The connection type for Commit. */
export interface CommitHistoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CommitEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Commit | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParameters {
  __typename?: string
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate: boolean
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParameters {
  __typename?: string
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate: boolean
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Represents a comparison between two commit revisions. */
export interface Comparison extends Node {
  __typename?: string
  /** The number of commits ahead of the base branch. */
  aheadBy: Int
  /** The base revision of this comparison. */
  baseTarget: GitObject
  /** The number of commits behind the base branch. */
  behindBy: Int
  /** The commits which compose this comparison. */
  commits: ComparisonCommitConnection
  /** The head revision of this comparison. */
  headTarget: GitObject
  /** The Node ID of the Comparison object */
  id: ID
  /** The status of this comparison. */
  status: ComparisonStatus
}
/** The connection type for Commit. */
export interface ComparisonCommitConnection {
  __typename?: string
  /** The total count of authors and co-authors across all commits. */
  authorCount: Int
  /** A list of edges. */
  edges?: (CommitEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Commit | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ConnectedEvent object */
  id: ID
  /** Reference originated in a different repository. */
  isCrossRepository: boolean
  /** Issue or pull request that made the reference. */
  source: ReferencedSubject
  /** Issue or pull request which was connected. */
  subject: ReferencedSubject
}
/** The Contributing Guidelines for a repository. */
export interface ContributingGuidelines {
  __typename?: string
  /** The body of the Contributing Guidelines. */
  body?: string | null
  /** The HTTP path for the Contributing Guidelines. */
  resourcePath?: URI | null
  /** The HTTP URL for the Contributing Guidelines. */
  url?: URI | null
}
/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendar {
  __typename?: string
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors: string[]
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween: boolean
  /** A list of the months of contributions in this calendar. */
  months: ContributionCalendarMonth[]
  /** The count of total contributions in the calendar. */
  totalContributions: Int
  /** A list of the weeks of contributions in this calendar. */
  weeks: ContributionCalendarWeek[]
}
/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDay {
  __typename?: string
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color: string
  /** How many contributions were made by the user on this day. */
  contributionCount: Int
  /** Indication of contributions, relative to other days. Can be used to indicate
   * which color to represent this day on a calendar. */
  contributionLevel: ContributionLevel
  /** The day this square represents. */
  date: Date
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday: Int
}
/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonth {
  __typename?: string
  /** The date of the first day of this month. */
  firstDay: Date
  /** The name of the month. */
  name: string
  /** How many weeks started in this month. */
  totalWeeks: Int
  /** The year the month occurred in. */
  year: Int
}
/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeek {
  __typename?: string
  /** The days of contributions in this week. */
  contributionDays: ContributionCalendarDay[]
  /** The date of the earliest square in this week. */
  firstDay: Date
}
/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollection {
  __typename?: string
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository: CommitContributionsByRepository[]
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar: ContributionCalendar
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears: Int[]
  /** Determine if this collection's time span ends in the current month. */
  doesEndInCurrentMonth: boolean
  /** The date of the first restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate?: Date | null
  /** The ending date and time of this collection. */
  endedAt: DateTime
  /** The first issue the user opened on GitHub. This will be null if that issue was
   * opened outside the collection's time range and ignoreTimeRange is false. If
   * the issue is not visible but the user has opted to show private contributions,
   * a RestrictedContribution will be returned. */
  firstIssueContribution?: CreatedIssueOrRestrictedContribution | null
  /** The first pull request the user opened on GitHub. This will be null if that
   * pull request was opened outside the collection's time range and
   * ignoreTimeRange is not true. If the pull request is not visible but the user
   * has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution?: CreatedPullRequestOrRestrictedContribution | null
  /** The first repository the user created on GitHub. This will be null if that
   * first repository was created outside the collection's time range and
   * ignoreTimeRange is false. If the repository is not visible, then a
   * RestrictedContribution is returned. */
  firstRepositoryContribution?: CreatedRepositoryOrRestrictedContribution | null
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast: boolean
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions: boolean
  /** Determine if the user made any contributions in this time frame whose details
   * are not visible because they were made in a private repository. Can only be
   * true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions: boolean
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay: boolean
  /** A list of issues the user opened. */
  issueContributions: CreatedIssueContributionConnection
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository: IssueContributionsByRepository[]
  /** When the user signed up for GitHub. This will be null if that sign up date
   * falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution?: JoinedGitHubContribution | null
  /** The date of the most recent restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate?: Date | null
  /** When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity. */
  mostRecentCollectionWithActivity?: ContributionsCollection | null
  /** Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions. */
  mostRecentCollectionWithoutActivity?: ContributionsCollection | null
  /** The issue the user opened on GitHub that received the most comments in the specified
   * time frame. */
  popularIssueContribution?: CreatedIssueContribution | null
  /** The pull request the user opened on GitHub that received the most comments in the
   * specified time frame. */
  popularPullRequestContribution?: CreatedPullRequestContribution | null
  /** Pull request contributions made by the user. */
  pullRequestContributions: CreatedPullRequestContributionConnection
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository: PullRequestContributionsByRepository[]
  /** Pull request review contributions made by the user. Returns the most recently
   * submitted review for each PR reviewed by the user. */
  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository: PullRequestReviewContributionsByRepository[]
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions: CreatedRepositoryContributionConnection
  /** A count of contributions made by the user that the viewer cannot access. Only
   * non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount: Int
  /** The beginning date and time of this collection. */
  startedAt: DateTime
  /** How many commits were made by the user in this time span. */
  totalCommitContributions: Int
  /** How many issues the user opened. */
  totalIssueContributions: Int
  /** How many pull requests the user opened. */
  totalPullRequestContributions: Int
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions: Int
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits: Int
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues: Int
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews: Int
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests: Int
  /** How many repositories the user created. */
  totalRepositoryContributions: Int
  /** The user who made the contributions in this collection. */
  user: User
}
/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ConvertedNoteToIssueEvent object */
  id: ID
  /** Project referenced by event. */
  project?: Project | null
  /** Project card referenced by this project event. */
  projectCard?: ProjectCard | null
  /** Column name referenced by this project event. */
  projectColumnName: string
}
/** Represents a 'converted_to_discussion' event on a given issue. */
export interface ConvertedToDiscussionEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The discussion that the issue was converted into. */
  discussion?: Discussion | null
  /** The Node ID of the ConvertedToDiscussionEvent object */
  id: ID
}
/** Autogenerated return type of ConvertProjectCardNoteToIssue. */
export interface ConvertProjectCardNoteToIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated ProjectCard. */
  projectCard?: ProjectCard | null
}
/** Autogenerated return type of ConvertProjectV2DraftIssueItemToIssue. */
export interface ConvertProjectV2DraftIssueItemToIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated project item. */
  item?: ProjectV2Item | null
}
/** Autogenerated return type of ConvertPullRequestToDraft. */
export interface ConvertPullRequestToDraftPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that is now a draft. */
  pullRequest?: PullRequest | null
}
/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ConvertToDraftEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** The HTTP path for this convert to draft event. */
  resourcePath: URI
  /** The HTTP URL for this convert to draft event. */
  url: URI
}
/** Copilot endpoint information */
export interface CopilotEndpoints {
  __typename?: string
  /** Copilot API endpoint */
  api: string
  /** Copilot origin tracker endpoint */
  originTracker: string
  /** Copilot proxy endpoint */
  proxy: string
  /** Copilot telemetry endpoint */
  telemetry: string
}
/** Autogenerated return type of CopyProjectV2. */
export interface CopyProjectV2Payload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The copied project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of CreateAttributionInvitation. */
export interface CreateAttributionInvitationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The owner scoping the reattributable data. */
  owner?: Organization | null
  /** The account owning the data to reattribute. */
  source?: Claimable | null
  /** The account which may claim the data. */
  target?: Claimable | null
}
/** Autogenerated return type of CreateBranchProtectionRule. */
export interface CreateBranchProtectionRulePayload {
  __typename?: string
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: BranchProtectionRule | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of CreateCheckRun. */
export interface CreateCheckRunPayload {
  __typename?: string
  /** The newly created check run. */
  checkRun?: CheckRun | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of CreateCheckSuite. */
export interface CreateCheckSuitePayload {
  __typename?: string
  /** The newly created check suite. */
  checkSuite?: CheckSuite | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of CreateCommitOnBranch. */
export interface CreateCommitOnBranchPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new commit. */
  commit?: Commit | null
  /** The ref which has been updated to point to the new commit. */
  ref?: Ref | null
}
/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContribution extends Contribution {
  __typename?: string
  /** How many commits were made on this day to this repository by the user. */
  commitCount: Int
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The repository the user made a commit in. */
  repository: Repository
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CreatedCommitContributionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CreatedCommitContribution | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of commits across days and repositories in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CreatedCommitContributionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CreatedCommitContribution | null
}
/** Autogenerated return type of CreateDeployment. */
export interface CreateDeploymentPayload {
  __typename?: string
  /** True if the default branch has been auto-merged into the deployment ref. */
  autoMerged?: boolean | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new deployment. */
  deployment?: Deployment | null
}
/** Autogenerated return type of CreateDeploymentStatus. */
export interface CreateDeploymentStatusPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new deployment status. */
  deploymentStatus?: DeploymentStatus | null
}
/** Autogenerated return type of CreateDiscussion. */
export interface CreateDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that was just created. */
  discussion?: Discussion | null
}
/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** The issue that was opened. */
  issue: Issue
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CreatedIssueContributionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CreatedIssueContribution | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CreatedIssueContributionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CreatedIssueContribution | null
}
/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The pull request that was opened. */
  pullRequest: PullRequest
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CreatedPullRequestContributionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CreatedPullRequestContribution | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CreatedPullRequestContributionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CreatedPullRequestContribution | null
}
/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The pull request the user reviewed. */
  pullRequest: PullRequest
  /** The review the user left on the pull request. */
  pullRequestReview: PullRequestReview
  /** The repository containing the pull request that the user reviewed. */
  repository: Repository
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CreatedPullRequestReviewContributionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CreatedPullRequestReviewContribution | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CreatedPullRequestReviewContribution | null
}
/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The repository that was created. */
  repository: Repository
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CreatedRepositoryContributionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CreatedRepositoryContribution | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CreatedRepositoryContributionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CreatedRepositoryContribution | null
}
/** Autogenerated return type of CreateEnterpriseOrganization. */
export interface CreateEnterpriseOrganizationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise that owns the created organization. */
  enterprise?: Enterprise | null
  /** The organization that was created. */
  organization?: Organization | null
}
/** Autogenerated return type of CreateEnvironment. */
export interface CreateEnvironmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new or existing environment. */
  environment?: Environment | null
}
/** Autogenerated return type of CreateIpAllowListEntry. */
export interface CreateIpAllowListEntryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The IP allow list entry that was created. */
  ipAllowListEntry?: IpAllowListEntry | null
}
/** Autogenerated return type of CreateIssue. */
export interface CreateIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new issue. */
  issue?: Issue | null
}
/** Autogenerated return type of CreateLabel. */
export interface CreateLabelPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new label. */
  label?: Label | null
}
/** Autogenerated return type of CreateLinkedBranch. */
export interface CreateLinkedBranchPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue that was linked to. */
  issue?: Issue | null
  /** The new branch issue reference. */
  linkedBranch?: LinkedBranch | null
}
/** Autogenerated return type of CreateMigrationSource. */
export interface CreateMigrationSourcePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The created migration source. */
  migrationSource?: MigrationSource | null
}
/** Autogenerated return type of CreateProject. */
export interface CreateProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new project. */
  project?: Project | null
}
/** Autogenerated return type of CreateProjectV2Field. */
export interface CreateProjectV2FieldPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new field. */
  projectV2Field?: ProjectV2FieldConfiguration | null
}
/** Autogenerated return type of CreateProjectV2. */
export interface CreateProjectV2Payload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of CreateProjectV2StatusUpdate. */
export interface CreateProjectV2StatusUpdatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The status update updated in the project. */
  statusUpdate?: ProjectV2StatusUpdate | null
}
/** Autogenerated return type of CreatePullRequest. */
export interface CreatePullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new pull request. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of CreateRef. */
export interface CreateRefPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created ref. */
  ref?: Ref | null
}
/** Autogenerated return type of CreateRepository. */
export interface CreateRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new repository. */
  repository?: Repository | null
}
/** Autogenerated return type of CreateRepositoryRuleset. */
export interface CreateRepositoryRulesetPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created Ruleset. */
  ruleset?: RepositoryRuleset | null
}
/** Autogenerated return type of CreateSponsorship. */
export interface CreateSponsorshipPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The sponsorship that was started. */
  sponsorship?: Sponsorship | null
}
/** Autogenerated return type of CreateSponsorships. */
export interface CreateSponsorshipsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The users and organizations who received a sponsorship. */
  sponsorables?: Sponsorable[] | null
}
/** Autogenerated return type of CreateSponsorsListing. */
export interface CreateSponsorsListingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new GitHub Sponsors profile. */
  sponsorsListing?: SponsorsListing | null
}
/** Autogenerated return type of CreateSponsorsTier. */
export interface CreateSponsorsTierPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new tier. */
  sponsorsTier?: SponsorsTier | null
}
/** Autogenerated return type of CreateTeamDiscussionComment. */
export interface CreateTeamDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new comment.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  teamDiscussionComment?: TeamDiscussionComment | null
}
/** Autogenerated return type of CreateTeamDiscussion. */
export interface CreateTeamDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  teamDiscussion?: TeamDiscussion | null
}
/** Autogenerated return type of CreateUserList. */
export interface CreateUserListPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The list that was just created */
  list?: UserList | null
  /** The user who created the list */
  viewer?: User | null
}
/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the CrossReferencedEvent object */
  id: ID
  /** Reference originated in a different repository. */
  isCrossRepository: boolean
  /** Identifies when the reference was made. */
  referencedAt: DateTime
  /** The HTTP path for this pull request. */
  resourcePath: URI
  /** Issue or pull request that made the reference. */
  source: ReferencedSubject
  /** Issue or pull request to which the reference was made. */
  target: ReferencedSubject
  /** The HTTP URL for this pull request. */
  url: URI
  /** Checks if the target will be closed when the source is merged. */
  willCloseTarget: boolean
}
/** The Common Vulnerability Scoring System */
export interface CVSS {
  __typename?: string
  /** The CVSS score associated with this advisory */
  score: Float
  /** The CVSS vector string associated with this advisory */
  vectorString?: string | null
}
/** The Common Vulnerability Scoring System */
export interface CvssSeverities {
  __typename?: string
  /** The CVSS v3 severity associated with this advisory */
  cvssV3?: CVSS | null
  /** The CVSS v4 severity associated with this advisory */
  cvssV4?: CVSS | null
}
/** A common weakness enumeration */
export interface CWE extends Node {
  __typename?: string
  /** The id of the CWE */
  cweId: string
  /** A detailed description of this CWE */
  description: string
  /** The Node ID of the CWE object */
  id: ID
  /** The name of this CWE */
  name: string
}
/** The connection type for CWE. */
export interface CWEConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (CWEEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (CWE | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface CWEEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: CWE | null
}
/** Autogenerated return type of DeclineTopicSuggestion. */
export interface DeclineTopicSuggestionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The declined topic.
   *
   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC. */
  topic?: Topic | null
}
/** Entities that can be deleted. */
export interface Deletable {
  __typename?: string
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
}
/** Autogenerated return type of DeleteBranchProtectionRule. */
export interface DeleteBranchProtectionRulePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteDeployment. */
export interface DeleteDeploymentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteDiscussionComment. */
export interface DeleteDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion comment that was just deleted. */
  comment?: DiscussionComment | null
}
/** Autogenerated return type of DeleteDiscussion. */
export interface DeleteDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that was just deleted. */
  discussion?: Discussion | null
}
/** Autogenerated return type of DeleteEnvironment. */
export interface DeleteEnvironmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteIpAllowListEntry. */
export interface DeleteIpAllowListEntryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry?: IpAllowListEntry | null
}
/** Autogenerated return type of DeleteIssueComment. */
export interface DeleteIssueCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteIssue. */
export interface DeleteIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository the issue belonged to */
  repository?: Repository | null
}
/** Autogenerated return type of DeleteLabel. */
export interface DeleteLabelPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteLinkedBranch. */
export interface DeleteLinkedBranchPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue the linked branch was unlinked from. */
  issue?: Issue | null
}
/** Autogenerated return type of DeletePackageVersion. */
export interface DeletePackageVersionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether or not the operation succeeded. */
  success?: boolean | null
}
/** Autogenerated return type of DeleteProjectCard. */
export interface DeleteProjectCardPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The column the deleted card was in. */
  column?: ProjectColumn | null
  /** The deleted card ID. */
  deletedCardId?: ID | null
}
/** Autogenerated return type of DeleteProjectColumn. */
export interface DeleteProjectColumnPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The deleted column ID. */
  deletedColumnId?: ID | null
  /** The project the deleted column was in. */
  project?: Project | null
}
/** Autogenerated return type of DeleteProject. */
export interface DeleteProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository or organization the project was removed from. */
  owner?: ProjectOwner | null
}
/** Autogenerated return type of DeleteProjectV2Field. */
export interface DeleteProjectV2FieldPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The deleted field. */
  projectV2Field?: ProjectV2FieldConfiguration | null
}
/** Autogenerated return type of DeleteProjectV2Item. */
export interface DeleteProjectV2ItemPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the deleted item. */
  deletedItemId?: ID | null
}
/** Autogenerated return type of DeleteProjectV2. */
export interface DeleteProjectV2Payload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The deleted Project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of DeleteProjectV2StatusUpdate. */
export interface DeleteProjectV2StatusUpdatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the deleted status update. */
  deletedStatusUpdateId?: ID | null
  /** The project the deleted status update was in. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of DeleteProjectV2Workflow. */
export interface DeleteProjectV2WorkflowPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the deleted workflow. */
  deletedWorkflowId?: ID | null
  /** The project the deleted workflow was in. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of DeletePullRequestReviewComment. */
export interface DeletePullRequestReviewCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview?: PullRequestReview | null
  /** The deleted pull request review comment. */
  pullRequestReviewComment?: PullRequestReviewComment | null
}
/** Autogenerated return type of DeletePullRequestReview. */
export interface DeletePullRequestReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The deleted pull request review. */
  pullRequestReview?: PullRequestReview | null
}
/** Autogenerated return type of DeleteRef. */
export interface DeleteRefPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteRepositoryRuleset. */
export interface DeleteRepositoryRulesetPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteTeamDiscussionComment. */
export interface DeleteTeamDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteTeamDiscussion. */
export interface DeleteTeamDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of DeleteUserList. */
export interface DeleteUserListPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The owner of the list that will be deleted */
  user?: User | null
}
/** Autogenerated return type of DeleteVerifiableDomain. */
export interface DeleteVerifiableDomainPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The owning account from which the domain was deleted. */
  owner?: VerifiableDomainOwner | null
}
/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the DemilestonedEvent object */
  id: ID
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle: string
  /** Object referenced by event. */
  subject: MilestoneItem
}
/** A Dependabot Update for a dependency in a repository */
export interface DependabotUpdate extends RepositoryNode {
  __typename?: string
  /** The error from a dependency update */
  error?: DependabotUpdateError | null
  /** The associated pull request */
  pullRequest?: PullRequest | null
  /** The repository associated with this node. */
  repository: Repository
}
/** An error produced from a Dependabot Update */
export interface DependabotUpdateError {
  __typename?: string
  /** The body of the error */
  body: string
  /** The error code */
  errorType: string
  /** The title of the error */
  title: string
}
/** A dependency manifest entry */
export interface DependencyGraphDependency {
  __typename?: string
  /** Does the dependency itself have dependencies? */
  hasDependencies: boolean
  /** The original name of the package, as it appears in the manifest.
   *
   * @deprecated `packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC. */
  packageLabel: string
  /** The dependency package manager */
  packageManager?: string | null
  /** The name of the package in the canonical form used by the package manager. */
  packageName: string
  /** Public preview: The relationship of the dependency. Can be direct, transitive, or unknown */
  relationship: string
  /** The repository containing the package */
  repository?: Repository | null
  /** The dependency version requirements */
  requirements: string
}
/** The connection type for DependencyGraphDependency. */
export interface DependencyGraphDependencyConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DependencyGraphDependencyEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DependencyGraphDependency | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DependencyGraphDependencyEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DependencyGraphDependency | null
}
/** Dependency manifest for a repository */
export interface DependencyGraphManifest extends Node {
  __typename?: string
  /** Path to view the manifest file blob */
  blobPath: string
  /** A list of manifest dependencies */
  dependencies?: DependencyGraphDependencyConnection | null
  /** The number of dependencies listed in the manifest */
  dependenciesCount?: Int | null
  /** Is the manifest too big to parse? */
  exceedsMaxSize: boolean
  /** Fully qualified manifest filename */
  filename: string
  /** The Node ID of the DependencyGraphManifest object */
  id: ID
  /** Were we able to parse the manifest? */
  parseable: boolean
  /** The repository containing the manifest */
  repository: Repository
}
/** The connection type for DependencyGraphManifest. */
export interface DependencyGraphManifestConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DependencyGraphManifestEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DependencyGraphManifest | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DependencyGraphManifestEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DependencyGraphManifest | null
}
/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The deployment associated with the 'deployed' event. */
  deployment: Deployment
  /** The Node ID of the DeployedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** The ref associated with the 'deployed' event. */
  ref?: Ref | null
}
/** A repository deploy key. */
export interface DeployKey extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Whether or not the deploy key is enabled by policy at the Enterprise or Organization level. */
  enabled: boolean
  /** The Node ID of the DeployKey object */
  id: ID
  /** The deploy key. */
  key: string
  /** Whether or not the deploy key is read only. */
  readOnly: boolean
  /** The deploy key title. */
  title: string
  /** Whether or not the deploy key has been verified. */
  verified: boolean
}
/** The connection type for DeployKey. */
export interface DeployKeyConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeployKeyEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeployKey | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeployKeyEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeployKey | null
}
/** Represents triggered deployment instance. */
export interface Deployment extends Node {
  __typename?: string
  /** Identifies the commit sha of the deployment. */
  commit?: Commit | null
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the actor who triggered the deployment. */
  creator: Actor
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The deployment description. */
  description?: string | null
  /** The latest environment to which this deployment was made. */
  environment?: string | null
  /** The Node ID of the Deployment object */
  id: ID
  /** The latest environment to which this deployment was made. */
  latestEnvironment?: string | null
  /** The latest status of this deployment. */
  latestStatus?: DeploymentStatus | null
  /** The original environment to which this deployment was made. */
  originalEnvironment?: string | null
  /** Extra information that a deployment system might need. */
  payload?: string | null
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref?: Ref | null
  /** Identifies the repository associated with the deployment. */
  repository: Repository
  /** The current state of the deployment. */
  state?: DeploymentState | null
  /** A list of statuses associated with the deployment. */
  statuses?: DeploymentStatusConnection | null
  /** The deployment task. */
  task?: string | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for Deployment. */
export interface DeploymentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Deployment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Deployment | null
}
/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The deployment status that updated the deployment environment. */
  deploymentStatus: DeploymentStatus
  /** The Node ID of the DeploymentEnvironmentChangedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** A protection rule. */
export interface DeploymentProtectionRule {
  __typename?: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: boolean | null
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection
  /** The timeout in minutes for this protection rule. */
  timeout: Int
  /** The type of protection rule. */
  type: DeploymentProtectionRuleType
}
/** The connection type for DeploymentProtectionRule. */
export interface DeploymentProtectionRuleConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentProtectionRuleEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeploymentProtectionRule | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentProtectionRuleEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeploymentProtectionRule | null
}
/** A request to deploy a workflow run to an environment. */
export interface DeploymentRequest {
  __typename?: string
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove: boolean
  /** The target environment of the deployment */
  environment: Environment
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection
  /** The wait timer in minutes configured in the environment */
  waitTimer: Int
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt?: DateTime | null
}
/** The connection type for DeploymentRequest. */
export interface DeploymentRequestConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentRequestEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeploymentRequest | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentRequestEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeploymentRequest | null
}
/** A deployment review. */
export interface DeploymentReview extends Node {
  __typename?: string
  /** The comment the user left. */
  comment: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The environments approved or rejected */
  environments: EnvironmentConnection
  /** The Node ID of the DeploymentReview object */
  id: ID
  /** The decision of the user. */
  state: DeploymentReviewState
  /** The user that reviewed the deployment. */
  user: User
}
/** The connection type for DeploymentReview. */
export interface DeploymentReviewConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentReviewEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeploymentReview | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentReviewEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeploymentReview | null
}
/** The connection type for DeploymentReviewer. */
export interface DeploymentReviewerConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentReviewerEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeploymentReviewer | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentReviewerEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeploymentReviewer | null
}
/** Describes the status of a given deployment attempt. */
export interface DeploymentStatus extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the actor who triggered the deployment. */
  creator: Actor
  /** Identifies the deployment associated with status. */
  deployment: Deployment
  /** Identifies the description of the deployment. */
  description?: string | null
  /** Identifies the environment of the deployment at the time of this deployment status */
  environment?: string | null
  /** Identifies the environment URL of the deployment. */
  environmentUrl?: URI | null
  /** The Node ID of the DeploymentStatus object */
  id: ID
  /** Identifies the log URL of the deployment. */
  logUrl?: URI | null
  /** Identifies the current state of the deployment. */
  state: DeploymentStatusState
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DeploymentStatusEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DeploymentStatus | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DeploymentStatusEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DeploymentStatus | null
}
/** Autogenerated return type of DequeuePullRequest. */
export interface DequeuePullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The merge queue entry of the dequeued pull request. */
  mergeQueueEntry?: MergeQueueEntry | null
}
/** Autogenerated return type of DisablePullRequestAutoMerge. */
export interface DisablePullRequestAutoMergePayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request auto merge was disabled on. */
  pullRequest?: PullRequest | null
}
/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the DisconnectedEvent object */
  id: ID
  /** Reference originated in a different repository. */
  isCrossRepository: boolean
  /** Issue or pull request from which the issue was disconnected. */
  source: ReferencedSubject
  /** Issue or pull request which was disconnected. */
  subject: ReferencedSubject
}
/** A discussion in a repository. */
export interface Discussion extends Closable, Comment, Deletable, Labelable, Lockable, Node, Reactable, RepositoryNode, Subscribable, Updatable, Votable {
  __typename?: string
  /** Reason that the conversation was locked. */
  activeLockReason?: LockReason | null
  /** The comment chosen as this discussion's answer, if any. */
  answer?: DiscussionComment | null
  /** The time when a user chose this discussion's answer, if answered. */
  answerChosenAt?: DateTime | null
  /** The user who chose this discussion's answer, if answered. */
  answerChosenBy?: Actor | null
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** The main text of the discussion post. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** The category for this discussion. */
  category: DiscussionCategory
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** The replies to the discussion. */
  comments: DiscussionCommentConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the Discussion object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Only return answered/unanswered discussions */
  isAnswered?: boolean | null
  /** A list of labels associated with the object. */
  labels?: LabelConnection | null
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** `true` if the object is locked */
  locked: boolean
  /** The number identifying this discussion within the repository. */
  number: Int
  /** The poll associated with this discussion, if one exists. */
  poll?: DiscussionPoll | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The path for this discussion. */
  resourcePath: URI
  /** Identifies the reason for the discussion's state. */
  stateReason?: DiscussionStateReason | null
  /** The title of this discussion. */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** Number of upvotes that this subject has received. */
  upvoteCount: Int
  /** The URL for this discussion. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: boolean
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
}
/** A category for discussions in a repository. */
export interface DiscussionCategory extends Node, RepositoryNode {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** A description of this category. */
  description?: string | null
  /** An emoji representing this category. */
  emoji: string
  /** This category's emoji rendered as HTML. */
  emojiHTML: HTML
  /** The Node ID of the DiscussionCategory object */
  id: ID
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  isAnswerable: boolean
  /** The name of this category. */
  name: string
  /** The repository associated with this node. */
  repository: Repository
  /** The slug of this category. */
  slug: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for DiscussionCategory. */
export interface DiscussionCategoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DiscussionCategoryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DiscussionCategory | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DiscussionCategoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DiscussionCategory | null
}
/** A comment on a discussion. */
export interface DiscussionComment extends Comment, Deletable, Minimizable, Node, Reactable, Updatable, UpdatableComment, Votable {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The time when this replied-to comment was deleted */
  deletedAt?: DateTime | null
  /** The discussion this comment was created in */
  discussion?: Discussion | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the DiscussionComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Has this comment been chosen as the answer of its discussion? */
  isAnswer: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The threaded replies to this comment. */
  replies: DiscussionCommentConnection
  /** The discussion comment this comment is a reply to */
  replyTo?: DiscussionComment | null
  /** The path for this discussion comment. */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** Number of upvotes that this subject has received. */
  upvoteCount: Int
  /** The URL for this discussion comment. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Can the current user mark this comment as an answer? */
  viewerCanMarkAsAnswer: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Can the current user unmark this comment as an answer? */
  viewerCanUnmarkAsAnswer: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: boolean
}
/** The connection type for DiscussionComment. */
export interface DiscussionCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DiscussionCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DiscussionComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DiscussionCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DiscussionComment | null
}
/** The connection type for Discussion. */
export interface DiscussionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DiscussionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Discussion | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DiscussionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Discussion | null
}
/** A poll for a discussion. */
export interface DiscussionPoll extends Node {
  __typename?: string
  /** The discussion that this poll belongs to. */
  discussion?: Discussion | null
  /** The Node ID of the DiscussionPoll object */
  id: ID
  /** The options for this poll. */
  options?: DiscussionPollOptionConnection | null
  /** The question that is being asked by this poll. */
  question: string
  /** The total number of votes that have been cast for this poll. */
  totalVoteCount: Int
  /** Indicates if the viewer has permission to vote in this poll. */
  viewerCanVote: boolean
  /** Indicates if the viewer has voted for any option in this poll. */
  viewerHasVoted: boolean
}
/** An option for a discussion poll. */
export interface DiscussionPollOption extends Node {
  __typename?: string
  /** The Node ID of the DiscussionPollOption object */
  id: ID
  /** The text for this option. */
  option: string
  /** The discussion poll that this option belongs to. */
  poll?: DiscussionPoll | null
  /** The total number of votes that have been cast for this option. */
  totalVoteCount: Int
  /** Indicates if the viewer has voted for this option in the poll. */
  viewerHasVoted: boolean
}
/** The connection type for DiscussionPollOption. */
export interface DiscussionPollOptionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (DiscussionPollOptionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (DiscussionPollOption | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface DiscussionPollOptionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: DiscussionPollOption | null
}
/** Autogenerated return type of DismissPullRequestReview. */
export interface DismissPullRequestReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The dismissed pull request review. */
  pullRequestReview?: PullRequestReview | null
}
/** Autogenerated return type of DismissRepositoryVulnerabilityAlert. */
export interface DismissRepositoryVulnerabilityAlertPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert?: RepositoryVulnerabilityAlert | null
}
/** A draft issue within a project. */
export interface DraftIssue extends Node {
  __typename?: string
  /** A list of users to assigned to this draft issue. */
  assignees: UserConnection
  /** The body of the draft issue. */
  body: string
  /** The body of the draft issue rendered to HTML. */
  bodyHTML: HTML
  /** The body of the draft issue rendered to text. */
  bodyText: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created this draft issue. */
  creator?: Actor | null
  /** The Node ID of the DraftIssue object */
  id: ID
  /** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
  projectV2Items: ProjectV2ItemConnection
  /** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
  projectsV2: ProjectV2Connection
  /** The title of the draft issue */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** Autogenerated return type of EnablePullRequestAutoMerge. */
export interface EnablePullRequestAutoMergePayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request auto-merge was enabled on. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of EnqueuePullRequest. */
export interface EnqueuePullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The merge queue entry for the enqueued pull request. */
  mergeQueueEntry?: MergeQueueEntry | null
}
/** An account to manage multiple organizations with consolidated policy and billing. */
export interface Enterprise extends AnnouncementBannerI, Node {
  __typename?: string
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: string | null
  /** The announcement banner set on this enterprise, if any. Only visible to members of the enterprise. */
  announcementBanner?: AnnouncementBanner | null
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: DateTime | null
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: DateTime | null
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: boolean | null
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl: URI
  /** The enterprise's billing email. */
  billingEmail?: string | null
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo?: EnterpriseBillingInfo | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The description of the enterprise. */
  description?: string | null
  /** The description of the enterprise as HTML. */
  descriptionHTML: HTML
  /** The Node ID of the Enterprise object */
  id: ID
  /** The location of the enterprise. */
  location?: string | null
  /** A list of users who are members of this enterprise. */
  members: EnterpriseMemberConnection
  /** The name of the enterprise. */
  name: string
  /** A list of organizations that belong to this enterprise. */
  organizations: OrganizationConnection
  /** Enterprise information visible to enterprise owners or enterprise owners'
   * personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
  ownerInfo?: EnterpriseOwnerInfo | null
  /** The raw content of the enterprise README. */
  readme?: string | null
  /** The content of the enterprise README as HTML. */
  readmeHTML: HTML
  /** The HTTP path for this enterprise. */
  resourcePath: URI
  /** Returns a single ruleset from the current enterprise by ID. */
  ruleset?: RepositoryRuleset | null
  /** A list of rulesets for this enterprise. */
  rulesets?: RepositoryRulesetConnection | null
  /** The URL-friendly identifier for the enterprise. */
  slug: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this enterprise. */
  url: URI
  /** A list of repositories that belong to users. Only available for enterprises with Enterprise Managed Users. */
  userNamespaceRepositories: UserNamespaceRepositoryConnection
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin: boolean
  /** The URL of the enterprise website. */
  websiteUrl?: URI | null
}
/** The connection type for User. */
export interface EnterpriseAdministratorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseAdministratorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: User | null
  /** The role of the administrator. */
  role: EnterpriseAdministratorRole
}
/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitation extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The email of the person who was invited to the enterprise. */
  email?: string | null
  /** The enterprise the invitation is for. */
  enterprise: Enterprise
  /** The Node ID of the EnterpriseAdministratorInvitation object */
  id: ID
  /** The user who was invited to the enterprise. */
  invitee?: User | null
  /** The user who created the invitation. */
  inviter?: User | null
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role: EnterpriseAdministratorRole
}
/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseAdministratorInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseAdministratorInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseAdministratorInvitation | null
}
/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryData {
  __typename?: string
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
}
/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfo {
  __typename?: string
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount: Int
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks: Int
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota: Float
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage: Float
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage: Int
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota: Float
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage: Float
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage: Int
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses: Int
  /** The total number of licenses allocated. */
  totalLicenses: Int
}
/** The connection type for Enterprise. */
export interface EnterpriseConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Enterprise | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Enterprise | null
}
/** The connection type for OrganizationInvitation. */
export interface EnterpriseFailedInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseFailedInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (OrganizationInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Int
}
/** A failed invitation to be a member in an enterprise organization. */
export interface EnterpriseFailedInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: OrganizationInvitation | null
}
/** An identity provider configured to provision identities for an enterprise.
 * Visible to enterprise owners or enterprise owners' personal access tokens
 * (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseIdentityProvider extends Node {
  __typename?: string
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod?: SamlDigestAlgorithm | null
  /** The enterprise this identity provider belongs to. */
  enterprise?: Enterprise | null
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection
  /** The Node ID of the EnterpriseIdentityProvider object */
  id: ID
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate?: X509Certificate | null
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer?: string | null
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes?: string[] | null
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod?: SamlSignatureAlgorithm | null
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl?: URI | null
}
/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseMemberEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseMember | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseMember | null
}
/** An invitation for a user to become an unaffiliated member of an enterprise. */
export interface EnterpriseMemberInvitation extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The email of the person who was invited to the enterprise. */
  email?: string | null
  /** The enterprise the invitation is for. */
  enterprise: Enterprise
  /** The Node ID of the EnterpriseMemberInvitation object */
  id: ID
  /** The user who was invited to the enterprise. */
  invitee?: User | null
  /** The user who created the invitation. */
  inviter?: User | null
}
/** The connection type for EnterpriseMemberInvitation. */
export interface EnterpriseMemberInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseMemberInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseMemberInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseMemberInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseMemberInvitation | null
}
/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseOrganizationMembershipEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Organization | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Organization | null
  /** The role of the user in the enterprise membership. */
  role: EnterpriseUserAccountMembershipRole
}
/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseOutsideCollaboratorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: User | null
  /** The enterprise organization repositories this user is a member of. */
  repositories: EnterpriseRepositoryInfoConnection
}
/** Enterprise information visible to enterprise owners or enterprise owners'
 * personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseOwnerInfo {
  __typename?: string
  /** A list of all of the administrators for this enterprise. */
  admins: EnterpriseAdministratorConnection
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled: UserConnection
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist: boolean
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection
  /** The value for the allow private repository forking policy on the enterprise. */
  allowPrivateRepositoryForkingSettingPolicyValue?: EnterpriseAllowPrivateRepositoryForkingPolicyValue | null
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection
  /** A list of domains owned by the enterprise. Visible to enterprise owners or
   * enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  domains: VerifiableDomainConnection
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations: EnterpriseServerInstallationConnection
  /** A list of failed invitations in the enterprise. */
  failedInvitations: EnterpriseFailedInvitationConnection
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue
  /** The IP addresses that are allowed to access resources owned by the enterprise.
   * Visible to enterprise owners or enterprise owners' personal access tokens
   * (classic) with admin:enterprise scope. */
  ipAllowListEntries: IpAllowListEntryConnection
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission: boolean
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement: boolean
  /** The setting value for whether organization members with admin permissions on a
   * repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting?: boolean | null
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting?: boolean | null
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting?: boolean | null
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting?: EnterpriseMembersCanCreateRepositoriesSettingValue | null
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider?: OIDCProvider | null
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations: OrganizationConnection
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators: EnterpriseOutsideCollaboratorConnection
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations: RepositoryInvitationConnection
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection
  /** A list of pending unaffiliated member invitations for the enterprise. */
  pendingUnaffiliatedMemberInvitations: EnterpriseMemberInvitationConnection
  /** The setting value for whether deploy keys are enabled for repositories in organizations in this enterprise. */
  repositoryDeployKeySetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided deploy keys setting value. */
  repositoryDeployKeySettingOrganizations: OrganizationConnection
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations: OrganizationConnection
  /** The SAML Identity Provider for the enterprise. */
  samlIdentityProvider?: EnterpriseIdentityProvider | null
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations: OrganizationConnection
  /** A list of members with a support entitlement. */
  supportEntitlements: EnterpriseMemberConnection
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations: OrganizationConnection
  /** The setting value for what methods of two-factor authentication the enterprise prevents its users from having. */
  twoFactorDisallowedMethodsSetting: EnterpriseDisallowedMethodsSettingValue
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations: OrganizationConnection
}
/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterprisePendingMemberInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (OrganizationInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Int
}
/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: OrganizationInvitation | null
}
/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfo extends Node {
  __typename?: string
  /** The Node ID of the EnterpriseRepositoryInfo object */
  id: ID
  /** Identifies if the repository is private or internal. */
  isPrivate: boolean
  /** The repository's name. */
  name: string
  /** The repository's name with owner. */
  nameWithOwner: string
}
/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseRepositoryInfoEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseRepositoryInfo | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseRepositoryInfo | null
}
/** An Enterprise Server installation. */
export interface EnterpriseServerInstallation extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName: string
  /** The host name of the Enterprise Server installation. */
  hostName: string
  /** The Node ID of the EnterpriseServerInstallation object */
  id: ID
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected: boolean
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** User accounts on this Enterprise Server installation. */
  userAccounts: EnterpriseServerUserAccountConnection
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection
}
/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseServerInstallationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseServerInstallation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseServerInstallationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseServerInstallation | null
}
/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationMembershipConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseServerInstallationMembershipEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseServerInstallation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An Enterprise Server installation that a user is a member of. */
export interface EnterpriseServerInstallationMembershipEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseServerInstallation | null
  /** The role of the user in the enterprise membership. */
  role: EnterpriseUserAccountMembershipRole
}
/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccount extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** User emails belonging to this user account. */
  emails: EnterpriseServerUserAccountEmailConnection
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation: EnterpriseServerInstallation
  /** The Node ID of the EnterpriseServerUserAccount object */
  id: ID
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin: boolean
  /** The login of the user account on the Enterprise Server installation. */
  login: string
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName?: string | null
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt: DateTime
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId: Int
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseServerUserAccountEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseServerUserAccount | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccount | null
}
/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmail extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The email address. */
  email: string
  /** The Node ID of the EnterpriseServerUserAccountEmail object */
  id: ID
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary: boolean
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The user account to which the email belongs. */
  userAccount: EnterpriseServerUserAccount
}
/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseServerUserAccountEmailEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseServerUserAccountEmail | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccountEmail | null
}
/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUpload extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The enterprise to which this upload belongs. */
  enterprise: Enterprise
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation: EnterpriseServerInstallation
  /** The Node ID of the EnterpriseServerUserAccountsUpload object */
  id: ID
  /** The name of the file uploaded. */
  name: string
  /** The synchronization state of the upload */
  syncState: EnterpriseServerUserAccountsUploadSyncState
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnterpriseServerUserAccountsUploadEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (EnterpriseServerUserAccountsUpload | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccountsUpload | null
}
/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccount extends Actor, Node {
  __typename?: string
  /** A URL pointing to the enterprise user account's public avatar. */
  avatarUrl: URI
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The enterprise in which this user account exists. */
  enterprise: Enterprise
  /** A list of Enterprise Server installations this user is a member of. */
  enterpriseInstallations: EnterpriseServerInstallationMembershipConnection
  /** The Node ID of the EnterpriseUserAccount object */
  id: ID
  /** An identifier for the enterprise user account, a login or email address */
  login: string
  /** The name of the enterprise user account */
  name?: string | null
  /** A list of enterprise organizations this user is a member of. */
  organizations: EnterpriseOrganizationMembershipConnection
  /** The HTTP path for this user. */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this user. */
  url: URI
  /** The user within the enterprise. */
  user?: User | null
}
/** An environment. */
export interface Environment extends Node {
  __typename?: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Environment object */
  id: ID
  /** Indicates whether or not this environment is currently pinned to the repository */
  isPinned?: boolean | null
  /** The latest completed deployment with status success, failure, or error if it exists */
  latestCompletedDeployment?: Deployment | null
  /** The name of the environment */
  name: string
  /** The position of the environment if it is pinned, null if it is not pinned */
  pinnedPosition?: Int | null
  /** The protection rules defined for this environment */
  protectionRules: DeploymentProtectionRuleConnection
}
/** The connection type for Environment. */
export interface EnvironmentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (EnvironmentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Environment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface EnvironmentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Environment | null
}
/** The Exploit Prediction Scoring System */
export interface EPSS {
  __typename?: string
  /** The EPSS percentage represents the likelihood of a CVE being exploited. */
  percentage?: Float | null
  /** The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs. */
  percentile?: Float | null
}
/** An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
 * the organization, the external identity is visible to (1) organization owners,
 * (2) organization owners' personal access tokens (classic) with read:org or
 * admin:org scope, (3) GitHub App with an installation token with read or write
 * access to members. If SAML is configured on the enterprise, the external
 * identity is visible to (1) enterprise owners, (2) enterprise owners' personal
 * access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface ExternalIdentity extends Node {
  __typename?: string
  /** The GUID for this identity */
  guid: string
  /** The Node ID of the ExternalIdentity object */
  id: ID
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation?: OrganizationInvitation | null
  /** SAML Identity attributes */
  samlIdentity?: ExternalIdentitySamlAttributes | null
  /** SCIM Identity attributes */
  scimIdentity?: ExternalIdentityScimAttributes | null
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user?: User | null
}
/** An attribute for the External Identity attributes collection */
export interface ExternalIdentityAttribute {
  __typename?: string
  /** The attribute metadata as JSON */
  metadata?: string | null
  /** The attribute name */
  name: string
  /** The attribute value */
  value: string
}
/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ExternalIdentityEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ExternalIdentity | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ExternalIdentityEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ExternalIdentity | null
}
/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributes {
  __typename?: string
  /** SAML Identity attributes */
  attributes: ExternalIdentityAttribute[]
  /** The emails associated with the SAML identity */
  emails?: UserEmailMetadata[] | null
  /** Family name of the SAML identity */
  familyName?: string | null
  /** Given name of the SAML identity */
  givenName?: string | null
  /** The groups linked to this identity in IDP */
  groups?: string[] | null
  /** The NameID of the SAML identity */
  nameId?: string | null
  /** The userName of the SAML identity */
  username?: string | null
}
/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributes {
  __typename?: string
  /** The emails associated with the SCIM identity */
  emails?: UserEmailMetadata[] | null
  /** Family name of the SCIM identity */
  familyName?: string | null
  /** Given name of the SCIM identity */
  givenName?: string | null
  /** The groups linked to this identity in IDP */
  groups?: string[] | null
  /** The userName of the SCIM identity */
  username?: string | null
}
/** Prevent commits that include files with specified file extensions from being pushed to the commit graph. */
export interface FileExtensionRestrictionParameters {
  __typename?: string
  /** The file extensions that are restricted from being pushed to the commit graph. */
  restrictedFileExtensions: string[]
}
/** Prevent commits that include changes in specified file paths from being pushed to the commit graph. */
export interface FilePathRestrictionParameters {
  __typename?: string
  /** The file paths that are restricted from being pushed to the commit graph. */
  restrictedFilePaths: string[]
}
/** The connection type for User. */
export interface FollowerConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** The connection type for User. */
export interface FollowingConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Autogenerated return type of FollowOrganization. */
export interface FollowOrganizationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organization that was followed. */
  organization?: Organization | null
}
/** Autogenerated return type of FollowUser. */
export interface FollowUserPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The user that was followed. */
  user?: User | null
}
/** A funding platform link for a repository. */
export interface FundingLink {
  __typename?: string
  /** The funding platform this link is for. */
  platform: FundingPlatform
  /** The configured URL for this funding link. */
  url: URI
}
/** A generic hovercard context with a message and icon */
export interface GenericHovercardContext extends HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
}
/** A Gist. */
export interface Gist extends Node, Starrable, UniformResourceLocatable {
  __typename?: string
  /** A list of comments associated with the gist */
  comments: GistCommentConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The gist description. */
  description?: string | null
  /** The files in this gist. */
  files?: (GistFile | null)[] | null
  /** A list of forks associated with the gist */
  forks: GistConnection
  /** The Node ID of the Gist object */
  id: ID
  /** Identifies if the gist is a fork. */
  isFork: boolean
  /** Whether the gist is public or not. */
  isPublic: boolean
  /** The gist name. */
  name: string
  /** The gist owner. */
  owner?: RepositoryOwner | null
  /** Identifies when the gist was last pushed to. */
  pushedAt?: DateTime | null
  /** The HTML path to this resource. */
  resourcePath: URI
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount: Int
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this Gist. */
  url: URI
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: boolean
}
/** Represents a comment on an Gist. */
export interface GistComment extends Comment, Deletable, Minimizable, Node, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the gist. */
  authorAssociation: CommentAuthorAssociation
  /** Identifies the comment body. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The associated gist. */
  gist: Gist
  /** The Node ID of the GistComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** The connection type for GistComment. */
export interface GistCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (GistCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (GistComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface GistCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: GistComment | null
}
/** The connection type for Gist. */
export interface GistConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (GistEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Gist | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface GistEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Gist | null
}
/** A file in a gist. */
export interface GistFile {
  __typename?: string
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName?: string | null
  /** The gist file encoding. */
  encoding?: string | null
  /** The file extension from the file name. */
  extension?: string | null
  /** Indicates if this file is an image. */
  isImage: boolean
  /** Whether the file's contents were truncated. */
  isTruncated: boolean
  /** The programming language this file is written in. */
  language?: Language | null
  /** The gist file name. */
  name?: string | null
  /** The gist file size in bytes. */
  size?: Int | null
  /** UTF8 text data or null if the file is binary */
  text?: string | null
}
/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActor {
  __typename?: string
  /** A URL pointing to the author's public avatar. */
  avatarUrl: URI
  /** The timestamp of the Git action (authoring or committing). */
  date?: GitTimestamp | null
  /** The email in the Git commit. */
  email?: string | null
  /** The name in the Git commit. */
  name?: string | null
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user?: User | null
}
/** The connection type for GitActor. */
export interface GitActorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (GitActorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (GitActor | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface GitActorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: GitActor | null
}
/** Represents information about the GitHub instance. */
export interface GitHubMetadata {
  __typename?: string
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha: GitObjectID
  /** IP addresses that users connect to for git operations */
  gitIpAddresses?: string[] | null
  /** IP addresses that GitHub Enterprise Importer uses for outbound connections */
  githubEnterpriseImporterIpAddresses?: string[] | null
  /** IP addresses that service hooks are sent from */
  hookIpAddresses?: string[] | null
  /** IP addresses that the importer connects from */
  importerIpAddresses?: string[] | null
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable: boolean
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses?: string[] | null
}
/** Represents a Git object. */
export interface GitObject {
  __typename?: string
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: string
  /** The HTTP path for this Git object */
  commitResourcePath: URI
  /** The HTTP URL for this Git object */
  commitUrl: URI
  /** The Node ID of the GitObject object */
  id: ID
  /** The Git object ID */
  oid: GitObjectID
  /** The Repository the Git object belongs to */
  repository: Repository
}
/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignature {
  __typename?: string
  /** Email used to sign this object. */
  email: string
  /** True if the signature is valid and verified by GitHub. */
  isValid: boolean
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: string
  /** ASCII-armored signature header from object. */
  signature: string
  /** GitHub user corresponding to the email signing this commit. */
  signer?: User | null
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState
  /** The date the signature was verified, if valid */
  verifiedAt?: DateTime | null
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: boolean
}
/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignature extends GitSignature {
  __typename?: string
  /** Email used to sign this object. */
  email: string
  /** True if the signature is valid and verified by GitHub. */
  isValid: boolean
  /** Hex-encoded ID of the key that signed this object. */
  keyId?: string | null
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: string
  /** ASCII-armored signature header from object. */
  signature: string
  /** GitHub user corresponding to the email signing this commit. */
  signer?: User | null
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState
  /** The date the signature was verified, if valid */
  verifiedAt?: DateTime | null
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: boolean
}
/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole. */
export interface GrantEnterpriseOrganizationsMigratorRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organizations that had the migrator role applied to for the given user. */
  organizations?: OrganizationConnection | null
}
/** Autogenerated return type of GrantMigratorRole. */
export interface GrantMigratorRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Did the operation succeed? */
  success?: boolean | null
}
/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef?: Ref | null
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName: string
  /** The Node ID of the HeadRefDeletedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit?: Commit | null
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the HeadRefForcePushedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref?: Ref | null
}
/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the HeadRefRestoredEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
}
/** Detail needed to display a hovercard for a user */
export interface Hovercard {
  __typename?: string
  /** Each of the contexts for this hovercard */
  contexts: HovercardContext[]
}
/** An individual line of a hovercard */
export interface HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
}
/** Autogenerated return type of ImportProject. */
export interface ImportProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new Project! */
  project?: Project | null
}
/** Autogenerated return type of InviteEnterpriseAdmin. */
export interface InviteEnterpriseAdminPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The created enterprise administrator invitation. */
  invitation?: EnterpriseAdministratorInvitation | null
}
/** Autogenerated return type of InviteEnterpriseMember. */
export interface InviteEnterpriseMemberPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The created enterprise member invitation. */
  invitation?: EnterpriseMemberInvitation | null
}
/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntry extends Node {
  __typename?: string
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the IpAllowListEntry object */
  id: ID
  /** Whether the entry is currently active. */
  isActive: boolean
  /** The name of the IP allow list entry. */
  name?: string | null
  /** The owner of the IP allow list entry. */
  owner: IpAllowListOwner
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (IpAllowListEntryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (IpAllowListEntry | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface IpAllowListEntryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: IpAllowListEntry | null
}
/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface Issue extends Assignable, Closable, Comment, Deletable, Labelable, Lockable, Node, ProjectV2Owner, Reactable, RepositoryNode, Subscribable, SubscribableThread, UniformResourceLocatable, Updatable, UpdatableComment {
  __typename?: string
  /** Reason that the conversation was locked. */
  activeLockReason?: LockReason | null
  /** A list of Users assigned to this object. */
  assignees: UserConnection
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** Identifies the body of the issue. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The http path for this issue body */
  bodyResourcePath: URI
  /** Identifies the body of the issue rendered to text. */
  bodyText: string
  /** The http URL for this issue body */
  bodyUrl: URI
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** List of open pull requests referenced from this issue */
  closedByPullRequestsReferences?: PullRequestConnection | null
  /** A list of comments associated with the Issue. */
  comments: IssueCommentConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The hovercard information for this issue */
  hovercard: Hovercard
  /** The Node ID of the Issue object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  isPinned?: boolean | null
  /** Is this issue read by the viewer */
  isReadByViewer?: boolean | null
  /** A list of labels associated with the object. */
  labels?: LabelConnection | null
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Branches linked to this issue. */
  linkedBranches: LinkedBranchConnection
  /** `true` if the object is locked */
  locked: boolean
  /** Identifies the milestone associated with the issue. */
  milestone?: Milestone | null
  /** Identifies the issue number. */
  number: Int
  /** The parent entity of the issue. */
  parent?: Issue | null
  /** A list of Users that are participating in the Issue conversation. */
  participants: UserConnection
  /** List of project cards associated with this issue. */
  projectCards: ProjectCardConnection
  /** List of project items associated with this issue. */
  projectItems: ProjectV2ItemConnection
  /** Find a project by number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path for this issue */
  resourcePath: URI
  /** Identifies the state of the issue. */
  state: IssueState
  /** Identifies the reason for the issue state. */
  stateReason?: IssueStateReason | null
  /** A list of sub-issues associated with the Issue. */
  subIssues: IssueConnection
  /** Summary of the state of an issue's sub-issues */
  subIssuesSummary: SubIssuesSummary
  /** A list of events, comments, commits, etc. associated with the issue.
   *
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC. */
  timeline: IssueTimelineConnection
  /** A list of events, comments, commits, etc. associated with the issue. */
  timelineItems: IssueTimelineItemsConnection
  /** Identifies the issue title. */
  title: string
  /** Identifies the issue title rendered to HTML. */
  titleHTML: string
  /** A list of issues that track this issue */
  trackedInIssues: IssueConnection
  /** A list of issues tracked inside the current issue */
  trackedIssues: IssueConnection
  /** The number of tracked issues for this issue */
  trackedIssuesCount: Int
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this issue */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: ThreadSubscriptionFormAction | null
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: ThreadSubscriptionState | null
}
/** Represents a comment on an Issue. */
export interface IssueComment extends Comment, Deletable, Minimizable, Node, Reactable, RepositoryNode, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the IssueComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** Identifies the issue associated with the comment. */
  issue: Issue
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** Returns the pull request associated with the comment, if this comment was made on a
   * pull request. */
  pullRequest?: PullRequest | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path for this issue comment */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this issue comment */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** The connection type for IssueComment. */
export interface IssueCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (IssueCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (IssueComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface IssueCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: IssueComment | null
}
/** The connection type for Issue. */
export interface IssueConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (IssueEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Issue | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepository {
  __typename?: string
  /** The issue contributions. */
  contributions: CreatedIssueContributionConnection
  /** The repository in which the issues were opened. */
  repository: Repository
}
/** An edge in a connection. */
export interface IssueEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Issue | null
}
/** A repository issue template. */
export interface IssueTemplate {
  __typename?: string
  /** The template purpose. */
  about?: string | null
  /** The suggested assignees. */
  assignees: UserConnection
  /** The suggested issue body. */
  body?: string | null
  /** The template filename. */
  filename: string
  /** The suggested issue labels */
  labels?: LabelConnection | null
  /** The template name. */
  name: string
  /** The suggested issue title. */
  title?: string | null
}
/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (IssueTimelineItemEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (IssueTimelineItem | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface IssueTimelineItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: IssueTimelineItem | null
}
/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (IssueTimelineItemsEdge | null)[] | null
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Int
  /** A list of nodes. */
  nodes?: (IssueTimelineItems | null)[] | null
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Int
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: DateTime
}
/** An edge in a connection. */
export interface IssueTimelineItemsEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: IssueTimelineItems | null
}
/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export interface Label extends Node {
  __typename?: string
  /** Identifies the label color. */
  color: string
  /** Identifies the date and time when the label was created. */
  createdAt?: DateTime | null
  /** A brief description of this label. */
  description?: string | null
  /** The Node ID of the Label object */
  id: ID
  /** Indicates whether or not this is a default label. */
  isDefault: boolean
  /** A list of issues associated with this label. */
  issues: IssueConnection
  /** Identifies the label name. */
  name: string
  /** A list of pull requests associated with this label. */
  pullRequests: PullRequestConnection
  /** The repository associated with this label. */
  repository: Repository
  /** The HTTP path for this label. */
  resourcePath: URI
  /** Identifies the date and time when the label was last updated. */
  updatedAt?: DateTime | null
  /** The HTTP URL for this label. */
  url: URI
}
/** An object that can have labels assigned to it. */
export interface Labelable {
  __typename?: string
  /** A list of labels associated with the object. */
  labels?: LabelConnection | null
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel: boolean
}
/** The connection type for Label. */
export interface LabelConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (LabelEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Label | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the LabeledEvent object */
  id: ID
  /** Identifies the label associated with the 'labeled' event. */
  label: Label
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable
}
/** An edge in a connection. */
export interface LabelEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Label | null
}
/** Represents a given language found in repositories. */
export interface Language extends Node {
  __typename?: string
  /** The color defined for the current language. */
  color?: string | null
  /** The Node ID of the Language object */
  id: ID
  /** The name of the current language. */
  name: string
}
/** A list of languages associated with the parent. */
export interface LanguageConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (LanguageEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Language | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** The total size in bytes of files written in that language. */
  totalSize: Int
}
/** Represents the language of a repository. */
export interface LanguageEdge {
  __typename?: string
  cursor: string
  node: Language
  /** The number of bytes of code written in the language. */
  size: Int
}
/** A repository's open source license */
export interface License extends Node {
  __typename?: string
  /** The full text of the license */
  body: string
  /** The conditions set by the license */
  conditions: (LicenseRule | null)[]
  /** A human-readable description of the license */
  description?: string | null
  /** Whether the license should be featured */
  featured: boolean
  /** Whether the license should be displayed in license pickers */
  hidden: boolean
  /** The Node ID of the License object */
  id: ID
  /** Instructions on how to implement the license */
  implementation?: string | null
  /** The lowercased SPDX ID of the license */
  key: string
  /** The limitations set by the license */
  limitations: (LicenseRule | null)[]
  /** The license full name specified by <https://spdx.org/licenses> */
  name: string
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname?: string | null
  /** The permissions set by the license */
  permissions: (LicenseRule | null)[]
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense: boolean
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId?: string | null
  /** URL to the license on <https://choosealicense.com> */
  url?: URI | null
}
/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRule {
  __typename?: string
  /** A description of the rule */
  description: string
  /** The machine-readable rule key */
  key: string
  /** The human-readable rule label */
  label: string
}
/** A branch linked to an issue. */
export interface LinkedBranch extends Node {
  __typename?: string
  /** The Node ID of the LinkedBranch object */
  id: ID
  /** The branch's ref. */
  ref?: Ref | null
}
/** A list of branches linked to an issue. */
export interface LinkedBranchConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (LinkedBranchEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (LinkedBranch | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface LinkedBranchEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: LinkedBranch | null
}
/** Autogenerated return type of LinkProjectV2ToRepository. */
export interface LinkProjectV2ToRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository the project is linked to. */
  repository?: Repository | null
}
/** Autogenerated return type of LinkProjectV2ToTeam. */
export interface LinkProjectV2ToTeamPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The team the project is linked to */
  team?: Team | null
}
/** Autogenerated return type of LinkRepositoryToProject. */
export interface LinkRepositoryToProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The linked Project. */
  project?: Project | null
  /** The linked Repository. */
  repository?: Repository | null
}
/** An object that can be locked. */
export interface Lockable {
  __typename?: string
  /** Reason that the conversation was locked. */
  activeLockReason?: LockReason | null
  /** `true` if the object is locked */
  locked: boolean
}
/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the LockedEvent object */
  id: ID
  /** Reason that the conversation was locked (optional). */
  lockReason?: LockReason | null
  /** Object that was locked. */
  lockable: Lockable
}
/** Autogenerated return type of LockLockable. */
export interface LockLockablePayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item that was locked. */
  lockedRecord?: Lockable | null
}
/** A placeholder user for attribution of imported data on GitHub. */
export interface Mannequin extends Actor, Node, UniformResourceLocatable {
  __typename?: string
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: URI
  /** The user that has claimed the data attributed to this mannequin. */
  claimant?: User | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The mannequin's email on the source instance. */
  email?: string | null
  /** The Node ID of the Mannequin object */
  id: ID
  /** The username of the actor. */
  login: string
  /** The HTML path to this resource. */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The URL to this resource. */
  url: URI
}
/** A list of mannequins. */
export interface MannequinConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (MannequinEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Mannequin | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a mannequin. */
export interface MannequinEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Mannequin | null
}
/** Autogenerated return type of MarkDiscussionCommentAsAnswer. */
export interface MarkDiscussionCommentAsAnswerPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that includes the chosen comment. */
  discussion?: Discussion | null
}
/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: IssueOrPullRequest | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: IssueOrPullRequest | null
  /** The Node ID of the MarkedAsDuplicateEvent object */
  id: ID
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: boolean
}
/** A public description of a Marketplace category. */
export interface MarketplaceCategory extends Node {
  __typename?: string
  /** The category's description. */
  description?: string | null
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks?: string | null
  /** The Node ID of the MarketplaceCategory object */
  id: ID
  /** The category's name. */
  name: string
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount: Int
  /** The HTTP path for this Marketplace category. */
  resourcePath: URI
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount: Int
  /** The short name of the category used in its URL. */
  slug: string
  /** The HTTP URL for this Marketplace category. */
  url: URI
}
/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListing extends Node {
  __typename?: string
  /** The GitHub App this listing represents. */
  app?: App | null
  /** URL to the listing owner's company site. */
  companyUrl?: URI | null
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath: URI
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl: URI
  /** URL to the listing's documentation. */
  documentationUrl?: URI | null
  /** The listing's detailed description. */
  extendedDescription?: string | null
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML: HTML
  /** The listing's introductory description. */
  fullDescription: string
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML: HTML
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans: boolean
  /** Does this listing have a terms of service link? */
  hasTermsOfService: boolean
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner: boolean
  /** A technical description of how this app works with GitHub. */
  howItWorks?: string | null
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML: HTML
  /** The Node ID of the MarketplaceListing object */
  id: ID
  /** URL to install the product to the viewer's account or organization. */
  installationUrl?: URI | null
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer: boolean
  /** Whether this listing has been removed from the Marketplace. */
  isArchived: boolean
  /** Whether this listing is still an editable draft that has not been submitted
   * for review and is not publicly visible in the Marketplace. */
  isDraft: boolean
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid: boolean
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic: boolean
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected: boolean
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified: boolean
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending: boolean
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft: boolean
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified: boolean
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified: boolean
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: string
  /** URL for the listing's logo image. */
  logoUrl?: URI | null
  /** The listing's full name. */
  name: string
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription: string
  /** URL to the listing's detailed pricing. */
  pricingUrl?: URI | null
  /** The category that best describes the listing. */
  primaryCategory: MarketplaceCategory
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl: URI
  /** The HTTP path for the Marketplace listing. */
  resourcePath: URI
  /** The URLs for the listing's screenshots. */
  screenshotUrls: (string | null)[]
  /** An alternate category that describes the listing. */
  secondaryCategory?: MarketplaceCategory | null
  /** The listing's very short description. */
  shortDescription: string
  /** The short name of the listing used in its URL. */
  slug: string
  /** URL to the listing's status page. */
  statusUrl?: URI | null
  /** An email address for support for this listing's app. */
  supportEmail?: string | null
  /** Either a URL or an email address for support for this listing's app, may
   * return an empty string for listings that do not require a support URL. */
  supportUrl: URI
  /** URL to the listing's terms of service. */
  termsOfServiceUrl?: URI | null
  /** The HTTP URL for the Marketplace listing. */
  url: URI
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans: boolean
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove: boolean
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist: boolean
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit: boolean
  /** Can the current viewer edit the primary and secondary category of this
   * Marketplace listing. */
  viewerCanEditCategories: boolean
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans: boolean
  /** Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again. */
  viewerCanRedraft: boolean
  /** Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely. */
  viewerCanReject: boolean
  /** Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified. */
  viewerCanRequestApproval: boolean
  /** Indicates whether the current user has an active subscription to this Marketplace listing. */
  viewerHasPurchased: boolean
  /** Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns. */
  viewerHasPurchasedForAllOrganizations: boolean
  /** Does the current viewer role allow them to administer this Marketplace listing. */
  viewerIsListingAdmin: boolean
}
/** Look up Marketplace Listings */
export interface MarketplaceListingConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (MarketplaceListingEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (MarketplaceListing | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface MarketplaceListingEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: MarketplaceListing | null
}
/** Autogenerated return type of MarkFileAsViewed. */
export interface MarkFileAsViewedPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated pull request. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of MarkProjectV2AsTemplate. */
export interface MarkProjectV2AsTemplatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of MarkPullRequestReadyForReview. */
export interface MarkPullRequestReadyForReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that is ready for review. */
  pullRequest?: PullRequest | null
}
/** Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph. */
export interface MaxFilePathLengthParameters {
  __typename?: string
  /** The maximum amount of characters allowed in file paths */
  maxFilePathLength: Int
}
/** Prevent commits that exceed a specified file size limit from being pushed to the commit. */
export interface MaxFileSizeParameters {
  __typename?: string
  /** The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */
  maxFileSize: Int
}
/** Represents a member feature request notification */
export interface MemberFeatureRequestNotification extends Node {
  __typename?: string
  /** Represents member feature request body containing entity name and the number of feature requests */
  body: string
  /** The Node ID of the MemberFeatureRequestNotification object */
  id: ID
  /** Represents member feature request notification title */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the MembersCanDeleteReposClearAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the MembersCanDeleteReposDisableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the MembersCanDeleteReposEnableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Entities that have members who can set status messages. */
export interface MemberStatusable {
  __typename?: string
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection
}
/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the MentionedEvent object */
  id: ID
}
/** Autogenerated return type of MergeBranch. */
export interface MergeBranchPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The resulting merge Commit. */
  mergeCommit?: Commit | null
}
/** Represents a 'merged' event on a given pull request. */
export interface MergedEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the commit associated with the `merge` event. */
  commit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the MergedEvent object */
  id: ID
  /** Identifies the Ref associated with the `merge` event. */
  mergeRef?: Ref | null
  /** Identifies the name of the Ref associated with the `merge` event. */
  mergeRefName: string
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** The HTTP path for this merged event. */
  resourcePath: URI
  /** The HTTP URL for this merged event. */
  url: URI
}
/** Autogenerated return type of MergePullRequest. */
export interface MergePullRequestPayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that was merged. */
  pullRequest?: PullRequest | null
}
/** The queue of pull request entries to be merged into a protected branch in a repository. */
export interface MergeQueue extends Node {
  __typename?: string
  /** The configuration for this merge queue */
  configuration?: MergeQueueConfiguration | null
  /** The entries in the queue */
  entries?: MergeQueueEntryConnection | null
  /** The Node ID of the MergeQueue object */
  id: ID
  /** The estimated time in seconds until a newly added entry would be merged */
  nextEntryEstimatedTimeToMerge?: Int | null
  /** The repository this merge queue belongs to */
  repository?: Repository | null
  /** The HTTP path for this merge queue */
  resourcePath: URI
  /** The HTTP URL for this merge queue */
  url: URI
}
/** Configuration for a MergeQueue */
export interface MergeQueueConfiguration {
  __typename?: string
  /** The amount of time in minutes to wait for a check response before considering it a failure. */
  checkResponseTimeout?: Int | null
  /** The maximum number of entries to build at once. */
  maximumEntriesToBuild?: Int | null
  /** The maximum number of entries to merge at once. */
  maximumEntriesToMerge?: Int | null
  /** The merge method to use for this queue. */
  mergeMethod?: PullRequestMergeMethod | null
  /** The strategy to use when merging entries. */
  mergingStrategy?: MergeQueueMergingStrategy | null
  /** The minimum number of entries required to merge at once. */
  minimumEntriesToMerge?: Int | null
  /** The amount of time in minutes to wait before ignoring the minumum number of
   * entries in the queue requirement and merging a collection of entries */
  minimumEntriesToMergeWaitTime?: Int | null
}
/** Entries in a MergeQueue */
export interface MergeQueueEntry extends Node {
  __typename?: string
  /** The base commit for this entry */
  baseCommit?: Commit | null
  /** The date and time this entry was added to the merge queue */
  enqueuedAt: DateTime
  /** The actor that enqueued this entry */
  enqueuer: Actor
  /** The estimated time in seconds until this entry will be merged */
  estimatedTimeToMerge?: Int | null
  /** The head commit for this entry */
  headCommit?: Commit | null
  /** The Node ID of the MergeQueueEntry object */
  id: ID
  /** Whether this pull request should jump the queue */
  jump: boolean
  /** The merge queue that this entry belongs to */
  mergeQueue?: MergeQueue | null
  /** The position of this entry in the queue */
  position: Int
  /** The pull request that will be added to a merge group */
  pullRequest?: PullRequest | null
  /** Does this pull request need to be deployed on its own */
  solo: boolean
  /** The state of this entry in the queue */
  state: MergeQueueEntryState
}
/** The connection type for MergeQueueEntry. */
export interface MergeQueueEntryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (MergeQueueEntryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (MergeQueueEntry | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface MergeQueueEntryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: MergeQueueEntry | null
}
/** Merges must be performed via a merge queue. */
export interface MergeQueueParameters {
  __typename?: string
  /** Maximum time for a required status check to report a conclusion. After this
   * much time has elapsed, checks that have not reported a conclusion will be
   * assumed to have failed */
  checkResponseTimeoutMinutes: Int
  /** When set to ALLGREEN, the merge commit created by merge queue for each PR in
   * the group must pass all required checks to merge. When set to HEADGREEN, only
   * the commit at the head of the merge group, i.e. the commit containing changes
   * from all of the PRs in the group, must pass its required checks to merge. */
  groupingStrategy: MergeQueueGroupingStrategy
  /** Limit the number of queued pull requests requesting checks and workflow runs at the same time. */
  maxEntriesToBuild: Int
  /** The maximum number of PRs that will be merged together in a group. */
  maxEntriesToMerge: Int
  /** Method to use when merging changes from queued pull requests. */
  mergeMethod: MergeQueueMergeMethod
  /** The minimum number of PRs that will be merged together in a group. */
  minEntriesToMerge: Int
  /** The time merge queue should wait after the first PR is added to the queue for
   * the minimum group size to be met. After this time has elapsed, the minimum
   * group size will be ignored and a smaller group will be merged. */
  minEntriesToMergeWaitMinutes: Int
}
/** Represents a GitHub Enterprise Importer (GEI) migration. */
export interface Migration {
  __typename?: string
  /** The migration flag to continue on error. */
  continueOnError: boolean
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: string | null
  /** The reason the migration failed. */
  failureReason?: string | null
  /** The Node ID of the Migration object */
  id: ID
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: URI | null
  /** The migration source. */
  migrationSource: MigrationSource
  /** The target repository name. */
  repositoryName: string
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl: URI
  /** The migration state. */
  state: MigrationState
  /** The number of warnings encountered for this migration. To review the warnings,
   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount: Int
}
/** A GitHub Enterprise Importer (GEI) migration source. */
export interface MigrationSource extends Node {
  __typename?: string
  /** The Node ID of the MigrationSource object */
  id: ID
  /** The migration source name. */
  name: string
  /** The migration source type. */
  type: MigrationSourceType
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url: URI
}
/** Represents a Milestone object on a given repository. */
export interface Milestone extends Closable, Node, UniformResourceLocatable {
  __typename?: string
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the actor who created the milestone. */
  creator?: Actor | null
  /** Identifies the description of the milestone. */
  description?: string | null
  /** Identifies the due date of the milestone. */
  dueOn?: DateTime | null
  /** The Node ID of the Milestone object */
  id: ID
  /** A list of issues associated with the milestone. */
  issues: IssueConnection
  /** Identifies the number of the milestone. */
  number: Int
  /** Identifies the percentage complete for the milestone */
  progressPercentage: Float
  /** A list of pull requests associated with the milestone. */
  pullRequests: PullRequestConnection
  /** The repository associated with this milestone. */
  repository: Repository
  /** The HTTP path for this milestone */
  resourcePath: URI
  /** Identifies the state of the milestone. */
  state: MilestoneState
  /** Identifies the title of the milestone. */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this milestone */
  url: URI
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
}
/** The connection type for Milestone. */
export interface MilestoneConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (MilestoneEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Milestone | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the MilestonedEvent object */
  id: ID
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle: string
  /** Object referenced by event. */
  subject: MilestoneItem
}
/** An edge in a connection. */
export interface MilestoneEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Milestone | null
}
/** Entities that can be minimized. */
export interface Minimizable {
  __typename?: string
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
}
/** Autogenerated return type of MinimizeComment. */
export interface MinimizeCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The comment that was minimized. */
  minimizedComment?: Minimizable | null
}
/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the MovedColumnsInProjectEvent object */
  id: ID
  /** Column name the issue or pull request was moved from. */
  previousProjectColumnName: string
  /** Project referenced by event. */
  project?: Project | null
  /** Project card referenced by this project event. */
  projectCard?: ProjectCard | null
  /** Column name the issue or pull request was moved to. */
  projectColumnName: string
}
/** Autogenerated return type of MoveProjectCard. */
export interface MoveProjectCardPayload {
  __typename?: string
  /** The new edge of the moved card. */
  cardEdge?: ProjectCardEdge | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of MoveProjectColumn. */
export interface MoveProjectColumnPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new edge of the moved column. */
  columnEdge?: ProjectColumnEdge | null
}
/** The root query for implementing GraphQL mutations. */
export interface Mutation {
  __typename?: string
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations?: AbortQueuedMigrationsPayload | null
  /** Abort a repository migration queued or in progress. */
  abortRepositoryMigration?: AbortRepositoryMigrationPayload | null
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation?: AcceptEnterpriseAdministratorInvitationPayload | null
  /** Accepts a pending invitation for a user to become an unaffiliated member of an enterprise. */
  acceptEnterpriseMemberInvitation?: AcceptEnterpriseMemberInvitationPayload | null
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion?: AcceptTopicSuggestionPayload | null
  /** Access user namespace repository for a temporary duration. */
  accessUserNamespaceRepository?: AccessUserNamespaceRepositoryPayload | null
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable?: AddAssigneesToAssignablePayload | null
  /** Adds a comment to an Issue or Pull Request. */
  addComment?: AddCommentPayload | null
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment?: AddDiscussionCommentPayload | null
  /** Vote for an option in a discussion poll. */
  addDiscussionPollVote?: AddDiscussionPollVotePayload | null
  /** Adds enterprise members to an organization within the enterprise. */
  addEnterpriseOrganizationMember?: AddEnterpriseOrganizationMemberPayload | null
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement?: AddEnterpriseSupportEntitlementPayload | null
  /** Adds labels to a labelable object. */
  addLabelsToLabelable?: AddLabelsToLabelablePayload | null
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard?: AddProjectCardPayload | null
  /** Adds a column to a Project. */
  addProjectColumn?: AddProjectColumnPayload | null
  /** Creates a new draft issue and add it to a Project. */
  addProjectV2DraftIssue?: AddProjectV2DraftIssuePayload | null
  /** Links an existing content instance to a Project. */
  addProjectV2ItemById?: AddProjectV2ItemByIdPayload | null
  /** Adds a review to a Pull Request. */
  addPullRequestReview?: AddPullRequestReviewPayload | null
  /** Adds a comment to a review. */
  addPullRequestReviewComment?: AddPullRequestReviewCommentPayload | null
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread?: AddPullRequestReviewThreadPayload | null
  /** Adds a reply to an existing Pull Request Review Thread. */
  addPullRequestReviewThreadReply?: AddPullRequestReviewThreadReplyPayload | null
  /** Adds a reaction to a subject. */
  addReaction?: AddReactionPayload | null
  /** Adds a star to a Starrable. */
  addStar?: AddStarPayload | null
  /** Adds a sub-issue to a given issue */
  addSubIssue?: AddSubIssuePayload | null
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote?: AddUpvotePayload | null
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain?: AddVerifiableDomainPayload | null
  /** Approve all pending deployments under one or more environments */
  approveDeployments?: ApproveDeploymentsPayload | null
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain?: ApproveVerifiableDomainPayload | null
  /** Archives a ProjectV2Item */
  archiveProjectV2Item?: ArchiveProjectV2ItemPayload | null
  /** Marks a repository as archived. */
  archiveRepository?: ArchiveRepositoryPayload | null
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation?: CancelEnterpriseAdminInvitationPayload | null
  /** Cancels a pending invitation for an unaffiliated member to join an enterprise. */
  cancelEnterpriseMemberInvitation?: CancelEnterpriseMemberInvitationPayload | null
  /** Cancel an active sponsorship. */
  cancelSponsorship?: CancelSponsorshipPayload | null
  /** Update your status on GitHub. */
  changeUserStatus?: ChangeUserStatusPayload | null
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable?: ClearLabelsFromLabelablePayload | null
  /** This mutation clears the value of a field for an item in a Project. Currently
   * only text, number, date, assignees, labels, single-select, iteration and
   * milestone fields are supported. */
  clearProjectV2ItemFieldValue?: ClearProjectV2ItemFieldValuePayload | null
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject?: CloneProjectPayload | null
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository?: CloneTemplateRepositoryPayload | null
  /** Close a discussion. */
  closeDiscussion?: CloseDiscussionPayload | null
  /** Close an issue. */
  closeIssue?: CloseIssuePayload | null
  /** Close a pull request. */
  closePullRequest?: ClosePullRequestPayload | null
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue?: ConvertProjectCardNoteToIssuePayload | null
  /** Converts a projectV2 draft issue item to an issue. */
  convertProjectV2DraftIssueItemToIssue?: ConvertProjectV2DraftIssueItemToIssuePayload | null
  /** Converts a pull request to draft */
  convertPullRequestToDraft?: ConvertPullRequestToDraftPayload | null
  /** Copy a project. */
  copyProjectV2?: CopyProjectV2Payload | null
  /** Invites a user to claim reattributable data */
  createAttributionInvitation?: CreateAttributionInvitationPayload | null
  /** Create a new branch protection rule */
  createBranchProtectionRule?: CreateBranchProtectionRulePayload | null
  /** Create a check run. */
  createCheckRun?: CreateCheckRunPayload | null
  /** Create a check suite */
  createCheckSuite?: CreateCheckSuitePayload | null
  /** Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface. */
  createCommitOnBranch?: CreateCommitOnBranchPayload | null
  /** Creates a new deployment event. */
  createDeployment?: CreateDeploymentPayload | null
  /** Create a deployment status. */
  createDeploymentStatus?: CreateDeploymentStatusPayload | null
  /** Create a discussion. */
  createDiscussion?: CreateDiscussionPayload | null
  /** Creates an organization as part of an enterprise account. A personal access
   * token used to create an organization is implicitly permitted to update the
   * organization it created, if the organization is part of an enterprise that has
   * SAML enabled or uses Enterprise Managed Users. If the organization is not part
   * of such an enterprise, and instead has SAML enabled for it individually, the
   * token will then require SAML authorization to continue working against that organization. */
  createEnterpriseOrganization?: CreateEnterpriseOrganizationPayload | null
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment?: CreateEnvironmentPayload | null
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry?: CreateIpAllowListEntryPayload | null
  /** Creates a new issue. */
  createIssue?: CreateIssuePayload | null
  /** Creates a new label. */
  createLabel?: CreateLabelPayload | null
  /** Create a branch linked to an issue. */
  createLinkedBranch?: CreateLinkedBranchPayload | null
  /** Creates a GitHub Enterprise Importer (GEI) migration source. */
  createMigrationSource?: CreateMigrationSourcePayload | null
  /** Creates a new project. */
  createProject?: CreateProjectPayload | null
  /** Creates a new project. */
  createProjectV2?: CreateProjectV2Payload | null
  /** Create a new project field. */
  createProjectV2Field?: CreateProjectV2FieldPayload | null
  /** Creates a status update within a Project. */
  createProjectV2StatusUpdate?: CreateProjectV2StatusUpdatePayload | null
  /** Create a new pull request */
  createPullRequest?: CreatePullRequestPayload | null
  /** Create a new Git Ref. */
  createRef?: CreateRefPayload | null
  /** Create a new repository. */
  createRepository?: CreateRepositoryPayload | null
  /** Create a repository ruleset */
  createRepositoryRuleset?: CreateRepositoryRulesetPayload | null
  /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */
  createSponsorsListing?: CreateSponsorsListingPayload | null
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier?: CreateSponsorsTierPayload | null
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship?: CreateSponsorshipPayload | null
  /** Make many sponsorships for different sponsorable users or organizations at
   * once. Can only sponsor those who have a public GitHub Sponsors profile. */
  createSponsorships?: CreateSponsorshipsPayload | null
  /** Creates a new team discussion. */
  createTeamDiscussion?: CreateTeamDiscussionPayload | null
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment?: CreateTeamDiscussionCommentPayload | null
  /** Creates a new user list. */
  createUserList?: CreateUserListPayload | null
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion?: DeclineTopicSuggestionPayload | null
  /** Delete a branch protection rule */
  deleteBranchProtectionRule?: DeleteBranchProtectionRulePayload | null
  /** Deletes a deployment. */
  deleteDeployment?: DeleteDeploymentPayload | null
  /** Delete a discussion and all of its replies. */
  deleteDiscussion?: DeleteDiscussionPayload | null
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment?: DeleteDiscussionCommentPayload | null
  /** Deletes an environment */
  deleteEnvironment?: DeleteEnvironmentPayload | null
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry?: DeleteIpAllowListEntryPayload | null
  /** Deletes an Issue object. */
  deleteIssue?: DeleteIssuePayload | null
  /** Deletes an IssueComment object. */
  deleteIssueComment?: DeleteIssueCommentPayload | null
  /** Deletes a label. */
  deleteLabel?: DeleteLabelPayload | null
  /** Unlink a branch from an issue. */
  deleteLinkedBranch?: DeleteLinkedBranchPayload | null
  /** Delete a package version. */
  deletePackageVersion?: DeletePackageVersionPayload | null
  /** Deletes a project. */
  deleteProject?: DeleteProjectPayload | null
  /** Deletes a project card. */
  deleteProjectCard?: DeleteProjectCardPayload | null
  /** Deletes a project column. */
  deleteProjectColumn?: DeleteProjectColumnPayload | null
  /** Delete a project. */
  deleteProjectV2?: DeleteProjectV2Payload | null
  /** Delete a project field. */
  deleteProjectV2Field?: DeleteProjectV2FieldPayload | null
  /** Deletes an item from a Project. */
  deleteProjectV2Item?: DeleteProjectV2ItemPayload | null
  /** Deletes a project status update. */
  deleteProjectV2StatusUpdate?: DeleteProjectV2StatusUpdatePayload | null
  /** Deletes a project workflow. */
  deleteProjectV2Workflow?: DeleteProjectV2WorkflowPayload | null
  /** Deletes a pull request review. */
  deletePullRequestReview?: DeletePullRequestReviewPayload | null
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment?: DeletePullRequestReviewCommentPayload | null
  /** Delete a Git Ref. */
  deleteRef?: DeleteRefPayload | null
  /** Delete a repository ruleset */
  deleteRepositoryRuleset?: DeleteRepositoryRulesetPayload | null
  /** Deletes a team discussion. */
  deleteTeamDiscussion?: DeleteTeamDiscussionPayload | null
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment?: DeleteTeamDiscussionCommentPayload | null
  /** Deletes a user list. */
  deleteUserList?: DeleteUserListPayload | null
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain?: DeleteVerifiableDomainPayload | null
  /** Remove a pull request from the merge queue. */
  dequeuePullRequest?: DequeuePullRequestPayload | null
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge?: DisablePullRequestAutoMergePayload | null
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview?: DismissPullRequestReviewPayload | null
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert?: DismissRepositoryVulnerabilityAlertPayload | null
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge?: EnablePullRequestAutoMergePayload | null
  /** Add a pull request to the merge queue. */
  enqueuePullRequest?: EnqueuePullRequestPayload | null
  /** Follow an organization. */
  followOrganization?: FollowOrganizationPayload | null
  /** Follow a user. */
  followUser?: FollowUserPayload | null
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole?: GrantEnterpriseOrganizationsMigratorRolePayload | null
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole?: GrantMigratorRolePayload | null
  /** Creates a new project by importing columns and a list of issues/PRs. */
  importProject?: ImportProjectPayload | null
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin?: InviteEnterpriseAdminPayload | null
  /** Invite someone to become an unaffiliated member of the enterprise. */
  inviteEnterpriseMember?: InviteEnterpriseMemberPayload | null
  /** Links a project to a repository. */
  linkProjectV2ToRepository?: LinkProjectV2ToRepositoryPayload | null
  /** Links a project to a team. */
  linkProjectV2ToTeam?: LinkProjectV2ToTeamPayload | null
  /** Creates a repository link for a project. */
  linkRepositoryToProject?: LinkRepositoryToProjectPayload | null
  /** Lock a lockable object */
  lockLockable?: LockLockablePayload | null
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer?: MarkDiscussionCommentAsAnswerPayload | null
  /** Mark a pull request file as viewed */
  markFileAsViewed?: MarkFileAsViewedPayload | null
  /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */
  markProjectV2AsTemplate?: MarkProjectV2AsTemplatePayload | null
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview?: MarkPullRequestReadyForReviewPayload | null
  /** Merge a head into a branch. */
  mergeBranch?: MergeBranchPayload | null
  /** Merge a pull request. */
  mergePullRequest?: MergePullRequestPayload | null
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment?: MinimizeCommentPayload | null
  /** Moves a project card to another place. */
  moveProjectCard?: MoveProjectCardPayload | null
  /** Moves a project column to another place. */
  moveProjectColumn?: MoveProjectColumnPayload | null
  /** Pin an environment to a repository */
  pinEnvironment?: PinEnvironmentPayload | null
  /** Pin an issue to a repository */
  pinIssue?: PinIssuePayload | null
  /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */
  publishSponsorsTier?: PublishSponsorsTierPayload | null
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: RegenerateEnterpriseIdentityProviderRecoveryCodesPayload | null
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken?: RegenerateVerifiableDomainTokenPayload | null
  /** Reject all pending deployments under one or more environments */
  rejectDeployments?: RejectDeploymentsPayload | null
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable?: RemoveAssigneesFromAssignablePayload | null
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin?: RemoveEnterpriseAdminPayload | null
  /** Removes the identity provider from an enterprise. Owners of enterprises both
   * with and without Enterprise Managed Users may use this mutation. */
  removeEnterpriseIdentityProvider?: RemoveEnterpriseIdentityProviderPayload | null
  /** Removes a user from all organizations within the enterprise */
  removeEnterpriseMember?: RemoveEnterpriseMemberPayload | null
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization?: RemoveEnterpriseOrganizationPayload | null
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement?: RemoveEnterpriseSupportEntitlementPayload | null
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable?: RemoveLabelsFromLabelablePayload | null
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator?: RemoveOutsideCollaboratorPayload | null
  /** Removes a reaction from a subject. */
  removeReaction?: RemoveReactionPayload | null
  /** Removes a star from a Starrable. */
  removeStar?: RemoveStarPayload | null
  /** Removes a sub-issue from a given issue */
  removeSubIssue?: RemoveSubIssuePayload | null
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote?: RemoveUpvotePayload | null
  /** Reopen a discussion. */
  reopenDiscussion?: ReopenDiscussionPayload | null
  /** Reopen a issue. */
  reopenIssue?: ReopenIssuePayload | null
  /** Reopen a pull request. */
  reopenPullRequest?: ReopenPullRequestPayload | null
  /** Reorder a pinned repository environment */
  reorderEnvironment?: ReorderEnvironmentPayload | null
  /** Reprioritizes a sub-issue to a different position in the parent list. */
  reprioritizeSubIssue?: ReprioritizeSubIssuePayload | null
  /** Set review requests on a pull request. */
  requestReviews?: RequestReviewsPayload | null
  /** Rerequests an existing check suite. */
  rerequestCheckSuite?: RerequestCheckSuitePayload | null
  /** Marks a review thread as resolved. */
  resolveReviewThread?: ResolveReviewThreadPayload | null
  /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */
  retireSponsorsTier?: RetireSponsorsTierPayload | null
  /** Create a pull request that reverts the changes from a merged pull request. */
  revertPullRequest?: RevertPullRequestPayload | null
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole?: RevokeEnterpriseOrganizationsMigratorRolePayload | null
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole?: RevokeMigratorRolePayload | null
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider?: SetEnterpriseIdentityProviderPayload | null
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit?: SetOrganizationInteractionLimitPayload | null
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit?: SetRepositoryInteractionLimitPayload | null
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit?: SetUserInteractionLimitPayload | null
  /** Starts a GitHub Enterprise Importer organization migration. */
  startOrganizationMigration?: StartOrganizationMigrationPayload | null
  /** Starts a GitHub Enterprise Importer (GEI) repository migration. */
  startRepositoryMigration?: StartRepositoryMigrationPayload | null
  /** Submits a pending pull request review. */
  submitPullRequestReview?: SubmitPullRequestReviewPayload | null
  /** Transfer an organization from one enterprise to another enterprise. */
  transferEnterpriseOrganization?: TransferEnterpriseOrganizationPayload | null
  /** Transfer an issue to a different repository */
  transferIssue?: TransferIssuePayload | null
  /** Unarchives a ProjectV2Item */
  unarchiveProjectV2Item?: UnarchiveProjectV2ItemPayload | null
  /** Unarchives a repository. */
  unarchiveRepository?: UnarchiveRepositoryPayload | null
  /** Unfollow an organization. */
  unfollowOrganization?: UnfollowOrganizationPayload | null
  /** Unfollow a user. */
  unfollowUser?: UnfollowUserPayload | null
  /** Unlinks a project from a repository. */
  unlinkProjectV2FromRepository?: UnlinkProjectV2FromRepositoryPayload | null
  /** Unlinks a project to a team. */
  unlinkProjectV2FromTeam?: UnlinkProjectV2FromTeamPayload | null
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject?: UnlinkRepositoryFromProjectPayload | null
  /** Unlock a lockable object */
  unlockLockable?: UnlockLockablePayload | null
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer?: UnmarkDiscussionCommentAsAnswerPayload | null
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed?: UnmarkFileAsViewedPayload | null
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate?: UnmarkIssueAsDuplicatePayload | null
  /** Unmark a project as a template. */
  unmarkProjectV2AsTemplate?: UnmarkProjectV2AsTemplatePayload | null
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment?: UnminimizeCommentPayload | null
  /** Unpin a pinned issue from a repository */
  unpinIssue?: UnpinIssuePayload | null
  /** Marks a review thread as unresolved. */
  unresolveReviewThread?: UnresolveReviewThreadPayload | null
  /** Update a branch protection rule */
  updateBranchProtectionRule?: UpdateBranchProtectionRulePayload | null
  /** Update a check run */
  updateCheckRun?: UpdateCheckRunPayload | null
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences?: UpdateCheckSuitePreferencesPayload | null
  /** Update a discussion */
  updateDiscussion?: UpdateDiscussionPayload | null
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment?: UpdateDiscussionCommentPayload | null
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole?: UpdateEnterpriseAdministratorRolePayload | null
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload | null
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting?: UpdateEnterpriseDefaultRepositoryPermissionSettingPayload | null
  /** Sets whether deploy keys are allowed to be created and used for an enterprise. */
  updateEnterpriseDeployKeySetting?: UpdateEnterpriseDeployKeySettingPayload | null
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload | null
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload | null
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting?: UpdateEnterpriseMembersCanDeleteIssuesSettingPayload | null
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload | null
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload | null
  /** Sets whether or not an organization owner can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting?: UpdateEnterpriseMembersCanMakePurchasesSettingPayload | null
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload | null
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload | null
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting?: UpdateEnterpriseOrganizationProjectsSettingPayload | null
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole?: UpdateEnterpriseOwnerOrganizationRolePayload | null
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile?: UpdateEnterpriseProfilePayload | null
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting?: UpdateEnterpriseRepositoryProjectsSettingPayload | null
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting?: UpdateEnterpriseTeamDiscussionsSettingPayload | null
  /** Sets the two-factor authentication methods that users of an enterprise may not use. */
  updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting?: UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload | null
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload | null
  /** Updates an environment. */
  updateEnvironment?: UpdateEnvironmentPayload | null
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting?: UpdateIpAllowListEnabledSettingPayload | null
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry?: UpdateIpAllowListEntryPayload | null
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting?: UpdateIpAllowListForInstalledAppsEnabledSettingPayload | null
  /** Updates an Issue. */
  updateIssue?: UpdateIssuePayload | null
  /** Updates an IssueComment object. */
  updateIssueComment?: UpdateIssueCommentPayload | null
  /** Updates an existing label. */
  updateLabel?: UpdateLabelPayload | null
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting?: UpdateNotificationRestrictionSettingPayload | null
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting?: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload | null
  /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
  updateOrganizationWebCommitSignoffSetting?: UpdateOrganizationWebCommitSignoffSettingPayload | null
  /** Toggle the setting for your GitHub Sponsors profile that allows other GitHub
   * accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
   * Only applicable when you have a GitHub Sponsors profile and have connected
   * your GitHub account with Patreon. */
  updatePatreonSponsorability?: UpdatePatreonSponsorabilityPayload | null
  /** Updates an existing project. */
  updateProject?: UpdateProjectPayload | null
  /** Updates an existing project card. */
  updateProjectCard?: UpdateProjectCardPayload | null
  /** Updates an existing project column. */
  updateProjectColumn?: UpdateProjectColumnPayload | null
  /** Updates an existing project. */
  updateProjectV2?: UpdateProjectV2Payload | null
  /** Update the collaborators on a team or a project */
  updateProjectV2Collaborators?: UpdateProjectV2CollaboratorsPayload | null
  /** Updates a draft issue within a Project. */
  updateProjectV2DraftIssue?: UpdateProjectV2DraftIssuePayload | null
  /** Update a project field. */
  updateProjectV2Field?: UpdateProjectV2FieldPayload | null
  /** This mutation updates the value of a field for an item in a Project. Currently
   * only single-select, text, number, date, and iteration fields are supported. */
  updateProjectV2ItemFieldValue?: UpdateProjectV2ItemFieldValuePayload | null
  /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
  updateProjectV2ItemPosition?: UpdateProjectV2ItemPositionPayload | null
  /** Updates a status update within a Project. */
  updateProjectV2StatusUpdate?: UpdateProjectV2StatusUpdatePayload | null
  /** Update a pull request */
  updatePullRequest?: UpdatePullRequestPayload | null
  /** Merge or Rebase HEAD from upstream branch into pull request branch */
  updatePullRequestBranch?: UpdatePullRequestBranchPayload | null
  /** Updates the body of a pull request review. */
  updatePullRequestReview?: UpdatePullRequestReviewPayload | null
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment?: UpdatePullRequestReviewCommentPayload | null
  /** Update a Git Ref. */
  updateRef?: UpdateRefPayload | null
  /** Creates, updates and/or deletes multiple refs in a repository.
   *
   * This mutation takes a list of `RefUpdate`s and performs these updates
   * on the repository. All updates are performed atomically, meaning that
   * if one of them is rejected, no other ref will be modified.
   *
   * `RefUpdate.beforeOid` specifies that the given reference needs to point
   * to the given value before performing any updates. A value of
   * `0000000000000000000000000000000000000000` can be used to verify that
   * the references should not exist.
   *
   * `RefUpdate.afterOid` specifies the value that the given reference
   * will point to after performing all updates. A value of
   * `0000000000000000000000000000000000000000` can be used to delete a
   * reference.
   *
   * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
   * for the given reference will be allowed. */
  updateRefs?: UpdateRefsPayload | null
  /** Update information about a repository. */
  updateRepository?: UpdateRepositoryPayload | null
  /** Update a repository ruleset */
  updateRepositoryRuleset?: UpdateRepositoryRulesetPayload | null
  /** Sets whether contributors are required to sign off on web-based commits for a repository. */
  updateRepositoryWebCommitSignoffSetting?: UpdateRepositoryWebCommitSignoffSettingPayload | null
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences?: UpdateSponsorshipPreferencesPayload | null
  /** Updates the state for subscribable subjects. */
  updateSubscription?: UpdateSubscriptionPayload | null
  /** Updates a team discussion. */
  updateTeamDiscussion?: UpdateTeamDiscussionPayload | null
  /** Updates a discussion comment. */
  updateTeamDiscussionComment?: UpdateTeamDiscussionCommentPayload | null
  /** Updates team review assignment. */
  updateTeamReviewAssignment?: UpdateTeamReviewAssignmentPayload | null
  /** Update team repository. */
  updateTeamsRepository?: UpdateTeamsRepositoryPayload | null
  /** Replaces the repository's topics with the given topics. */
  updateTopics?: UpdateTopicsPayload | null
  /** Updates an existing user list. */
  updateUserList?: UpdateUserListPayload | null
  /** Updates which of the viewer's lists an item belongs to */
  updateUserListsForItem?: UpdateUserListsForItemPayload | null
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain?: VerifyVerifiableDomainPayload | null
}
/** An object with an ID. */
export interface Node {
  __typename?: string
  /** ID of the object. */
  id: ID
}
/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryData {
  __typename?: string
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
}
/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The application URL of the OAuth application. */
  applicationUrl?: URI | null
  /** The callback URL of the OAuth application. */
  callbackUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OauthApplicationCreateAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The rate limit of the OAuth application. */
  rateLimit?: Int | null
  /** The state of the OAuth application. */
  state?: OauthApplicationCreateAuditEntryState | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** An OIDC identity provider configured to provision identities for an enterprise.
 * Visible to enterprise owners or enterprise owners' personal access tokens
 * (classic) with read:enterprise or admin:enterprise scope. */
export interface OIDCProvider extends Node {
  __typename?: string
  /** The enterprise this identity provider belongs to. */
  enterprise?: Enterprise | null
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection
  /** The Node ID of the OIDCProvider object */
  id: ID
  /** The OIDC identity provider type */
  providerType: OIDCProviderType
  /** The id of the tenant this provider is attached to */
  tenantId: string
}
/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgAddBillingManagerAuditEntry object */
  id: ID
  /** The email address used to invite a billing manager for the organization. */
  invitationEmail?: string | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgAddMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The permission level of the member added to the organization. */
  permission?: OrgAddMemberAuditEntryPermission | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface Organization extends Actor, AnnouncementBannerI, MemberStatusable, Node, PackageOwner, ProfileOwner, ProjectOwner, ProjectV2Owner, ProjectV2Recent, RepositoryDiscussionAuthor, RepositoryDiscussionCommentAuthor, RepositoryOwner, Sponsorable, UniformResourceLocatable {
  __typename?: string
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: string | null
  /** The announcement banner set on this organization, if any. Only visible to members of the organization's enterprise. */
  announcementBanner?: AnnouncementBanner | null
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: DateTime | null
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: DateTime | null
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: boolean | null
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: boolean
  /** Identifies the date and time when the organization was archived. */
  archivedAt?: DateTime | null
  /** Audit log entries of the organization */
  auditLog: OrganizationAuditEntryConnection
  /** A URL pointing to the organization's public avatar. */
  avatarUrl: URI
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The organization's public profile description. */
  description?: string | null
  /** The organization's public profile description rendered to HTML. */
  descriptionHTML?: string | null
  /** A list of domains owned by the organization. */
  domains?: VerifiableDomainConnection | null
  /** The organization's public email. */
  email?: string | null
  /** A list of owners of the organization's enterprise account. */
  enterpriseOwners: OrganizationEnterpriseOwnerConnection
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Int
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: boolean
  /** The Node ID of the Organization object */
  id: ID
  /** The interaction ability settings for this organization. */
  interactionAbility?: RepositoryInteractionAbility | null
  /** The setting value for whether the organization has an IP allow list enabled. */
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue
  /** The IP addresses that are allowed to access resources owned by the organization. */
  ipAllowListEntries: IpAllowListEntryConnection
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy: boolean
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: boolean
  /** Whether the organization has verified its profile email and website. */
  isVerified: boolean
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection
  /** The organization's public profile location. */
  location?: string | null
  /** The organization's login name. */
  login: string
  /** A list of all mannequins for this organization. */
  mannequins: MannequinConnection
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection
  /** Members can fork private repositories in this organization */
  membersCanForkPrivateRepositories: boolean
  /** A list of users who are members of this organization. */
  membersWithRole: OrganizationMemberConnection
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Int
  /** The organization's public profile name. */
  name?: string | null
  /** The HTTP path creating a new team */
  newTeamResourcePath: URI
  /** The HTTP URL creating a new team */
  newTeamUrl: URI
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue
  /** The billing email for the organization. */
  organizationBillingEmail?: string | null
  /** A list of packages under the owner. */
  packages: PackageConnection
  /** A list of users who have been invited to join this organization. */
  pendingMembers: UserConnection
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Int
  /** Find project by number. */
  project?: Project | null
  /** Find a project by number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projects: ProjectConnection
  /** The HTTP path listing organization's projects */
  projectsResourcePath: URI
  /** The HTTP URL listing organization's projects */
  projectsUrl: URI
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection
  /** Find Repository. */
  repository?: Repository | null
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection
  /** A list of all repository migrations for this organization. */
  repositoryMigrations: RepositoryMigrationConnection
  /** When true the organization requires all members, billing managers, and outside
   * collaborators to enable two-factor authentication. */
  requiresTwoFactorAuthentication?: boolean | null
  /** The HTTP path for this organization. */
  resourcePath: URI
  /** Returns a single ruleset from the current organization by ID. */
  ruleset?: RepositoryRuleset | null
  /** A list of rulesets for this organization. */
  rulesets?: RepositoryRulesetConnection | null
  /** The Organization's SAML identity provider. Visible to (1) organization owners,
   * (2) organization owners' personal access tokens (classic) with read:org or
   * admin:org scope, (3) GitHub App with an installation token with read or write
   * access to members. */
  samlIdentityProvider?: OrganizationIdentityProvider | null
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListing | null
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: Sponsorship | null
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: Sponsorship | null
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer: SponsorshipConnection
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor: SponsorshipConnection
  /** Find an organization's team by its slug. */
  team?: Team | null
  /** A list of teams in this organization. */
  teams: TeamConnection
  /** The HTTP path listing organization's teams */
  teamsResourcePath: URI
  /** The HTTP URL listing organization's teams */
  teamsUrl: URI
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: Int | null
  /** The organization's Twitter username. */
  twitterUsername?: string | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this organization. */
  url: URI
  /** Organization is adminable by the viewer. */
  viewerCanAdminister: boolean
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: boolean
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: boolean
  /** Viewer can create repositories on this organization */
  viewerCanCreateRepositories: boolean
  /** Viewer can create teams on this organization. */
  viewerCanCreateTeams: boolean
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: boolean
  /** Viewer is an active member of this organization. */
  viewerIsAMember: boolean
  /** Whether or not this Organization is followed by the viewer. */
  viewerIsFollowing: boolean
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: boolean
  /** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
  webCommitSignoffRequired: boolean
  /** The organization's public profile URL. */
  websiteUrl?: URI | null
}
/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (OrganizationAuditEntryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (OrganizationAuditEntry | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryData {
  __typename?: string
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
}
/** An edge in a connection. */
export interface OrganizationAuditEntryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: OrganizationAuditEntry | null
}
/** A list of organizations managed by an enterprise. */
export interface OrganizationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (OrganizationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Organization | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface OrganizationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Organization | null
}
/** The connection type for User. */
export interface OrganizationEnterpriseOwnerConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (OrganizationEnterpriseOwnerEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An enterprise owner in the context of an organization that is part of the enterprise. */
export interface OrganizationEnterpriseOwnerEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: User | null
  /** The role of the owner with respect to the organization. */
  organizationRole: RoleInOrganization
}
/** An Identity Provider configured to provision SAML and SCIM identities for
 * Organizations. Visible to (1) organization owners, (2) organization owners'
 * personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
 * App with an installation token with read or write access to members. */
export interface OrganizationIdentityProvider extends Node {
  __typename?: string
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod?: URI | null
  /** External Identities provisioned by this Identity Provider */
  externalIdentities: ExternalIdentityConnection
  /** The Node ID of the OrganizationIdentityProvider object */
  id: ID
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate?: X509Certificate | null
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer?: string | null
  /** Organization this Identity Provider belongs to */
  organization?: Organization | null
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod?: URI | null
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl?: URI | null
}
/** An Invitation for a user to an organization. */
export interface OrganizationInvitation extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The email address of the user invited to the organization. */
  email?: string | null
  /** The Node ID of the OrganizationInvitation object */
  id: ID
  /** The source of the invitation. */
  invitationSource: OrganizationInvitationSource
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType: OrganizationInvitationType
  /** The user who was invited to the organization. */
  invitee?: User | null
  /** The user who created the invitation.
   *
   * @deprecated `inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC. */
  inviter: User
  /** The user who created the invitation. */
  inviterActor?: User | null
  /** The organization the invite is for */
  organization: Organization
  /** The user's pending role in the organization (e.g. member, owner). */
  role: OrganizationInvitationRole
}
/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (OrganizationInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (OrganizationInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface OrganizationInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: OrganizationInvitation | null
}
/** A list of users who belong to the organization. */
export interface OrganizationMemberConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (OrganizationMemberEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user within an organization. */
export interface OrganizationMemberEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled?: boolean | null
  /** The item at the end of the edge. */
  node?: User | null
  /** The role this user has in the organization. */
  role?: OrganizationMemberRole | null
}
/** A GitHub Enterprise Importer (GEI) organization migration. */
export interface OrganizationMigration extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: string | null
  /** The reason the organization migration failed. */
  failureReason?: string | null
  /** The Node ID of the OrganizationMigration object */
  id: ID
  /** The remaining amount of repos to be migrated. */
  remainingRepositoriesCount?: Int | null
  /** The name of the source organization to be migrated. */
  sourceOrgName: string
  /** The URL of the source organization to migrate. */
  sourceOrgUrl: URI
  /** The migration state. */
  state: OrganizationMigrationState
  /** The name of the target organization. */
  targetOrgName: string
  /** The total amount of repositories to be migrated. */
  totalRepositoriesCount?: Int | null
}
/** An organization list hovercard context */
export interface OrganizationsHovercardContext extends HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations: OrganizationConnection
  /** The total number of organizations this user is in */
  totalOrganizationCount: Int
}
/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContext extends HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams: TeamConnection
  /** The path for the full team list for this user */
  teamsResourcePath: URI
  /** The URL for the full team list for this user */
  teamsUrl: URI
  /** The total number of teams the user is on in the organization */
  totalTeamCount: Int
}
/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The blocked user. */
  blockedUser?: User | null
  /** The username of the blocked user. */
  blockedUserName?: string | null
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: URI | null
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgBlockUserAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The billing plan for the Organization. */
  billingPlan?: OrgCreateAuditEntryBillingPlan | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgCreateAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: URI | null
  /** The Node ID of the OrgDisableSamlAuditEntry object */
  id: ID
  /** The SAML provider's issuer URL. */
  issuerUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: URI | null
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: URI | null
  /** The Node ID of the OrgEnableSamlAuditEntry object */
  id: ID
  /** The SAML provider's issuer URL. */
  issuerUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: URI | null
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The email address of the organization invitation. */
  email?: string | null
  /** The Node ID of the OrgInviteMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The organization invitation. */
  organizationInvitation?: OrganizationInvitation | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the OrgInviteToBusinessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgOauthAppAccessApprovedAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.oauth_app_access_blocked event. */
export interface OrgOauthAppAccessBlockedAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgOauthAppAccessBlockedAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgOauthAppAccessDeniedAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgOauthAppAccessRequestedAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.oauth_app_access_unblocked event. */
export interface OrgOauthAppAccessUnblockedAuditEntry extends AuditEntry, Node, OauthApplicationAuditEntryData, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object */
  id: ID
  /** The name of the OAuth application. */
  oauthApplicationName?: string | null
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: URI | null
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: URI | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgRemoveBillingManagerAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The reason for the billing manager being removed. */
  reason?: OrgRemoveBillingManagerAuditEntryReason | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgRemoveMemberAuditEntry object */
  id: ID
  /** The types of membership the member has with the organization. */
  membershipTypes?: OrgRemoveMemberAuditEntryMembershipType[] | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The reason for the member being removed. */
  reason?: OrgRemoveMemberAuditEntryReason | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object */
  id: ID
  /** The types of membership the outside collaborator has with the organization. */
  membershipTypes?: OrgRemoveOutsideCollaboratorAuditEntryMembershipType[] | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The reason for the outside collaborator being removed from the Organization. */
  reason?: OrgRemoveOutsideCollaboratorAuditEntryReason | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgRestoreMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The number of custom email routings for the restored member. */
  restoredCustomEmailRoutingsCount?: Int | null
  /** The number of issue assignments for the restored member. */
  restoredIssueAssignmentsCount?: Int | null
  /** Restored organization membership objects. */
  restoredMemberships?: OrgRestoreMemberAuditEntryMembership[] | null
  /** The number of restored memberships. */
  restoredMembershipsCount?: Int | null
  /** The number of repositories of the restored member. */
  restoredRepositoriesCount?: Int | null
  /** The number of starred repositories for the restored member. */
  restoredRepositoryStarsCount?: Int | null
  /** The number of watched repositories for the restored member. */
  restoredRepositoryWatchesCount?: Int | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryData extends OrganizationAuditEntryData {
  __typename?: string
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
}
/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryData extends RepositoryAuditEntryData {
  __typename?: string
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
}
/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryData extends TeamAuditEntryData {
  __typename?: string
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
}
/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The user being unblocked by the organization. */
  blockedUser?: User | null
  /** The username of the blocked user. */
  blockedUserName?: string | null
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: URI | null
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgUnblockUserAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The new base repository permission level for the organization. */
  permission?: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null
  /** The former base repository permission level for the organization. */
  permissionWas?: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgUpdateMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The new member permission level for the organization. */
  permission?: OrgUpdateMemberAuditEntryPermission | null
  /** The former member permission level for the organization. */
  permissionWas?: OrgUpdateMemberAuditEntryPermission | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** Can members create repositories in the organization. */
  canCreateRepositories?: boolean | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The permission for visibility level of repositories for this organization. */
  visibility?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | null
}
/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** Can outside collaborators be invited to repositories in the organization. */
  canInviteOutsideCollaboratorsToRepositories?: boolean | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Information for an uploaded package. */
export interface Package extends Node {
  __typename?: string
  /** The Node ID of the Package object */
  id: ID
  /** Find the latest version for the package. */
  latestVersion?: PackageVersion | null
  /** Identifies the name of the package. */
  name: string
  /** Identifies the type of the package. */
  packageType: PackageType
  /** The repository this package belongs to. */
  repository?: Repository | null
  /** Statistics about package activity. */
  statistics?: PackageStatistics | null
  /** Find package version by version string. */
  version?: PackageVersion | null
  /** list of versions for this package */
  versions: PackageVersionConnection
}
/** The connection type for Package. */
export interface PackageConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PackageEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Package | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PackageEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Package | null
}
/** A file in a package version. */
export interface PackageFile extends Node {
  __typename?: string
  /** The Node ID of the PackageFile object */
  id: ID
  /** MD5 hash of the file. */
  md5?: string | null
  /** Name of the file. */
  name: string
  /** The package version this file belongs to. */
  packageVersion?: PackageVersion | null
  /** SHA1 hash of the file. */
  sha1?: string | null
  /** SHA256 hash of the file. */
  sha256?: string | null
  /** Size of the file in bytes. */
  size?: Int | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** URL to download the asset. */
  url?: URI | null
}
/** The connection type for PackageFile. */
export interface PackageFileConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PackageFileEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PackageFile | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PackageFileEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PackageFile | null
}
/** Represents an owner of a package. */
export interface PackageOwner {
  __typename?: string
  /** The Node ID of the PackageOwner object */
  id: ID
  /** A list of packages under the owner. */
  packages: PackageConnection
}
/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatistics {
  __typename?: string
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Int
}
/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTag extends Node {
  __typename?: string
  /** The Node ID of the PackageTag object */
  id: ID
  /** Identifies the tag name of the version. */
  name: string
  /** Version that the tag is associated with. */
  version?: PackageVersion | null
}
/** Information about a specific package version. */
export interface PackageVersion extends Node {
  __typename?: string
  /** List of files associated with this package version */
  files: PackageFileConnection
  /** The Node ID of the PackageVersion object */
  id: ID
  /** The package associated with this version. */
  package?: Package | null
  /** The platform this version was built for. */
  platform?: string | null
  /** Whether or not this version is a pre-release. */
  preRelease: boolean
  /** The README of this package version. */
  readme?: string | null
  /** The release associated with this package version. */
  release?: Release | null
  /** Statistics about package activity. */
  statistics?: PackageVersionStatistics | null
  /** The package version summary. */
  summary?: string | null
  /** The version string. */
  version: string
}
/** The connection type for PackageVersion. */
export interface PackageVersionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PackageVersionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PackageVersion | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PackageVersionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PackageVersion | null
}
/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatistics {
  __typename?: string
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Int
}
/** Information about pagination in a connection. */
export interface PageInfo {
  __typename?: string
  /** When paginating forwards, the cursor to continue. */
  endCursor?: string | null
  /** When paginating forwards, are there more items? */
  hasNextPage: boolean
  /** When paginating backwards, are there more items? */
  hasPreviousPage: boolean
  /** When paginating backwards, the cursor to continue. */
  startCursor?: string | null
}
/** Represents a 'parent_issue_added' event on a given issue. */
export interface ParentIssueAddedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ParentIssueAddedEvent object */
  id: ID
  /** The parent issue added. */
  parent?: Issue | null
}
/** Represents a 'parent_issue_removed' event on a given issue. */
export interface ParentIssueRemovedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ParentIssueRemovedEvent object */
  id: ID
  /** The parent issue removed. */
  parent?: Issue | null
}
/** A level of permission and source for a user's access to a repository. */
export interface PermissionSource {
  __typename?: string
  /** The organization the repository belongs to. */
  organization: Organization
  /** The level of access this source has granted to the user. */
  permission: DefaultRepositoryPermissionField
  /** The name of the role this source has granted to the user. */
  roleName?: string | null
  /** The source of this permission. */
  source: PermissionGranter
}
/** Autogenerated return type of PinEnvironment. */
export interface PinEnvironmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The environment that was pinned */
  environment?: Environment | null
  /** The pinned environment if we pinned */
  pinnedEnvironment?: PinnedEnvironment | null
}
/** Autogenerated return type of PinIssue. */
export interface PinIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue that was pinned */
  issue?: Issue | null
}
/** The connection type for PinnableItem. */
export interface PinnableItemConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PinnableItemEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PinnableItem | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PinnableItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PinnableItem | null
}
/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export interface PinnedDiscussion extends Node, RepositoryNode {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The discussion that was pinned. */
  discussion: Discussion
  /** Color stops of the chosen gradient */
  gradientStopColors: string[]
  /** The Node ID of the PinnedDiscussion object */
  id: ID
  /** Background texture pattern */
  pattern: PinnedDiscussionPattern
  /** The actor that pinned this discussion. */
  pinnedBy: Actor
  /** Preconfigured background gradient option */
  preconfiguredGradient?: PinnedDiscussionGradient | null
  /** The repository associated with this node. */
  repository: Repository
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for PinnedDiscussion. */
export interface PinnedDiscussionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PinnedDiscussionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PinnedDiscussion | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PinnedDiscussionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PinnedDiscussion | null
}
/** Represents a pinned environment on a given repository */
export interface PinnedEnvironment extends Node {
  __typename?: string
  /** Identifies the date and time when the pinned environment was created */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Identifies the environment associated. */
  environment: Environment
  /** The Node ID of the PinnedEnvironment object */
  id: ID
  /** Identifies the position of the pinned environment. */
  position: Int
  /** The repository that this environment was pinned to. */
  repository: Repository
}
/** The connection type for PinnedEnvironment. */
export interface PinnedEnvironmentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PinnedEnvironmentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PinnedEnvironment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PinnedEnvironmentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PinnedEnvironment | null
}
/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the PinnedEvent object */
  id: ID
  /** Identifies the issue associated with the event. */
  issue: Issue
}
/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssue extends Node {
  __typename?: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the PinnedIssue object */
  id: ID
  /** The issue that was pinned. */
  issue: Issue
  /** The actor that pinned this issue. */
  pinnedBy: Actor
  /** The repository that this issue was pinned to. */
  repository: Repository
}
/** The connection type for PinnedIssue. */
export interface PinnedIssueConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PinnedIssueEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PinnedIssue | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PinnedIssueEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PinnedIssue | null
}
/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the PrivateRepositoryForkingDisableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the PrivateRepositoryForkingEnableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own. */
export interface ProfileItemShowcase {
  __typename?: string
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems: boolean
  /** The repositories and gists in the showcase. If the profile owner has any
   * pinned items, those will be returned. Otherwise, the profile owner's popular
   * repositories will be returned. */
  items: PinnableItemConnection
}
/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwner {
  __typename?: string
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: boolean
  /** The public profile email. */
  email?: string | null
  /** The Node ID of the ProfileOwner object */
  id: ID
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase
  /** The public profile location. */
  location?: string | null
  /** The username used to login. */
  login: string
  /** The public profile name. */
  name?: string | null
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Int
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: boolean
  /** The public profile website URL. */
  websiteUrl?: URI | null
}
/** Projects manage issues, pull requests and notes within a project owner. */
export interface Project extends Closable, Node, Updatable {
  __typename?: string
  /** The project's description body. */
  body?: string | null
  /** The projects description body rendered to HTML. */
  bodyHTML: HTML
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** List of columns in the project */
  columns: ProjectColumnConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who originally created the project. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Project object */
  id: ID
  /** The project's name. */
  name: string
  /** The project's number. */
  number: Int
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  owner: ProjectOwner
  /** List of pending cards in this project */
  pendingCards: ProjectCardConnection
  /** Project progress details. */
  progress: ProjectProgress
  /** The HTTP path for this project */
  resourcePath: URI
  /** Whether the project is open or closed. */
  state: ProjectState
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this project */
  url: URI
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
}
/** A card in a project. */
export interface ProjectCard extends Node {
  __typename?: string
  /** The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future. */
  column?: ProjectColumn | null
  /** The card content item */
  content?: ProjectCardItem | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created this card */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectCard object */
  id: ID
  /** Whether the card is archived */
  isArchived: boolean
  /** The card note */
  note?: string | null
  /** The project that contains this card. */
  project: Project
  /** The HTTP path for this card */
  resourcePath: URI
  /** The state of ProjectCard */
  state?: ProjectCardState | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this card */
  url: URI
}
/** The connection type for ProjectCard. */
export interface ProjectCardConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectCardEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectCard | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectCardEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectCard | null
}
/** A column inside a project. */
export interface ProjectColumn extends Node {
  __typename?: string
  /** List of cards in the column */
  cards: ProjectCardConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectColumn object */
  id: ID
  /** The project column's name. */
  name: string
  /** The project that contains this column. */
  project: Project
  /** The semantic purpose of the column */
  purpose?: ProjectColumnPurpose | null
  /** The HTTP path for this project column */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this project column */
  url: URI
}
/** The connection type for ProjectColumn. */
export interface ProjectColumnConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectColumnEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectColumn | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectColumnEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectColumn | null
}
/** A list of projects associated with the owner. */
export interface ProjectConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Project | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Project | null
}
/** Represents an owner of a Project. */
export interface ProjectOwner {
  __typename?: string
  /** The Node ID of the ProjectOwner object */
  id: ID
  /** Find project by number. */
  project?: Project | null
  /** A list of projects under the owner. */
  projects: ProjectConnection
  /** The HTTP path listing owners projects */
  projectsResourcePath: URI
  /** The HTTP URL listing owners projects */
  projectsUrl: URI
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: boolean
}
/** Project progress stats. */
export interface ProjectProgress {
  __typename?: string
  /** The number of done cards. */
  doneCount: Int
  /** The percentage of done cards. */
  donePercentage: Float
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled: boolean
  /** The number of in-progress cards. */
  inProgressCount: Int
  /** The percentage of in-progress cards. */
  inProgressPercentage: Float
  /** The number of to do cards. */
  todoCount: Int
  /** The percentage of to do cards. */
  todoPercentage: Float
}
/** New projects that manage issues, pull requests and drafts using tables and boards. */
export interface ProjectV2 extends Closable, Node, Updatable {
  __typename?: string
  /** Returns true if the project is closed. */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who originally created the project. */
  creator?: Actor | null
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: Int | null
  /** A field of the project */
  field?: ProjectV2FieldConfiguration | null
  /** List of fields and their constraints in the project */
  fields: ProjectV2FieldConfigurationConnection
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the ProjectV2 object */
  id: ID
  /** List of items in the project */
  items: ProjectV2ItemConnection
  /** The project's number. */
  number: Int
  /** The project's owner. Currently limited to organizations and users. */
  owner: ProjectV2Owner
  /** Returns true if the project is public. */
  public: boolean
  /** The project's readme. */
  readme?: string | null
  /** The repositories the project is linked to. */
  repositories: RepositoryConnection
  /** The HTTP path for this project */
  resourcePath: URI
  /** The project's short description. */
  shortDescription?: string | null
  /** List of the status updates in the project. */
  statusUpdates: ProjectV2StatusUpdateConnection
  /** The teams the project is linked to. */
  teams: TeamConnection
  /** Returns true if this project is a template. */
  template: boolean
  /** The project's name. */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this project */
  url: URI
  /** A view of the project */
  view?: ProjectV2View | null
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** List of views in the project */
  views: ProjectV2ViewConnection
  /** A workflow of the project */
  workflow?: ProjectV2Workflow | null
  /** List of the workflows in the project */
  workflows: ProjectV2WorkflowConnection
}
/** The connection type for ProjectV2Actor. */
export interface ProjectV2ActorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2ActorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2Actor | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2ActorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2Actor | null
}
/** The connection type for ProjectV2. */
export interface ProjectV2Connection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2Edge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2 | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2Edge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2 | null
}
/** A field inside a project. */
export interface ProjectV2Field extends Node, ProjectV2FieldCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The field's type. */
  dataType: ProjectV2FieldType
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectV2Field object */
  id: ID
  /** The project field's name. */
  name: string
  /** The project that contains this field. */
  project: ProjectV2
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** Common fields across different project field types */
export interface ProjectV2FieldCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The field's type. */
  dataType: ProjectV2FieldType
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectV2FieldCommon object */
  id: ID
  /** The project field's name. */
  name: string
  /** The project that contains this field. */
  project: ProjectV2
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for ProjectV2FieldConfiguration. */
export interface ProjectV2FieldConfigurationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2FieldConfigurationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2FieldConfiguration | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2FieldConfigurationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2FieldConfiguration | null
}
/** The connection type for ProjectV2Field. */
export interface ProjectV2FieldConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2FieldEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2Field | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2FieldEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2Field | null
}
/** An item within a Project. */
export interface ProjectV2Item extends Node {
  __typename?: string
  /** The content of the referenced draft issue, issue, or pull request */
  content?: ProjectV2ItemContent | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: Int | null
  /** The field value of the first project field which matches the 'name' argument that is set on the item. */
  fieldValueByName?: ProjectV2ItemFieldValue | null
  /** The field values that are set on the item. */
  fieldValues: ProjectV2ItemFieldValueConnection
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the ProjectV2Item object */
  id: ID
  /** Whether the item is archived. */
  isArchived: boolean
  /** The project that contains this item. */
  project: ProjectV2
  /** The type of the item. */
  type: ProjectV2ItemType
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for ProjectV2Item. */
export interface ProjectV2ItemConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2ItemEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2Item | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2ItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2Item | null
}
/** The value of a date field in a Project item. */
export interface ProjectV2ItemFieldDateValue extends Node, ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Date value for the field */
  date?: Date | null
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldDateValue object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The value of an iteration field in a Project item. */
export interface ProjectV2ItemFieldIterationValue extends Node, ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The duration of the iteration in days. */
  duration: Int
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldIterationValue object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** The ID of the iteration. */
  iterationId: string
  /** The start date of the iteration. */
  startDate: Date
  /** The title of the iteration. */
  title: string
  /** The title of the iteration, with HTML. */
  titleHTML: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The value of the labels field in a Project item. */
export interface ProjectV2ItemFieldLabelValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** Labels value of a field */
  labels?: LabelConnection | null
}
/** The value of a milestone field in a Project item. */
export interface ProjectV2ItemFieldMilestoneValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** Milestone value of a field */
  milestone?: Milestone | null
}
/** The value of a number field in a Project item. */
export interface ProjectV2ItemFieldNumberValue extends Node, ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldNumberValue object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** Number as a float(8) */
  number?: Float | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The value of a pull request field in a Project item. */
export interface ProjectV2ItemFieldPullRequestValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The pull requests for this field */
  pullRequests?: PullRequestConnection | null
}
/** The value of a repository field in a Project item. */
export interface ProjectV2ItemFieldRepositoryValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The repository for this field. */
  repository?: Repository | null
}
/** The value of a reviewers field in a Project item. */
export interface ProjectV2ItemFieldReviewerValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The reviewers for this field. */
  reviewers?: RequestedReviewerConnection | null
}
/** The value of a single select field in a Project item. */
export interface ProjectV2ItemFieldSingleSelectValue extends Node, ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** The color applied to the selected single-select option. */
  color: ProjectV2SingleSelectFieldOptionColor
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** A plain-text description of the selected single-select option, such as what the option means. */
  description?: string | null
  /** The description of the selected single-select option, including HTML tags. */
  descriptionHTML?: string | null
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldSingleSelectValue object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** The name of the selected single select option. */
  name?: string | null
  /** The html name of the selected single select option. */
  nameHTML?: string | null
  /** The id of the selected single select option. */
  optionId?: string | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The value of a text field in a Project item. */
export interface ProjectV2ItemFieldTextValue extends Node, ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldTextValue object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** Text value of a field */
  text?: string | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The value of a user field in a Project item. */
export interface ProjectV2ItemFieldUserValue {
  __typename?: string
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The users for this field */
  users?: UserConnection | null
}
/** Common fields across different project field value types */
export interface ProjectV2ItemFieldValueCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the item. */
  creator?: Actor | null
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration
  /** The Node ID of the ProjectV2ItemFieldValueCommon object */
  id: ID
  /** The project item that contains this value. */
  item: ProjectV2Item
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for ProjectV2ItemFieldValue. */
export interface ProjectV2ItemFieldValueConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2ItemFieldValueEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2ItemFieldValue | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2ItemFieldValueEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2ItemFieldValue | null
}
/** An iteration field inside a project. */
export interface ProjectV2IterationField extends Node, ProjectV2FieldCommon {
  __typename?: string
  /** Iteration configuration settings */
  configuration: ProjectV2IterationFieldConfiguration
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The field's type. */
  dataType: ProjectV2FieldType
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectV2IterationField object */
  id: ID
  /** The project field's name. */
  name: string
  /** The project that contains this field. */
  project: ProjectV2
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** Iteration field configuration for a project. */
export interface ProjectV2IterationFieldConfiguration {
  __typename?: string
  /** The iteration's completed iterations */
  completedIterations: ProjectV2IterationFieldIteration[]
  /** The iteration's duration in days */
  duration: Int
  /** The iteration's iterations */
  iterations: ProjectV2IterationFieldIteration[]
  /** The iteration's start day of the week */
  startDay: Int
}
/** Iteration field iteration settings for a project. */
export interface ProjectV2IterationFieldIteration {
  __typename?: string
  /** The iteration's duration in days */
  duration: Int
  /** The iteration's ID. */
  id: string
  /** The iteration's start date */
  startDate: Date
  /** The iteration's title. */
  title: string
  /** The iteration's html title. */
  titleHTML: string
}
/** Represents an owner of a project. */
export interface ProjectV2Owner {
  __typename?: string
  /** The Node ID of the ProjectV2Owner object */
  id: ID
  /** Find a project by number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection
}
/** Recent projects for the owner. */
export interface ProjectV2Recent {
  __typename?: string
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection
}
/** A single select field inside a project. */
export interface ProjectV2SingleSelectField extends Node, ProjectV2FieldCommon {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The field's type. */
  dataType: ProjectV2FieldType
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ProjectV2SingleSelectField object */
  id: ID
  /** The project field's name. */
  name: string
  /** Options for the single select field */
  options: ProjectV2SingleSelectFieldOption[]
  /** The project that contains this field. */
  project: ProjectV2
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** Single select field option for a configuration for a project. */
export interface ProjectV2SingleSelectFieldOption {
  __typename?: string
  /** The option's display color. */
  color: ProjectV2SingleSelectFieldOptionColor
  /** The option's plain-text description. */
  description: string
  /** The option's description, possibly containing HTML. */
  descriptionHTML: string
  /** The option's ID. */
  id: string
  /** The option's name. */
  name: string
  /** The option's html name. */
  nameHTML: string
}
/** Represents a sort by field and direction. */
export interface ProjectV2SortBy {
  __typename?: string
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: OrderDirection
  /** The field by which items are sorted. */
  field: ProjectV2Field
}
/** The connection type for ProjectV2SortBy. */
export interface ProjectV2SortByConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2SortByEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2SortBy | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2SortByEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2SortBy | null
}
/** Represents a sort by field and direction. */
export interface ProjectV2SortByField {
  __typename?: string
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: OrderDirection
  /** The field by which items are sorted. */
  field: ProjectV2FieldConfiguration
}
/** The connection type for ProjectV2SortByField. */
export interface ProjectV2SortByFieldConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2SortByFieldEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2SortByField | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2SortByFieldEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2SortByField | null
}
/** A status update within a project. */
export interface ProjectV2StatusUpdate extends Node {
  __typename?: string
  /** The body of the status update. */
  body?: string | null
  /** The body of the status update rendered to HTML. */
  bodyHTML?: HTML | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created the status update. */
  creator?: Actor | null
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: Int | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the ProjectV2StatusUpdate object */
  id: ID
  /** The project that contains this status update. */
  project: ProjectV2
  /** The start date of the status update. */
  startDate?: Date | null
  /** The status of the status update. */
  status?: ProjectV2StatusUpdateStatus | null
  /** The target date of the status update. */
  targetDate?: Date | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for ProjectV2StatusUpdate. */
export interface ProjectV2StatusUpdateConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2StatusUpdateEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2StatusUpdate | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2StatusUpdateEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2StatusUpdate | null
}
/** A view within a ProjectV2. */
export interface ProjectV2View extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: Int | null
  /** The view's visible fields. */
  fields?: ProjectV2FieldConfigurationConnection | null
  /** The project view's filter. */
  filter?: string | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The view's group-by field.
   *
   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  groupBy?: ProjectV2FieldConnection | null
  /** The view's group-by field. */
  groupByFields?: ProjectV2FieldConfigurationConnection | null
  /** The Node ID of the ProjectV2View object */
  id: ID
  /** The project view's layout. */
  layout: ProjectV2ViewLayout
  /** The project view's name. */
  name: string
  /** The project view's number. */
  number: Int
  /** The project that contains this view. */
  project: ProjectV2
  /** The view's sort-by config.
   *
   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  sortBy?: ProjectV2SortByConnection | null
  /** The view's sort-by config. */
  sortByFields?: ProjectV2SortByFieldConnection | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The view's vertical-group-by field.
   *
   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  verticalGroupBy?: ProjectV2FieldConnection | null
  /** The view's vertical-group-by field. */
  verticalGroupByFields?: ProjectV2FieldConfigurationConnection | null
  /** The view's visible fields.
   *
   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC. */
  visibleFields?: ProjectV2FieldConnection | null
}
/** The connection type for ProjectV2View. */
export interface ProjectV2ViewConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2ViewEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2View | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2ViewEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2View | null
}
/** A workflow inside a project. */
export interface ProjectV2Workflow extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: Int | null
  /** Whether the workflow is enabled. */
  enabled: boolean
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the ProjectV2Workflow object */
  id: ID
  /** The name of the workflow. */
  name: string
  /** The number of the workflow. */
  number: Int
  /** The project that contains this workflow. */
  project: ProjectV2
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for ProjectV2Workflow. */
export interface ProjectV2WorkflowConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ProjectV2WorkflowEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ProjectV2Workflow | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ProjectV2WorkflowEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ProjectV2Workflow | null
}
/** A property that must match */
export interface PropertyTargetDefinition {
  __typename?: string
  /** The name of the property */
  name: string
  /** The values to match for */
  propertyValues: string[]
  /** The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified */
  source?: string | null
}
/** A user's public key. */
export interface PublicKey extends Node {
  __typename?: string
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt?: DateTime | null
  /** Identifies the date and time when the key was created. Keys created before
   * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt?: DateTime | null
  /** The fingerprint for this PublicKey. */
  fingerprint: string
  /** The Node ID of the PublicKey object */
  id: ID
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly?: boolean | null
  /** The public key string. */
  key: string
  /** Identifies the date and time when the key was updated. Keys created before
   * March 5th, 2014 may have inaccurate values. Values will be null for keys not
   * owned by the user. */
  updatedAt?: DateTime | null
}
/** The connection type for PublicKey. */
export interface PublicKeyConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PublicKeyEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PublicKey | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PublicKeyEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PublicKey | null
}
/** Autogenerated return type of PublishSponsorsTier. */
export interface PublishSponsorsTierPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The tier that was published. */
  sponsorsTier?: SponsorsTier | null
}
/** A repository pull request. */
export interface PullRequest extends Assignable, Closable, Comment, Labelable, Lockable, Node, ProjectV2Owner, Reactable, RepositoryNode, Subscribable, UniformResourceLocatable, Updatable, UpdatableComment {
  __typename?: string
  /** Reason that the conversation was locked. */
  activeLockReason?: LockReason | null
  /** The number of additions in this pull request. */
  additions: Int
  /** A list of Users assigned to this object. */
  assignees: UserConnection
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** Returns the auto-merge request object if one exists for this pull request. */
  autoMergeRequest?: AutoMergeRequest | null
  /** Identifies the base Ref associated with the pull request. */
  baseRef?: Ref | null
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  baseRefName: string
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  baseRefOid: GitObjectID
  /** The repository associated with this pull request's base Ref. */
  baseRepository?: Repository | null
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Whether or not the pull request is rebaseable. */
  canBeRebased: boolean
  /** The number of changed files in this pull request. */
  changedFiles: Int
  /** The HTTP path for the checks of this pull request. */
  checksResourcePath: URI
  /** The HTTP URL for the checks of this pull request. */
  checksUrl: URI
  /** `true` if the pull request is closed */
  closed: boolean
  /** Identifies the date and time when the object was closed. */
  closedAt?: DateTime | null
  /** List of issues that may be closed by this pull request */
  closingIssuesReferences?: IssueConnection | null
  /** A list of comments associated with the pull request. */
  comments: IssueCommentConnection
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  commits: PullRequestCommitConnection
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: Int | null
  /** The number of deletions in this pull request. */
  deletions: Int
  /** The actor who edited this pull request's body. */
  editor?: Actor | null
  /** Lists the files changed within this pull request. */
  files?: PullRequestChangedFileConnection | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** Identifies the head Ref associated with the pull request. */
  headRef?: Ref | null
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  headRefName: string
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  headRefOid: GitObjectID
  /** The repository associated with this pull request's head Ref. */
  headRepository?: Repository | null
  /** The owner of the repository associated with this pull request's head Ref. */
  headRepositoryOwner?: RepositoryOwner | null
  /** The hovercard information for this issue */
  hovercard: Hovercard
  /** The Node ID of the PullRequest object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** The head and base repositories are different. */
  isCrossRepository: boolean
  /** Identifies if the pull request is a draft. */
  isDraft: boolean
  /** Indicates whether the pull request is in a merge queue */
  isInMergeQueue: boolean
  /** Indicates whether the pull request's base ref has a merge queue enabled. */
  isMergeQueueEnabled: boolean
  /** Is this pull request read by the viewer */
  isReadByViewer?: boolean | null
  /** A list of labels associated with the object. */
  labels?: LabelConnection | null
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** A list of latest reviews per user associated with the pull request. */
  latestOpinionatedReviews?: PullRequestReviewConnection | null
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  latestReviews?: PullRequestReviewConnection | null
  /** `true` if the pull request is locked */
  locked: boolean
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify: boolean
  /** The commit that was created when this pull request was merged. */
  mergeCommit?: Commit | null
  /** The merge queue for the pull request's base branch */
  mergeQueue?: MergeQueue | null
  /** The merge queue entry of the pull request in the base branch's merge queue */
  mergeQueueEntry?: MergeQueueEntry | null
  /** Detailed information about the current pull request merge state status. */
  mergeStateStatus: MergeStateStatus
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  mergeable: MergeableState
  /** Whether or not the pull request was merged. */
  merged: boolean
  /** The date and time that the pull request was merged. */
  mergedAt?: DateTime | null
  /** The actor who merged the pull request. */
  mergedBy?: Actor | null
  /** Identifies the milestone associated with the pull request. */
  milestone?: Milestone | null
  /** Identifies the pull request number. */
  number: Int
  /** A list of Users that are participating in the Pull Request conversation. */
  participants: UserConnection
  /** The permalink to the pull request. */
  permalink: URI
  /** The commit that GitHub automatically generated to test if this pull request
   * could be merged. This field will not return a value if the pull request is
   * merged, or if the test merge commit is still being generated. See the
   * `mergeable` field for more details on the mergeability of the pull request. */
  potentialMergeCommit?: Commit | null
  /** List of project cards associated with this pull request. */
  projectCards: ProjectCardConnection
  /** List of project items associated with this pull request. */
  projectItems: ProjectV2ItemConnection
  /** Find a project by number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path for this pull request. */
  resourcePath: URI
  /** The HTTP path for reverting this pull request. */
  revertResourcePath: URI
  /** The HTTP URL for reverting this pull request. */
  revertUrl: URI
  /** The current status of this pull request with respect to code review. */
  reviewDecision?: PullRequestReviewDecision | null
  /** A list of review requests associated with the pull request. */
  reviewRequests?: ReviewRequestConnection | null
  /** The list of all review threads for this pull request. */
  reviewThreads: PullRequestReviewThreadConnection
  /** A list of reviews associated with the pull request. */
  reviews?: PullRequestReviewConnection | null
  /** Identifies the state of the pull request. */
  state: PullRequestState
  /** Check and Status rollup information for the PR's head ref. */
  statusCheckRollup?: StatusCheckRollup | null
  /** A list of reviewer suggestions based on commit history and past review comments. */
  suggestedReviewers: (SuggestedReviewer | null)[]
  /** A list of events, comments, commits, etc. associated with the pull request.
   *
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC. */
  timeline: PullRequestTimelineConnection
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timelineItems: PullRequestTimelineItemsConnection
  /** Identifies the pull request title. */
  title: string
  /** Identifies the pull request title rendered to HTML. */
  titleHTML: HTML
  /** Returns a count of how many comments this pull request has received. */
  totalCommentsCount?: Int | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this pull request. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Whether or not the viewer can apply suggestion. */
  viewerCanApplySuggestion: boolean
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: boolean
  /** Check if the viewer can restore the deleted head ref. */
  viewerCanDeleteHeadRef: boolean
  /** Whether or not the viewer can disable auto-merge */
  viewerCanDisableAutoMerge: boolean
  /** Can the viewer edit files within this pull request. */
  viewerCanEditFiles: boolean
  /** Whether or not the viewer can enable auto-merge */
  viewerCanEnableAutoMerge: boolean
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel: boolean
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  viewerCanMergeAsAdmin: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
   * If the head ref is up to date or unable to be updated by this user, this will return false. */
  viewerCanUpdateBranch: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
  /** The latest review given from the viewer. */
  viewerLatestReview?: PullRequestReview | null
  /** The person who has requested the viewer for review on this pull request. */
  viewerLatestReviewRequest?: ReviewRequest | null
  /** The merge body text for the viewer and method. */
  viewerMergeBodyText: string
  /** The merge headline text for the viewer and method. */
  viewerMergeHeadlineText: string
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
}
/** A file changed in a pull request. */
export interface PullRequestChangedFile {
  __typename?: string
  /** The number of additions to the file. */
  additions: Int
  /** How the file was changed in this PullRequest */
  changeType: PatchStatus
  /** The number of deletions to the file. */
  deletions: Int
  /** The path of the file. */
  path: string
  /** The state of the file for the viewer. */
  viewerViewedState: FileViewedState
}
/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestChangedFileEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestChangedFile | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PullRequestChangedFileEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestChangedFile | null
}
/** Represents a Git commit part of a pull request. */
export interface PullRequestCommit extends Node, UniformResourceLocatable {
  __typename?: string
  /** The Git commit object */
  commit: Commit
  /** The Node ID of the PullRequestCommit object */
  id: ID
  /** The pull request this commit belongs to */
  pullRequest: PullRequest
  /** The HTTP path for this pull request commit */
  resourcePath: URI
  /** The HTTP URL for this pull request commit */
  url: URI
}
/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThread extends Node, RepositoryNode {
  __typename?: string
  /** The comments that exist in this thread. */
  comments: CommitCommentConnection
  /** The commit the comments were made on. */
  commit: Commit
  /** The Node ID of the PullRequestCommitCommentThread object */
  id: ID
  /** The file the comments were made on. */
  path?: string | null
  /** The position in the diff for the commit that the comment was made on. */
  position?: Int | null
  /** The pull request this commit comment thread belongs to */
  pullRequest: PullRequest
  /** The repository associated with this node. */
  repository: Repository
}
/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestCommitEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestCommit | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PullRequestCommitEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestCommit | null
}
/** The connection type for PullRequest. */
export interface PullRequestConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequest | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepository {
  __typename?: string
  /** The pull request contributions. */
  contributions: CreatedPullRequestContributionConnection
  /** The repository in which the pull requests were opened. */
  repository: Repository
}
/** An edge in a connection. */
export interface PullRequestEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequest | null
}
/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParameters {
  __typename?: string
  /** When merging pull requests, you can allow any combination of merge commits,
   * squashing, or rebasing. At least one option must be enabled. */
  allowedMergeMethods?: string[] | null
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: boolean
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: boolean
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: boolean
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Int
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: boolean
}
/** A review object for a given pull request. */
export interface PullRequestReview extends Comment, Deletable, Minimizable, Node, Reactable, RepositoryNode, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** Indicates whether the author of this review has push access to the repository. */
  authorCanPushToRepository: boolean
  /** Identifies the pull request review body. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body of this review rendered as plain text. */
  bodyText: string
  /** A list of review comments for the current pull request review. */
  comments: PullRequestReviewCommentConnection
  /** Identifies the commit associated with this pull request review. */
  commit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the PullRequestReview object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** A list of teams that this review was made on behalf of. */
  onBehalfOf: TeamConnection
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** Identifies the pull request associated with this pull request review. */
  pullRequest: PullRequest
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path permalink for this PullRequestReview. */
  resourcePath: URI
  /** Identifies the current state of the pull request review. */
  state: PullRequestReviewState
  /** Identifies when the Pull Request Review was submitted */
  submittedAt?: DateTime | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL permalink for this PullRequestReview. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewComment extends Comment, Deletable, Minimizable, Node, Reactable, RepositoryNode, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation
  /** The comment body of this review comment. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The comment body of this review comment rendered as plain text. */
  bodyText: string
  /** Identifies the commit associated with the comment. */
  commit?: Commit | null
  /** Identifies when the comment was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: Int | null
  /** The diff hunk to which the comment applies. */
  diffHunk: string
  /** Identifies when the comment was created in a draft state. */
  draftedAt: DateTime
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: _BigInt | null
  /** The Node ID of the PullRequestReviewComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Returns whether or not a comment has been minimized. */
  isMinimized: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** The end line number on the file to which the comment applies */
  line?: Int | null
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: string | null
  /** Identifies the original commit associated with the comment. */
  originalCommit?: Commit | null
  /** The end line number on the file to which the comment applied when it was first created */
  originalLine?: Int | null
  /** The original line index in the diff to which the comment applies.
   *
   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC. */
  originalPosition: Int
  /** The start line number on the file to which the comment applied when it was first created */
  originalStartLine?: Int | null
  /** Identifies when the comment body is outdated */
  outdated: boolean
  /** The path to which the comment applies. */
  path: string
  /** The line index in the diff to which the comment applies.
   *
   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC. */
  position?: Int | null
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** The pull request associated with this review comment. */
  pullRequest: PullRequest
  /** The pull request review associated with this review comment. */
  pullRequestReview?: PullRequestReview | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The comment this is a reply to. */
  replyTo?: PullRequestReviewComment | null
  /** The repository associated with this node. */
  repository: Repository
  /** The HTTP path permalink for this review comment. */
  resourcePath: URI
  /** The start line number on the file to which the comment applies */
  startLine?: Int | null
  /** Identifies the state of the comment. */
  state: PullRequestReviewCommentState
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType
  /** Identifies when the comment was last updated. */
  updatedAt: DateTime
  /** The HTTP URL permalink for this review comment. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestReviewCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestReviewComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PullRequestReviewCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestReviewComment | null
}
/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestReviewEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestReview | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepository {
  __typename?: string
  /** The pull request review contributions. */
  contributions: CreatedPullRequestReviewContributionConnection
  /** The repository in which the pull request reviews were made. */
  repository: Repository
}
/** An edge in a connection. */
export interface PullRequestReviewEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestReview | null
}
/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThread extends Node {
  __typename?: string
  /** A list of pull request comments associated with the thread. */
  comments: PullRequestReviewCommentConnection
  /** The side of the diff on which this thread was placed. */
  diffSide: DiffSide
  /** The Node ID of the PullRequestReviewThread object */
  id: ID
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: boolean
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: boolean
  /** Whether this thread has been resolved */
  isResolved: boolean
  /** The line in the file to which this thread refers */
  line?: Int | null
  /** The original line in the file to which this thread refers. */
  originalLine?: Int | null
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine?: Int | null
  /** Identifies the file path of this thread. */
  path: string
  /** Identifies the pull request associated with this thread. */
  pullRequest: PullRequest
  /** Identifies the repository associated with this thread. */
  repository: Repository
  /** The user who resolved this thread */
  resolvedBy?: User | null
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: DiffSide | null
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine?: Int | null
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: boolean
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: boolean
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: boolean
}
/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestReviewThreadEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestReviewThread | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PullRequestReviewThreadEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestReviewThread | null
}
/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarker {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The last commit the viewer has seen. */
  lastSeenCommit: Commit
  /** The pull request to which the marker belongs. */
  pullRequest: PullRequest
}
/** A repository pull request template. */
export interface PullRequestTemplate {
  __typename?: string
  /** The body of the template */
  body?: string | null
  /** The filename of the template */
  filename?: string | null
  /** The repository the template belongs to */
  repository: Repository
}
/** A threaded list of comments for a given pull request. */
export interface PullRequestThread extends Node {
  __typename?: string
  /** A list of pull request comments associated with the thread. */
  comments: PullRequestReviewCommentConnection
  /** The side of the diff on which this thread was placed. */
  diffSide: DiffSide
  /** The Node ID of the PullRequestThread object */
  id: ID
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: boolean
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: boolean
  /** Whether this thread has been resolved */
  isResolved: boolean
  /** The line in the file to which this thread refers */
  line?: Int | null
  /** Identifies the file path of this thread. */
  path: string
  /** Identifies the pull request associated with this thread. */
  pullRequest: PullRequest
  /** Identifies the repository associated with this thread. */
  repository: Repository
  /** The user who resolved this thread */
  resolvedBy?: User | null
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: DiffSide | null
  /** The line of the first file diff in the thread. */
  startLine?: Int | null
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: boolean
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: boolean
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: boolean
}
/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestTimelineItemEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PullRequestTimelineItem | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PullRequestTimelineItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestTimelineItem | null
}
/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PullRequestTimelineItemsEdge | null)[] | null
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Int
  /** A list of nodes. */
  nodes?: (PullRequestTimelineItems | null)[] | null
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Int
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: DateTime
}
/** An edge in a connection. */
export interface PullRequestTimelineItemsEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PullRequestTimelineItems | null
}
/** A Git push. */
export interface Push extends Node {
  __typename?: string
  /** The Node ID of the Push object */
  id: ID
  /** The SHA after the push */
  nextSha?: GitObjectID | null
  /** The permalink for this push. */
  permalink: URI
  /** The SHA before the push */
  previousSha?: GitObjectID | null
  /** The actor who pushed */
  pusher: Actor
  /** The repository that was pushed to */
  repository: Repository
}
/** A team, user, or app who has the ability to push to a protected branch. */
export interface PushAllowance extends Node {
  __typename?: string
  /** The actor that can push. */
  actor?: PushAllowanceActor | null
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRule | null
  /** The Node ID of the PushAllowance object */
  id: ID
}
/** The connection type for PushAllowance. */
export interface PushAllowanceConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (PushAllowanceEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (PushAllowance | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface PushAllowanceEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: PushAllowance | null
}
/** The query root of GitHub's GraphQL interface. */
export interface Query extends Node {
  __typename?: string
  /** Look up a code of conduct by its key */
  codeOfConduct?: CodeOfConduct | null
  /** Look up a code of conduct by its key */
  codesOfConduct?: (CodeOfConduct | null)[] | null
  /** Look up an enterprise by URL slug. */
  enterprise?: Enterprise | null
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation?: EnterpriseAdministratorInvitation | null
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken?: EnterpriseAdministratorInvitation | null
  /** Look up a pending enterprise unaffiliated member invitation by invitee and enterprise. */
  enterpriseMemberInvitation?: EnterpriseMemberInvitation | null
  /** Look up a pending enterprise unaffiliated member invitation by invitation token. */
  enterpriseMemberInvitationByToken?: EnterpriseMemberInvitation | null
  /** ID of the object. */
  id: ID
  /** Look up an open source license by its key */
  license?: License | null
  /** Return a list of known open source licenses */
  licenses: (License | null)[]
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories: MarketplaceCategory[]
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory?: MarketplaceCategory | null
  /** Look up a single Marketplace listing */
  marketplaceListing?: MarketplaceListing | null
  /** Look up Marketplace listings */
  marketplaceListings: MarketplaceListingConnection
  /** Return information about the GitHub instance */
  meta: GitHubMetadata
  /** Fetches an object given its ID. */
  node?: Node | null
  /** Lookup nodes by a list of IDs. */
  nodes: (Node | null)[]
  /** Lookup a organization by login. */
  organization?: Organization | null
  /** The client's rate limit information. */
  rateLimit?: RateLimit | null
  /** Workaround for re-exposing the root query object. (Refer to
   * https://github.com/facebook/relay/issues/112 for more information.) */
  relay: Query
  /** Lookup a given repository by the owner and repository name. */
  repository?: Repository | null
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner?: RepositoryOwner | null
  /** Lookup resource by a URL. */
  resource?: UniformResourceLocatable | null
  /** Perform a search across resources, returning a maximum of 1,000 results. */
  search: SearchResultItemConnection
  /** GitHub Security Advisories */
  securityAdvisories: SecurityAdvisoryConnection
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory?: SecurityAdvisory | null
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities: SecurityVulnerabilityConnection
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables: SponsorableItemConnection
  /** Look up a topic by name. */
  topic?: Topic | null
  /** Lookup a user by login. */
  user?: User | null
  /** The currently authenticated user. */
  viewer: User
}
/** Represents the client's rate limit. */
export interface RateLimit {
  __typename?: string
  /** The point cost for the current query counting against the rate limit. */
  cost: Int
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit: Int
  /** The maximum number of nodes this query may return */
  nodeCount: Int
  /** The number of points remaining in the current rate limit window. */
  remaining: Int
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt: DateTime
  /** The number of points used in the current rate limit window. */
  used: Int
}
/** Represents a subject that can be reacted on. */
export interface Reactable {
  __typename?: string
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Reactable object */
  id: ID
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** Can user react to this subject */
  viewerCanReact: boolean
}
/** The connection type for User. */
export interface ReactingUserConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReactingUserEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user that's made a reaction. */
export interface ReactingUserEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  node: User
  /** The moment when the user made the reaction. */
  reactedAt: DateTime
}
/** An emoji reaction to a particular piece of content. */
export interface Reaction extends Node {
  __typename?: string
  /** Identifies the emoji reaction. */
  content: ReactionContent
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Reaction object */
  id: ID
  /** The reactable piece of content */
  reactable: Reactable
  /** Identifies the user who created this reaction. */
  user?: User | null
}
/** A list of reactions that have been left on the subject. */
export interface ReactionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReactionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Reaction | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: boolean
}
/** An edge in a connection. */
export interface ReactionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Reaction | null
}
/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroup {
  __typename?: string
  /** Identifies the emoji reaction. */
  content: ReactionContent
  /** Identifies when the reaction was created. */
  createdAt?: DateTime | null
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors: ReactorConnection
  /** The subject that was reacted to. */
  subject: Reactable
  /** Users who have reacted to the reaction subject with the emotion represented by this reaction group
   *
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC. */
  users: ReactingUserConnection
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: boolean
}
/** The connection type for Reactor. */
export interface ReactorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReactorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Reactor | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents an author of a reaction. */
export interface ReactorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The author of the reaction. */
  node: Reactor
  /** The moment when the user made the reaction. */
  reactedAt: DateTime
}
/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ReadyForReviewEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** The HTTP path for this ready for review event. */
  resourcePath: URI
  /** The HTTP URL for this ready for review event. */
  url: URI
}
/** Represents a Git reference. */
export interface Ref extends Node {
  __typename?: string
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests: PullRequestConnection
  /** Branch protection rules for this ref */
  branchProtectionRule?: BranchProtectionRule | null
  /** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
  compare?: Comparison | null
  /** The Node ID of the Ref object */
  id: ID
  /** The ref name. */
  name: string
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix: string
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule?: RefUpdateRule | null
  /** The repository the ref belongs to. */
  repository: Repository
  /** A list of rules from active Repository and Organization rulesets that apply to this ref. */
  rules?: RepositoryRuleConnection | null
  /** The object the ref points to. Returns null when object does not exist. */
  target?: GitObject | null
}
/** The connection type for Ref. */
export interface RefConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RefEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Ref | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RefEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Ref | null
}
/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the commit associated with the 'referenced' event. */
  commit?: Commit | null
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository: Repository
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ReferencedEvent object */
  id: ID
  /** Reference originated in a different repository. */
  isCrossRepository: boolean
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference: boolean
  /** Object referenced by event. */
  subject: ReferencedSubject
}
/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTarget {
  __typename?: string
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: string[]
  /** Array of ref names or patterns to include. One of these patterns must match
   * for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
   * default branch or `~ALL` to include all branches. */
  include: string[]
}
/** Branch protection rules that are enforced on the viewer. */
export interface RefUpdateRule {
  __typename?: string
  /** Can this branch be deleted. */
  allowsDeletions: boolean
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: boolean
  /** Can matching branches be created. */
  blocksCreations: boolean
  /** Identifies the protection rule pattern. */
  pattern: string
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Int | null
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: (string | null)[] | null
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: boolean
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: boolean
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: boolean
  /** Are commits required to be signed. */
  requiresSignatures: boolean
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews: boolean
  /** Can the viewer push to the branch */
  viewerCanPush: boolean
}
/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes. */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The identity provider for the enterprise. */
  identityProvider?: EnterpriseIdentityProvider | null
}
/** Autogenerated return type of RegenerateVerifiableDomainToken. */
export interface RegenerateVerifiableDomainTokenPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The verification token that was generated. */
  verificationToken?: string | null
}
/** Autogenerated return type of RejectDeployments. */
export interface RejectDeploymentsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The affected deployments. */
  deployments?: Deployment[] | null
}
/** A release contains the content for a release. */
export interface Release extends Node, Reactable, UniformResourceLocatable {
  __typename?: string
  /** The author of the release */
  author?: User | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The description of the release. */
  description?: string | null
  /** The description of this release rendered to HTML. */
  descriptionHTML?: HTML | null
  /** The Node ID of the Release object */
  id: ID
  /** Whether or not the release is a draft */
  isDraft: boolean
  /** Whether or not the release is the latest releast */
  isLatest: boolean
  /** Whether or not the release is a prerelease */
  isPrerelease: boolean
  /** A list of users mentioned in the release description */
  mentions?: UserConnection | null
  /** The title of the release. */
  name?: string | null
  /** Identifies the date and time when the release was created. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** List of releases assets which are dependent on this release. */
  releaseAssets: ReleaseAssetConnection
  /** The repository that the release belongs to. */
  repository: Repository
  /** The HTTP path for this issue */
  resourcePath: URI
  /** A description of the release, rendered to HTML without any links in it. */
  shortDescriptionHTML?: HTML | null
  /** The Git tag the release points to */
  tag?: Ref | null
  /** The tag commit for this release. */
  tagCommit?: Commit | null
  /** The name of the release's Git tag */
  tagName: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this issue */
  url: URI
  /** Can user react to this subject */
  viewerCanReact: boolean
}
/** A release asset contains the content for a release asset. */
export interface ReleaseAsset extends Node {
  __typename?: string
  /** The asset's content-type */
  contentType: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The number of times this asset was downloaded */
  downloadCount: Int
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl: URI
  /** The Node ID of the ReleaseAsset object */
  id: ID
  /** Identifies the title of the release asset. */
  name: string
  /** Release that the asset is associated with */
  release?: Release | null
  /** The size (in bytes) of the asset */
  size: Int
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The user that performed the upload */
  uploadedBy: User
  /** Identifies the URL of the release asset. */
  url: URI
}
/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReleaseAssetEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ReleaseAsset | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ReleaseAssetEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ReleaseAsset | null
}
/** The connection type for Release. */
export interface ReleaseConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReleaseEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Release | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ReleaseEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Release | null
}
/** Autogenerated return type of RemoveAssigneesFromAssignable. */
export interface RemoveAssigneesFromAssignablePayload {
  __typename?: string
  /** The item that was unassigned. */
  assignable?: Assignable | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Represents a 'removed_from_merge_queue' event on a given pull request. */
export interface RemovedFromMergeQueueEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the before commit SHA for the 'removed_from_merge_queue' event. */
  beforeCommit?: Commit | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The user who removed this Pull Request from the merge queue */
  enqueuer?: User | null
  /** The Node ID of the RemovedFromMergeQueueEvent object */
  id: ID
  /** The merge queue where this pull request was removed from. */
  mergeQueue?: MergeQueue | null
  /** PullRequest referenced by event. */
  pullRequest?: PullRequest | null
  /** The reason this pull request was removed from the queue. */
  reason?: string | null
}
/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the RemovedFromProjectEvent object */
  id: ID
  /** Project referenced by event. */
  project?: Project | null
  /** Column name referenced by this project event. */
  projectColumnName: string
}
/** Autogenerated return type of RemoveEnterpriseAdmin. */
export interface RemoveEnterpriseAdminPayload {
  __typename?: string
  /** The user who was removed as an administrator. */
  admin?: User | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated enterprise. */
  enterprise?: Enterprise | null
  /** A message confirming the result of removing an administrator. */
  message?: string | null
  /** The viewer performing the mutation. */
  viewer?: User | null
}
/** Autogenerated return type of RemoveEnterpriseIdentityProvider. */
export interface RemoveEnterpriseIdentityProviderPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The identity provider that was removed from the enterprise. */
  identityProvider?: EnterpriseIdentityProvider | null
}
/** Autogenerated return type of RemoveEnterpriseMember. */
export interface RemoveEnterpriseMemberPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated enterprise. */
  enterprise?: Enterprise | null
  /** The user that was removed from the enterprise. */
  user?: User | null
  /** The viewer performing the mutation. */
  viewer?: User | null
}
/** Autogenerated return type of RemoveEnterpriseOrganization. */
export interface RemoveEnterpriseOrganizationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated enterprise. */
  enterprise?: Enterprise | null
  /** The organization that was removed from the enterprise. */
  organization?: Organization | null
  /** The viewer performing the mutation. */
  viewer?: User | null
}
/** Autogenerated return type of RemoveEnterpriseSupportEntitlement. */
export interface RemoveEnterpriseSupportEntitlementPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of removing the support entitlement. */
  message?: string | null
}
/** Autogenerated return type of RemoveLabelsFromLabelable. */
export interface RemoveLabelsFromLabelablePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Labelable the labels were removed from. */
  labelable?: Labelable | null
}
/** Autogenerated return type of RemoveOutsideCollaborator. */
export interface RemoveOutsideCollaboratorPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The user that was removed as an outside collaborator. */
  removedUser?: User | null
}
/** Autogenerated return type of RemoveReaction. */
export interface RemoveReactionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The reaction object. */
  reaction?: Reaction | null
  /** The reaction groups for the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** The reactable subject. */
  subject?: Reactable | null
}
/** Autogenerated return type of RemoveStar. */
export interface RemoveStarPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The starrable. */
  starrable?: Starrable | null
}
/** Autogenerated return type of RemoveSubIssue. */
export interface RemoveSubIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The parent of the sub-issue. */
  issue?: Issue | null
  /** The sub-issue of the parent. */
  subIssue?: Issue | null
}
/** Autogenerated return type of RemoveUpvote. */
export interface RemoveUpvotePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The votable subject. */
  subject?: Votable | null
}
/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the current title of the issue or pull request. */
  currentTitle: string
  /** The Node ID of the RenamedTitleEvent object */
  id: ID
  /** Identifies the previous title of the issue or pull request. */
  previousTitle: string
  /** Subject that was renamed. */
  subject: RenamedTitleSubject
}
/** Autogenerated return type of ReopenDiscussion. */
export interface ReopenDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that was reopened. */
  discussion?: Discussion | null
}
/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Object that was reopened. */
  closable: Closable
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ReopenedEvent object */
  id: ID
  /** The reason the issue state was changed to open. */
  stateReason?: IssueStateReason | null
}
/** Autogenerated return type of ReopenIssue. */
export interface ReopenIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue that was opened. */
  issue?: Issue | null
}
/** Autogenerated return type of ReopenPullRequest. */
export interface ReopenPullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that was reopened. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of ReorderEnvironment. */
export interface ReorderEnvironmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The environment that was reordered */
  environment?: Environment | null
}
/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoAccessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoAccessAuditEntryVisibility | null
}
/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoAddMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoAddMemberAuditEntryVisibility | null
}
/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData, TopicAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoAddTopicAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The name of the topic added to the repository */
  topic?: Topic | null
  /** The name of the topic added to the repository */
  topicName?: string | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoArchivedAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoArchivedAuditEntryVisibility | null
}
/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoChangeMergeSettingAuditEntry object */
  id: ID
  /** Whether the change was to enable (true) or disable (false) the merge type */
  isEnabled?: boolean | null
  /** The merge method affected by the change */
  mergeType?: RepoChangeMergeSettingAuditEntryMergeType | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The name of the parent repository for this forked repository. */
  forkParentName?: string | null
  /** The name of the root repository for this network. */
  forkSourceName?: string | null
  /** The Node ID of the RepoCreateAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoCreateAuditEntryVisibility | null
}
/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoDestroyAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoDestroyAuditEntryVisibility | null
}
/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoRemoveMemberAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
  /** The visibility of the repository */
  visibility?: RepoRemoveMemberAuditEntryVisibility | null
}
/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData, TopicAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the RepoRemoveTopicAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The name of the topic added to the repository */
  topic?: Topic | null
  /** The name of the topic added to the repository */
  topicName?: string | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** A repository contains the content for a project. */
export interface Repository extends Node, PackageOwner, ProjectOwner, ProjectV2Recent, RepositoryInfo, Starrable, Subscribable, UniformResourceLocatable {
  __typename?: string
  /** Whether or not a pull request head branch that is behind its base branch can
   * always be updated even if it is not required to be up to date before merging. */
  allowUpdateBranch: boolean
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: DateTime | null
  /** A list of users that can be assigned to issues in this repository. */
  assignableUsers: UserConnection
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  autoMergeAllowed: boolean
  /** A list of branch protection rules for this repository. */
  branchProtectionRules: BranchProtectionRuleConnection
  /** Returns the code of conduct for this repository */
  codeOfConduct?: CodeOfConduct | null
  /** Information extracted from the repository's `CODEOWNERS` file. */
  codeowners?: RepositoryCodeowners | null
  /** A list of collaborators associated with the repository. */
  collaborators?: RepositoryCollaboratorConnection | null
  /** A list of commit comments associated with the repository. */
  commitComments: CommitCommentConnection
  /** Returns a list of contact links associated to the repository */
  contactLinks?: RepositoryContactLink[] | null
  /** Returns the contributing guidelines for this repository. */
  contributingGuidelines?: ContributingGuidelines | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Ref associated with the repository's default branch. */
  defaultBranchRef?: Ref | null
  /** Whether or not branches are automatically deleted when merged in this repository. */
  deleteBranchOnMerge: boolean
  /** A list of dependency manifests contained in the repository */
  dependencyGraphManifests?: DependencyGraphManifestConnection | null
  /** A list of deploy keys that are on this repository. */
  deployKeys: DeployKeyConnection
  /** Deployments associated with the repository */
  deployments: DeploymentConnection
  /** The description of the repository. */
  description?: string | null
  /** The description of the repository rendered to HTML. */
  descriptionHTML: HTML
  /** Returns a single discussion from the current repository by number. */
  discussion?: Discussion | null
  /** A list of discussion categories that are available in the repository. */
  discussionCategories: DiscussionCategoryConnection
  /** A discussion category by slug. */
  discussionCategory?: DiscussionCategory | null
  /** A list of discussions that have been opened in the repository. */
  discussions: DiscussionConnection
  /** The number of kilobytes this repository occupies on disk. */
  diskUsage?: Int | null
  /** Returns a single active environment from the current repository by name. */
  environment?: Environment | null
  /** A list of environments that are in this repository. */
  environments: EnvironmentConnection
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Int
  /** Whether this repository allows forks. */
  forkingAllowed: boolean
  /** A list of direct forked repositories. */
  forks: RepositoryConnection
  /** The funding links for this repository */
  fundingLinks: FundingLink[]
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled: boolean
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: boolean
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: boolean
  /** Indicates if the repository displays a Sponsor button for financial contributions. */
  hasSponsorshipsEnabled: boolean
  /** Whether vulnerability alerts are enabled for the repository. */
  hasVulnerabilityAlertsEnabled: boolean
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: boolean
  /** The repository's URL. */
  homepageUrl?: URI | null
  /** The Node ID of the Repository object */
  id: ID
  /** The interaction ability settings for this repository. */
  interactionAbility?: RepositoryInteractionAbility | null
  /** Indicates if the repository is unmaintained. */
  isArchived: boolean
  /** Returns true if blank issue creation is allowed */
  isBlankIssuesEnabled: boolean
  /** Returns whether or not this repository disabled. */
  isDisabled: boolean
  /** Returns whether or not this repository is empty. */
  isEmpty: boolean
  /** Identifies if the repository is a fork. */
  isFork: boolean
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: boolean
  /** Indicates if the repository has been locked or not. */
  isLocked: boolean
  /** Identifies if the repository is a mirror. */
  isMirror: boolean
  /** Identifies if the repository is private or internal. */
  isPrivate: boolean
  /** Returns true if this repository has a security policy */
  isSecurityPolicyEnabled?: boolean | null
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: boolean
  /** Is this repository a user configuration repository? */
  isUserConfigurationRepository: boolean
  /** Returns a single issue from the current repository by number. */
  issue?: Issue | null
  /** Returns a single issue-like object from the current repository by number. */
  issueOrPullRequest?: IssueOrPullRequest | null
  /** Returns a list of issue templates associated to the repository */
  issueTemplates?: IssueTemplate[] | null
  /** A list of issues that have been opened in the repository. */
  issues: IssueConnection
  /** Returns a single label by name */
  label?: Label | null
  /** A list of labels associated with the repository. */
  labels?: LabelConnection | null
  /** A list containing a breakdown of the language composition of the repository. */
  languages?: LanguageConnection | null
  /** Get the latest release for the repository if one exists. */
  latestRelease?: Release | null
  /** The license associated with the repository */
  licenseInfo?: License | null
  /** The reason the repository has been locked. */
  lockReason?: RepositoryLockReason | null
  /** A list of Users that can be mentioned in the context of the repository. */
  mentionableUsers: UserConnection
  /** Whether or not PRs are merged with a merge commit on this repository. */
  mergeCommitAllowed: boolean
  /** How the default commit message will be generated when merging a pull request. */
  mergeCommitMessage: MergeCommitMessage
  /** How the default commit title will be generated when merging a pull request. */
  mergeCommitTitle: MergeCommitTitle
  /** The merge queue for a specified branch, otherwise the default branch if not provided. */
  mergeQueue?: MergeQueue | null
  /** Returns a single milestone from the current repository by number. */
  milestone?: Milestone | null
  /** A list of milestones associated with the repository. */
  milestones?: MilestoneConnection | null
  /** The repository's original mirror URL. */
  mirrorUrl?: URI | null
  /** The name of the repository. */
  name: string
  /** The repository's name with owner. */
  nameWithOwner: string
  /** A Git object in the repository */
  object?: GitObject | null
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: URI
  /** The User owner of the repository. */
  owner: RepositoryOwner
  /** A list of packages under the owner. */
  packages: PackageConnection
  /** The repository parent, if this is a fork. */
  parent?: Repository | null
  /** A list of discussions that have been pinned in this repository. */
  pinnedDiscussions: PinnedDiscussionConnection
  /** A list of pinned environments for this repository. */
  pinnedEnvironments?: PinnedEnvironmentConnection | null
  /** A list of pinned issues for this repository. */
  pinnedIssues?: PinnedIssueConnection | null
  /** Returns information about the availability of certain features and limits based on the repository's billing plan. */
  planFeatures: RepositoryPlanFeatures
  /** The primary language of the repository's code. */
  primaryLanguage?: Language | null
  /** Find project by number. */
  project?: Project | null
  /** Finds and returns the Project according to the provided Project number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projects: ProjectConnection
  /** The HTTP path listing the repository's projects */
  projectsResourcePath: URI
  /** The HTTP URL listing the repository's projects */
  projectsUrl: URI
  /** List of projects linked to this repository. */
  projectsV2: ProjectV2Connection
  /** Returns a single pull request from the current repository by number. */
  pullRequest?: PullRequest | null
  /** Returns a list of pull request templates associated to the repository */
  pullRequestTemplates?: PullRequestTemplate[] | null
  /** A list of pull requests that have been opened in the repository. */
  pullRequests: PullRequestConnection
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: DateTime | null
  /** Whether or not rebase-merging is enabled on this repository. */
  rebaseMergeAllowed: boolean
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection
  /** Fetch a given ref from the repository */
  ref?: Ref | null
  /** Fetch a list of refs from the repository */
  refs?: RefConnection | null
  /** Lookup a single release given various criteria. */
  release?: Release | null
  /** List of releases which are dependent on this repository. */
  releases: ReleaseConnection
  /** A list of applied repository-topic associations for this repository. */
  repositoryTopics: RepositoryTopicConnection
  /** The HTTP path for this repository */
  resourcePath: URI
  /** Returns a single ruleset from the current repository by ID. */
  ruleset?: RepositoryRuleset | null
  /** A list of rulesets for this repository. */
  rulesets?: RepositoryRulesetConnection | null
  /** The security policy URL. */
  securityPolicyUrl?: URI | null
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: HTML
  /** Whether or not squash-merging is enabled on this repository. */
  squashMergeAllowed: boolean
  /** How the default commit message will be generated when squash merging a pull request. */
  squashMergeCommitMessage: SquashMergeCommitMessage
  /** How the default commit title will be generated when squash merging a pull request. */
  squashMergeCommitTitle: SquashMergeCommitTitle
  /** Whether a squash merge commit can use the pull request title as default.
   *
   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC. */
  squashPrTitleUsedAsDefault: boolean
  /** The SSH URL to clone this repository */
  sshUrl: GitSSHRemote
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount: Int
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection
  /** Returns a list of all submodules in this repository parsed from the
   * .gitmodules file as of the default branch's HEAD commit. */
  submodules: SubmoduleConnection
  /** Temporary authentication token for cloning this repository. */
  tempCloneToken?: string | null
  /** The repository from which this repository was generated, if any. */
  templateRepository?: Repository | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this repository */
  url: URI
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: boolean
  /** Indicates whether the viewer has admin permissions on this repository. */
  viewerCanAdminister: boolean
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Indicates whether the viewer can update the topics of this repository. */
  viewerCanUpdateTopics: boolean
  /** The last commit email for the viewer. */
  viewerDefaultCommitEmail?: string | null
  /** The last used merge method by the viewer or the default for the repository. */
  viewerDefaultMergeMethod: PullRequestMergeMethod
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: boolean
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  viewerPermission?: RepositoryPermission | null
  /** A list of emails this viewer can commit with. */
  viewerPossibleCommitEmails?: string[] | null
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility
  /** Returns a single vulnerability alert from the current repository by number. */
  vulnerabilityAlert?: RepositoryVulnerabilityAlert | null
  /** A list of vulnerability alerts that are on this repository. */
  vulnerabilityAlerts?: RepositoryVulnerabilityAlertConnection | null
  /** A list of users watching the repository. */
  watchers: UserConnection
  /** Whether contributors are required to sign off on web-based commits in this repository. */
  webCommitSignoffRequired: boolean
}
/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryData {
  __typename?: string
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
}
/** Information extracted from a repository's `CODEOWNERS` file. */
export interface RepositoryCodeowners {
  __typename?: string
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors: RepositoryCodeownersError[]
}
/** An error in a `CODEOWNERS` file. */
export interface RepositoryCodeownersError {
  __typename?: string
  /** The column number where the error occurs. */
  column: Int
  /** A short string describing the type of error. */
  kind: string
  /** The line number where the error occurs. */
  line: Int
  /** A complete description of the error, combining information from other fields. */
  message: string
  /** The path to the file when the error occurs. */
  path: string
  /** The content of the line where the error occurs. */
  source: string
  /** A suggestion of how to fix the error. */
  suggestion?: string | null
}
/** The connection type for User. */
export interface RepositoryCollaboratorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryCollaboratorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  node: User
  /** The permission the user has on the repository. */
  permission: RepositoryPermission
  /** A list of sources for the user's access to the repository. */
  permissionSources?: PermissionSource[] | null
}
/** A list of repositories owned by the subject. */
export interface RepositoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Repository | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** The total size in kilobytes of all repositories in the connection. Value will
   * never be larger than max 32-bit signed integer. */
  totalDiskUsage: Int
}
/** A repository contact link. */
export interface RepositoryContactLink {
  __typename?: string
  /** The contact link purpose. */
  about: string
  /** The contact link name. */
  name: string
  /** The contact link URL. */
  url: URI
}
/** Represents an author of discussions in repositories. */
export interface RepositoryDiscussionAuthor {
  __typename?: string
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection
}
/** Represents an author of discussion comments in repositories. */
export interface RepositoryDiscussionCommentAuthor {
  __typename?: string
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection
}
/** An edge in a connection. */
export interface RepositoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Repository | null
}
/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTarget {
  __typename?: string
  /** One of these repo IDs must match the repo. */
  repositoryIds: ID[]
}
/** A subset of repository info. */
export interface RepositoryInfo {
  __typename?: string
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: DateTime | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The description of the repository. */
  description?: string | null
  /** The description of the repository rendered to HTML. */
  descriptionHTML: HTML
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Int
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled: boolean
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: boolean
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: boolean
  /** Indicates if the repository displays a Sponsor button for financial contributions. */
  hasSponsorshipsEnabled: boolean
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: boolean
  /** The repository's URL. */
  homepageUrl?: URI | null
  /** Indicates if the repository is unmaintained. */
  isArchived: boolean
  /** Identifies if the repository is a fork. */
  isFork: boolean
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: boolean
  /** Indicates if the repository has been locked or not. */
  isLocked: boolean
  /** Identifies if the repository is a mirror. */
  isMirror: boolean
  /** Identifies if the repository is private or internal. */
  isPrivate: boolean
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: boolean
  /** The license associated with the repository */
  licenseInfo?: License | null
  /** The reason the repository has been locked. */
  lockReason?: RepositoryLockReason | null
  /** The repository's original mirror URL. */
  mirrorUrl?: URI | null
  /** The name of the repository. */
  name: string
  /** The repository's name with owner. */
  nameWithOwner: string
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: URI
  /** The User owner of the repository. */
  owner: RepositoryOwner
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: DateTime | null
  /** The HTTP path for this repository */
  resourcePath: URI
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: HTML
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this repository */
  url: URI
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: boolean
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility
}
/** Repository interaction limit that applies to this object. */
export interface RepositoryInteractionAbility {
  __typename?: string
  /** The time the currently active limit expires. */
  expiresAt?: DateTime | null
  /** The current limit that is enabled on this object. */
  limit: RepositoryInteractionLimit
  /** The origin of the currently active interaction limit. */
  origin: RepositoryInteractionLimitOrigin
}
/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitation extends Node {
  __typename?: string
  /** The email address that received the invitation. */
  email?: string | null
  /** The Node ID of the RepositoryInvitation object */
  id: ID
  /** The user who received the invitation. */
  invitee?: User | null
  /** The user who created the invitation. */
  inviter: User
  /** The permalink for this repository invitation. */
  permalink: URI
  /** The permission granted on this repository by this invitation. */
  permission: RepositoryPermission
  /** The Repository the user is invited to. */
  repository?: RepositoryInfo | null
}
/** A list of repository invitations. */
export interface RepositoryInvitationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryInvitationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryInvitation | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryInvitationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryInvitation | null
}
/** A GitHub Enterprise Importer (GEI) repository migration. */
export interface RepositoryMigration extends Migration, Node {
  __typename?: string
  /** The migration flag to continue on error. */
  continueOnError: boolean
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: string | null
  /** The reason the migration failed. */
  failureReason?: string | null
  /** The Node ID of the RepositoryMigration object */
  id: ID
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: URI | null
  /** The migration source. */
  migrationSource: MigrationSource
  /** The target repository name. */
  repositoryName: string
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl: URI
  /** The migration state. */
  state: MigrationState
  /** The number of warnings encountered for this migration. To review the warnings,
   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount: Int
}
/** A list of migrations. */
export interface RepositoryMigrationConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryMigrationEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryMigration | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a repository migration. */
export interface RepositoryMigrationEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryMigration | null
}
/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTarget {
  __typename?: string
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: string[]
  /** Array of repository names or patterns to include. One of these patterns must
   * match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: string[]
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected: boolean
}
/** Represents a object that belongs to a repository. */
export interface RepositoryNode {
  __typename?: string
  /** The repository associated with this node. */
  repository: Repository
}
/** Represents an owner of a Repository. */
export interface RepositoryOwner {
  __typename?: string
  /** A URL pointing to the owner's public avatar. */
  avatarUrl: URI
  /** The Node ID of the RepositoryOwner object */
  id: ID
  /** The username used to login. */
  login: string
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection
  /** Find Repository. */
  repository?: Repository | null
  /** The HTTP URL for the owner. */
  resourcePath: URI
  /** The HTTP URL for the owner. */
  url: URI
}
/** Information about the availability of features and limits for a repository based on its billing plan. */
export interface RepositoryPlanFeatures {
  __typename?: string
  /** Whether reviews can be automatically requested and enforced with a CODEOWNERS file */
  codeowners: boolean
  /** Whether pull requests can be created as or converted to draft */
  draftPullRequests: boolean
  /** Maximum number of users that can be assigned to an issue or pull request */
  maximumAssignees: Int
  /** Maximum number of manually-requested reviews on a pull request */
  maximumManualReviewRequests: Int
  /** Whether teams can be requested to review pull requests */
  teamReviewRequests: boolean
}
/** Parameters to be used for the repository_property condition */
export interface RepositoryPropertyConditionTarget {
  __typename?: string
  /** Array of repository properties that must not match. */
  exclude: PropertyTargetDefinition[]
  /** Array of repository properties that must match */
  include: PropertyTargetDefinition[]
}
/** A repository rule. */
export interface RepositoryRule extends Node {
  __typename?: string
  /** The Node ID of the RepositoryRule object */
  id: ID
  /** The parameters for this rule. */
  parameters?: RuleParameters | null
  /** The repository ruleset associated with this rule configuration */
  repositoryRuleset?: RepositoryRuleset | null
  /** The type of rule. */
  type: RepositoryRuleType
}
/** Set of conditions that determine if a ruleset will evaluate */
export interface RepositoryRuleConditions {
  __typename?: string
  /** Configuration for the ref_name condition */
  refName?: RefNameConditionTarget | null
  /** Configuration for the repository_id condition */
  repositoryId?: RepositoryIdConditionTarget | null
  /** Configuration for the repository_name condition */
  repositoryName?: RepositoryNameConditionTarget | null
  /** Configuration for the repository_property condition */
  repositoryProperty?: RepositoryPropertyConditionTarget | null
}
/** The connection type for RepositoryRule. */
export interface RepositoryRuleConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryRuleEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryRule | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryRuleEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryRule | null
}
/** A repository ruleset. */
export interface RepositoryRuleset extends Node {
  __typename?: string
  /** The actors that can bypass this ruleset */
  bypassActors?: RepositoryRulesetBypassActorConnection | null
  /** The set of conditions that must evaluate to true for this ruleset to apply */
  conditions: RepositoryRuleConditions
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The enforcement level of this ruleset */
  enforcement: RuleEnforcement
  /** The Node ID of the RepositoryRuleset object */
  id: ID
  /** Name of the ruleset. */
  name: string
  /** List of rules. */
  rules?: RepositoryRuleConnection | null
  /** Source of ruleset. */
  source: RuleSource
  /** Target of the ruleset. */
  target?: RepositoryRulesetTarget | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** A team or app that has the ability to bypass a rules defined on a ruleset */
export interface RepositoryRulesetBypassActor extends Node {
  __typename?: string
  /** The actor that can bypass rules. */
  actor?: BypassActor | null
  /** The mode for the bypass actor */
  bypassMode?: RepositoryRulesetBypassActorBypassMode | null
  /** This actor represents the ability for a deploy key to bypass */
  deployKey: boolean
  /** This actor represents the ability for an enterprise owner to bypass */
  enterpriseOwner: boolean
  /** The Node ID of the RepositoryRulesetBypassActor object */
  id: ID
  /** This actor represents the ability for an organization owner to bypass */
  organizationAdmin: boolean
  /** If the actor is a repository role, the repository role's ID that can bypass */
  repositoryRoleDatabaseId?: Int | null
  /** If the actor is a repository role, the repository role's name that can bypass */
  repositoryRoleName?: string | null
  /** Identifies the ruleset associated with the allowed actor */
  repositoryRuleset?: RepositoryRuleset | null
}
/** The connection type for RepositoryRulesetBypassActor. */
export interface RepositoryRulesetBypassActorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryRulesetBypassActorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryRulesetBypassActor | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryRulesetBypassActorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryRulesetBypassActor | null
}
/** The connection type for RepositoryRuleset. */
export interface RepositoryRulesetConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryRulesetEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryRuleset | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryRulesetEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryRuleset | null
}
/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopic extends Node, UniformResourceLocatable {
  __typename?: string
  /** The Node ID of the RepositoryTopic object */
  id: ID
  /** The HTTP path for this repository-topic. */
  resourcePath: URI
  /** The topic. */
  topic: Topic
  /** The HTTP URL for this repository-topic. */
  url: URI
}
/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryTopicEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryTopic | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryTopicEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryTopic | null
}
/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntry extends AuditEntry, EnterpriseAuditEntryData, Node, OrganizationAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: URI | null
  /** The slug of the enterprise. */
  enterpriseSlug?: string | null
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: URI | null
  /** The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object */
  id: ID
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export interface RepositoryVulnerabilityAlert extends Node, RepositoryNode {
  __typename?: string
  /** When was the alert auto-dismissed? */
  autoDismissedAt?: DateTime | null
  /** When was the alert created? */
  createdAt: DateTime
  /** The associated Dependabot update */
  dependabotUpdate?: DependabotUpdate | null
  /** The scope of an alert's dependency */
  dependencyScope?: RepositoryVulnerabilityAlertDependencyScope | null
  /** Comment explaining the reason the alert was dismissed */
  dismissComment?: string | null
  /** The reason the alert was dismissed */
  dismissReason?: string | null
  /** When was the alert dismissed? */
  dismissedAt?: DateTime | null
  /** The user who dismissed the alert */
  dismisser?: User | null
  /** When was the alert fixed? */
  fixedAt?: DateTime | null
  /** The Node ID of the RepositoryVulnerabilityAlert object */
  id: ID
  /** Identifies the alert number. */
  number: Int
  /** The associated repository */
  repository: Repository
  /** The associated security advisory */
  securityAdvisory?: SecurityAdvisory | null
  /** The associated security vulnerability */
  securityVulnerability?: SecurityVulnerability | null
  /** Identifies the state of the alert. */
  state: RepositoryVulnerabilityAlertState
  /** The vulnerable manifest filename */
  vulnerableManifestFilename: string
  /** The vulnerable manifest path */
  vulnerableManifestPath: string
  /** The vulnerable requirements */
  vulnerableRequirements?: string | null
}
/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RepositoryVulnerabilityAlertEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RepositoryVulnerabilityAlert | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RepositoryVulnerabilityAlert | null
}
/** Autogenerated return type of ReprioritizeSubIssue. */
export interface ReprioritizeSubIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The parent issue that the sub-issue was reprioritized in. */
  issue?: Issue | null
}
/** The connection type for RequestedReviewer. */
export interface RequestedReviewerConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (RequestedReviewerEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (RequestedReviewer | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface RequestedReviewerEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: RequestedReviewer | null
}
/** Autogenerated return type of RequestReviews. */
export interface RequestReviewsPayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that is getting requests. */
  pullRequest?: PullRequest | null
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge?: UserEdge | null
}
/** Represents a type that can be required by a pull request for merging. */
export interface RequirableByPullRequest {
  __typename?: string
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: boolean
}
/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParameters {
  __typename?: string
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: string[]
}
/** Represents a required status check for a protected branch, but not any specific run of that check. */
export interface RequiredStatusCheckDescription {
  __typename?: string
  /** The App that must provide this status in order for it to be accepted. */
  app?: App | null
  /** The name of this status. */
  context: string
}
/** Choose which status checks must pass before the ref is updated. When enabled,
 * commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParameters {
  __typename?: string
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate: boolean
  /** Status checks that are required. */
  requiredStatusChecks: StatusCheckConfiguration[]
  /** Whether pull requests targeting a matching branch must be tested with the
   * latest code. This setting will not take effect unless at least one status
   * check is enabled. */
  strictRequiredStatusChecksPolicy: boolean
}
/** Autogenerated return type of RerequestCheckSuite. */
export interface RerequestCheckSuitePayload {
  __typename?: string
  /** The requested check suite. */
  checkSuite?: CheckSuite | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of ResolveReviewThread. */
export interface ResolveReviewThreadPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The thread to resolve. */
  thread?: PullRequestReviewThread | null
}
/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContribution extends Contribution {
  __typename?: string
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted: boolean
  /** When this contribution was made. */
  occurredAt: DateTime
  /** The HTTP path for this contribution. */
  resourcePath: URI
  /** The HTTP URL for this contribution. */
  url: URI
  /** The user who made this contribution. */
  user: User
}
/** Autogenerated return type of RetireSponsorsTier. */
export interface RetireSponsorsTierPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The tier that was retired. */
  sponsorsTier?: SponsorsTier | null
}
/** Autogenerated return type of RevertPullRequest. */
export interface RevertPullRequestPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The pull request that was reverted. */
  pullRequest?: PullRequest | null
  /** The new pull request that reverts the input pull request. */
  revertPullRequest?: PullRequest | null
}
/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowance extends Node {
  __typename?: string
  /** The actor that can dismiss. */
  actor?: ReviewDismissalAllowanceActor | null
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRule | null
  /** The Node ID of the ReviewDismissalAllowance object */
  id: ID
}
/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReviewDismissalAllowanceEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ReviewDismissalAllowance | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ReviewDismissalAllowance | null
}
/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEvent extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  dismissalMessage?: string | null
  /** Identifies the optional message associated with the event, rendered to HTML. */
  dismissalMessageHTML?: string | null
  /** The Node ID of the ReviewDismissedEvent object */
  id: ID
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  previousReviewState: PullRequestReviewState
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** Identifies the commit which caused the review to become stale. */
  pullRequestCommit?: PullRequestCommit | null
  /** The HTTP path for this review dismissed event. */
  resourcePath: URI
  /** Identifies the review associated with the 'review_dismissed' event. */
  review?: PullRequestReview | null
  /** The HTTP URL for this review dismissed event. */
  url: URI
}
/** A request for a user to review a pull request. */
export interface ReviewRequest extends Node {
  __typename?: string
  /** Whether this request was created for a code owner */
  asCodeOwner: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the ReviewRequest object */
  id: ID
  /** Identifies the pull request associated with this review request. */
  pullRequest: PullRequest
  /** The reviewer that is requested. */
  requestedReviewer?: RequestedReviewer | null
}
/** The connection type for ReviewRequest. */
export interface ReviewRequestConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (ReviewRequestEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (ReviewRequest | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ReviewRequestedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer?: RequestedReviewer | null
}
/** An edge in a connection. */
export interface ReviewRequestEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: ReviewRequest | null
}
/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the ReviewRequestRemovedEvent object */
  id: ID
  /** PullRequest referenced by event. */
  pullRequest: PullRequest
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer?: RequestedReviewer | null
}
/** A hovercard context with a message describing the current code review state of the pull
 * request. */
export interface ReviewStatusHovercardContext extends HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
  /** The current status of the pull request with respect to code review. */
  reviewDecision?: PullRequestReviewDecision | null
}
/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole. */
export interface RevokeEnterpriseOrganizationsMigratorRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organizations that had the migrator role revoked for the given user. */
  organizations?: OrganizationConnection | null
}
/** Autogenerated return type of RevokeMigratorRole. */
export interface RevokeMigratorRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Did the operation succeed? */
  success?: boolean | null
}
/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReply extends Node {
  __typename?: string
  /** The body of the saved reply. */
  body: string
  /** The saved reply body rendered to HTML. */
  bodyHTML: HTML
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the SavedReply object */
  id: ID
  /** The title of the saved reply. */
  title: string
  /** The user that saved this reply. */
  user?: Actor | null
}
/** The connection type for SavedReply. */
export interface SavedReplyConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SavedReplyEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SavedReply | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SavedReplyEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SavedReply | null
}
/** A list of results that matched against a search query. Regardless of the number
 * of matches, a maximum of 1,000 results will be available across all types,
 * potentially split across many pages. */
export interface SearchResultItemConnection {
  __typename?: string
  /** The total number of pieces of code that matched the search query. Regardless
   * of the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  codeCount: Int
  /** The total number of discussions that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  discussionCount: Int
  /** A list of edges. */
  edges?: (SearchResultItemEdge | null)[] | null
  /** The total number of issues that matched the search query. Regardless of the
   * total number of matches, a maximum of 1,000 results will be available across all types. */
  issueCount: Int
  /** A list of nodes. */
  nodes?: (SearchResultItem | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** The total number of repositories that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  repositoryCount: Int
  /** The total number of users that matched the search query. Regardless of the
   * total number of matches, a maximum of 1,000 results will be available across all types. */
  userCount: Int
  /** The total number of wiki pages that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  wikiCount: Int
}
/** An edge in a connection. */
export interface SearchResultItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SearchResultItem | null
  /** Text matches on the result found. */
  textMatches?: (TextMatch | null)[] | null
}
/** A GitHub Security Advisory */
export interface SecurityAdvisory extends Node {
  __typename?: string
  /** The classification of the advisory */
  classification: SecurityAdvisoryClassification
  /** The CVSS associated with this advisory
   *
   * @deprecated `cvss` will be removed. New `cvss_severities` field will now contain both `cvss_v3` and `cvss_v4` properties. Removal on 2025-10-01 UTC. */
  cvss: CVSS
  /** The CVSS associated with this advisory */
  cvssSeverities: CvssSeverities
  /** CWEs associated with this Advisory */
  cwes: CWEConnection
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** This is a long plaintext description of the advisory */
  description: string
  /** The Exploit Prediction Scoring System */
  epss?: EPSS | null
  /** The GitHub Security Advisory ID */
  ghsaId: string
  /** The Node ID of the SecurityAdvisory object */
  id: ID
  /** A list of identifiers for this advisory */
  identifiers: SecurityAdvisoryIdentifier[]
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink?: URI | null
  /** The organization that originated the advisory */
  origin: string
  /** The permalink for the advisory */
  permalink?: URI | null
  /** When the advisory was published */
  publishedAt: DateTime
  /** A list of references for this advisory */
  references: SecurityAdvisoryReference[]
  /** The severity of the advisory */
  severity: SecurityAdvisorySeverity
  /** A short plaintext summary of the advisory */
  summary: string
  /** When the advisory was last updated */
  updatedAt: DateTime
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities: SecurityVulnerabilityConnection
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt?: DateTime | null
}
/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SecurityAdvisoryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SecurityAdvisory | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SecurityAdvisoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SecurityAdvisory | null
}
/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifier {
  __typename?: string
  /** The identifier type, e.g. GHSA, CVE */
  type: string
  /** The identifier */
  value: string
}
/** An individual package */
export interface SecurityAdvisoryPackage {
  __typename?: string
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem: SecurityAdvisoryEcosystem
  /** The package name */
  name: string
}
/** An individual package version */
export interface SecurityAdvisoryPackageVersion {
  __typename?: string
  /** The package name or version */
  identifier: string
}
/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReference {
  __typename?: string
  /** A publicly accessible reference */
  url: URI
}
/** An individual vulnerability within an Advisory */
export interface SecurityVulnerability {
  __typename?: string
  /** The Advisory associated with this Vulnerability */
  advisory: SecurityAdvisory
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion?: SecurityAdvisoryPackageVersion | null
  /** A description of the vulnerable package */
  package: SecurityAdvisoryPackage
  /** The severity of the vulnerability within this package */
  severity: SecurityAdvisorySeverity
  /** When the vulnerability was last updated */
  updatedAt: DateTime
  /** A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
  vulnerableVersionRange: string
}
/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SecurityVulnerabilityEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SecurityVulnerability | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SecurityVulnerabilityEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SecurityVulnerability | null
}
/** Autogenerated return type of SetEnterpriseIdentityProvider. */
export interface SetEnterpriseIdentityProviderPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The identity provider for the enterprise. */
  identityProvider?: EnterpriseIdentityProvider | null
}
/** Autogenerated return type of SetOrganizationInteractionLimit. */
export interface SetOrganizationInteractionLimitPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organization that the interaction limit was set for. */
  organization?: Organization | null
}
/** Autogenerated return type of SetRepositoryInteractionLimit. */
export interface SetRepositoryInteractionLimitPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository that the interaction limit was set for. */
  repository?: Repository | null
}
/** Autogenerated return type of SetUserInteractionLimit. */
export interface SetUserInteractionLimitPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The user that the interaction limit was set for. */
  user?: User | null
}
/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignature extends GitSignature {
  __typename?: string
  /** Email used to sign this object. */
  email: string
  /** True if the signature is valid and verified by GitHub. */
  isValid: boolean
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: string
  /** ASCII-armored signature header from object. */
  signature: string
  /** GitHub user corresponding to the email signing this commit. */
  signer?: User | null
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState
  /** The date the signature was verified, if valid */
  verifiedAt?: DateTime | null
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: boolean
}
/** Social media profile associated with a user. */
export interface SocialAccount {
  __typename?: string
  /** Name of the social media account as it appears on the profile. */
  displayName: string
  /** Software or company that hosts the social media account. */
  provider: SocialAccountProvider
  /** URL of the social media account. */
  url: URI
}
/** The connection type for SocialAccount. */
export interface SocialAccountConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SocialAccountEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SocialAccount | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SocialAccountEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SocialAccount | null
}
/** Entities that can sponsor or be sponsored through GitHub Sponsors. */
export interface Sponsorable {
  __typename?: string
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Int
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: boolean
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy: boolean
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: boolean
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Int
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListing | null
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: Sponsorship | null
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: Sponsorship | null
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer: SponsorshipConnection
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor: SponsorshipConnection
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: Int | null
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: boolean
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: boolean
}
/** The connection type for SponsorableItem. */
export interface SponsorableItemConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorableItemEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SponsorableItem | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SponsorableItemEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SponsorableItem | null
}
/** A GitHub account and the total amount in USD they've paid for sponsorships to a
 * particular maintainer. Does not include payments made via Patreon. */
export interface SponsorAndLifetimeValue {
  __typename?: string
  /** The amount in cents. */
  amountInCents: Int
  /** The amount in USD, formatted as a string. */
  formattedAmount: string
  /** The sponsor's GitHub account. */
  sponsor: Sponsorable
  /** The maintainer's GitHub account. */
  sponsorable: Sponsorable
}
/** The connection type for SponsorAndLifetimeValue. */
export interface SponsorAndLifetimeValueConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorAndLifetimeValueEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SponsorAndLifetimeValue | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SponsorAndLifetimeValueEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SponsorAndLifetimeValue | null
}
/** A list of users and organizations sponsoring someone via GitHub Sponsors. */
export interface SponsorConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Sponsor | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export interface SponsorEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Sponsor | null
}
/** An event related to sponsorship activity. */
export interface SponsorsActivity extends Node {
  __typename?: string
  /** What action this activity indicates took place. */
  action: SponsorsActivityAction
  /** The sponsor's current privacy level. */
  currentPrivacyLevel?: SponsorshipPrivacy | null
  /** The Node ID of the SponsorsActivity object */
  id: ID
  /** The platform that was used to pay for the sponsorship. */
  paymentSource?: SponsorshipPaymentSource | null
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier?: SponsorsTier | null
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor?: Sponsor | null
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable: Sponsorable
  /** The associated sponsorship tier. */
  sponsorsTier?: SponsorsTier | null
  /** The timestamp of this event. */
  timestamp?: DateTime | null
  /** Was this sponsorship made alongside other sponsorships at the same time from the same sponsor? */
  viaBulkSponsorship: boolean
}
/** The connection type for SponsorsActivity. */
export interface SponsorsActivityConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorsActivityEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SponsorsActivity | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SponsorsActivityEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SponsorsActivity | null
}
/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export interface SponsorsGoal {
  __typename?: string
  /** A description of the goal from the maintainer. */
  description?: string | null
  /** What the objective of this goal is. */
  kind: SponsorsGoalKind
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete: Int
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship
   * amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue: Int
  /** A brief summary of the kind and target value of this goal. */
  title: string
}
/** A sponsorship relationship between a sponsor and a maintainer */
export interface Sponsorship extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the Sponsorship object */
  id: ID
  /** Whether the sponsorship is active. False implies the sponsor is a past sponsor
   * of the maintainer, while true implies they are a current sponsor. */
  isActive: boolean
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment: boolean
  /** Whether the sponsor has chosen to receive sponsorship update emails sent from
   * the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail?: boolean | null
  /** The entity that is being sponsored
   *
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC. */
  maintainer: User
  /** The platform that was most recently used to pay for the sponsorship. */
  paymentSource?: SponsorshipPaymentSource | null
  /** The privacy level for this sponsorship. */
  privacyLevel: SponsorshipPrivacy
  /** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   *
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC. */
  sponsor?: User | null
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity?: Sponsor | null
  /** The entity that is being sponsored */
  sponsorable: Sponsorable
  /** The associated sponsorship tier */
  tier?: SponsorsTier | null
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt?: DateTime | null
}
/** A list of sponsorships either from the subject or received by the subject. */
export interface SponsorshipConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorshipEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Sponsorship | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
  /** The total amount in cents of all recurring sponsorships in the connection
   * whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents: Int
  /** The total amount in USD of all recurring sponsorships in the connection whose
   * amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars: Int
}
/** An edge in a connection. */
export interface SponsorshipEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Sponsorship | null
}
/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export interface SponsorshipNewsletter extends Node {
  __typename?: string
  /** The author of the newsletter. */
  author?: User | null
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the SponsorshipNewsletter object */
  id: ID
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished: boolean
  /** The user or organization this newsletter is from. */
  sponsorable: Sponsorable
  /** The subject of the newsletter, what it's about. */
  subject: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** The connection type for SponsorshipNewsletter. */
export interface SponsorshipNewsletterConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorshipNewsletterEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SponsorshipNewsletter | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SponsorshipNewsletterEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SponsorshipNewsletter | null
}
/** A GitHub Sponsors listing. */
export interface SponsorsListing extends Node {
  __typename?: string
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal?: SponsorsGoal | null
  /** The Stripe Connect account currently in use for payouts for this Sponsors
   * listing, if any. Will only return a value when queried by the maintainer
   * themselves, or by an admin of the sponsorable organization. */
  activeStripeConnectAccount?: StripeConnectAccount | null
  /** The name of the country or region with the maintainer's bank account or fiscal
   * host. Will only return a value when queried by the maintainer themselves, or
   * by an admin of the sponsorable organization. */
  billingCountryOrRegion?: string | null
  /** The email address used by GitHub to contact the sponsorable about their GitHub
   * Sponsors profile. Will only return a value when queried by the maintainer
   * themselves, or by an admin of the sponsorable organization. */
  contactEmailAddress?: string | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
  dashboardResourcePath: URI
  /** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
  dashboardUrl: URI
  /** The records featured on the GitHub Sponsors profile. */
  featuredItems: SponsorsListingFeaturedItem[]
  /** The fiscal host used for payments, if any. Will only return a value when
   * queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  fiscalHost?: Organization | null
  /** The full description of the listing. */
  fullDescription: string
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML: HTML
  /** The Node ID of the SponsorsListing object */
  id: ID
  /** Whether this listing is publicly visible. */
  isPublic: boolean
  /** The listing's full name. */
  name: string
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate?: Date | null
  /** The name of the country or region where the maintainer resides. Will only
   * return a value when queried by the maintainer themselves, or by an admin of
   * the sponsorable organization. */
  residenceCountryOrRegion?: string | null
  /** The HTTP path for this Sponsors listing. */
  resourcePath: URI
  /** The short description of the listing. */
  shortDescription: string
  /** The short name of the listing. */
  slug: string
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable: Sponsorable
  /** The tiers for this GitHub Sponsors profile. */
  tiers?: SponsorsTierConnection | null
  /** The HTTP URL for this Sponsors listing. */
  url: URI
}
/** A record that is promoted on a GitHub Sponsors profile. */
export interface SponsorsListingFeaturedItem extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Will either be a description from the sponsorable maintainer about why they
   * featured this item, or the item's description itself, such as a user's bio
   * from their GitHub profile page. */
  description?: string | null
  /** The record that is featured on the GitHub Sponsors profile. */
  featureable: SponsorsListingFeatureableItem
  /** The Node ID of the SponsorsListingFeaturedItem object */
  id: ID
  /** The position of this featured item on the GitHub Sponsors profile with a lower
   * position indicating higher precedence. Starts at 1. */
  position: Int
  /** The GitHub Sponsors profile that features this record. */
  sponsorsListing: SponsorsListing
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTier extends Node {
  __typename?: string
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo?: SponsorsTierAdminInfo | null
  /** Get a different tier for this tier's maintainer that is at the same frequency
   * as this tier but with an equal or lesser cost. Returns the published tier with
   * the monthly price closest to this tier's without going over. */
  closestLesserValueTier?: SponsorsTier | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The description of the tier. */
  description: string
  /** The tier description rendered to HTML */
  descriptionHTML: HTML
  /** The Node ID of the SponsorsTier object */
  id: ID
  /** Whether this tier was chosen at checkout time by the sponsor rather than
   * defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount: boolean
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime: boolean
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents: Int
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars: Int
  /** The name of the tier. */
  name: string
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing: SponsorsListing
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfo {
  __typename?: string
  /** Indicates whether this tier is still a work in progress by the sponsorable and
   * not yet published to the associated GitHub Sponsors profile. Draft tiers
   * cannot be used for new sponsorships and will not be in use on existing
   * sponsorships. Draft tiers cannot be seen by anyone but the admins of the
   * GitHub Sponsors profile. */
  isDraft: boolean
  /** Indicates whether this tier is published to the associated GitHub Sponsors
   * profile. Published tiers are visible to anyone who can see the GitHub Sponsors
   * profile, and are available for use in sponsorships if the GitHub Sponsors
   * profile is publicly visible. */
  isPublished: boolean
  /** Indicates whether this tier has been retired from the associated GitHub
   * Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
   * profile and cannot be chosen for new sponsorships. Existing sponsorships may
   * still use retired tiers if the sponsor selected the tier before it was retired. */
  isRetired: boolean
  /** The sponsorships using this tier. */
  sponsorships: SponsorshipConnection
}
/** The connection type for SponsorsTier. */
export interface SponsorsTierConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SponsorsTierEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (SponsorsTier | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SponsorsTierEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: SponsorsTier | null
}
/** Represents an SSH signature on a Commit or Tag. */
export interface SshSignature extends GitSignature {
  __typename?: string
  /** Email used to sign this object. */
  email: string
  /** True if the signature is valid and verified by GitHub. */
  isValid: boolean
  /** Hex-encoded fingerprint of the key that signed this object. */
  keyFingerprint?: string | null
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: string
  /** ASCII-armored signature header from object. */
  signature: string
  /** GitHub user corresponding to the email signing this commit. */
  signer?: User | null
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState
  /** The date the signature was verified, if valid */
  verifiedAt?: DateTime | null
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: boolean
}
/** The connection type for User. */
export interface StargazerConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (StargazerEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user that's starred a repository. */
export interface StargazerEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  node: User
  /** Identifies when the item was starred. */
  starredAt: DateTime
}
/** Things that can be starred. */
export interface Starrable {
  __typename?: string
  /** The Node ID of the Starrable object */
  id: ID
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount: Int
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: boolean
}
/** The connection type for Repository. */
export interface StarredRepositoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (StarredRepositoryEdge | null)[] | null
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit: boolean
  /** A list of nodes. */
  nodes?: (Repository | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a starred repository. */
export interface StarredRepositoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  node: Repository
  /** Identifies when the item was starred. */
  starredAt: DateTime
}
/** Autogenerated return type of StartOrganizationMigration. */
export interface StartOrganizationMigrationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new organization migration. */
  orgMigration?: OrganizationMigration | null
}
/** Autogenerated return type of StartRepositoryMigration. */
export interface StartRepositoryMigrationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new repository migration. */
  repositoryMigration?: RepositoryMigration | null
}
/** Represents a commit status. */
export interface Status extends Node {
  __typename?: string
  /** A list of status contexts and check runs for this commit. */
  combinedContexts: StatusCheckRollupContextConnection
  /** The commit this status is attached to. */
  commit?: Commit | null
  /** Looks up an individual status context by context name. */
  context?: StatusContext | null
  /** The individual status contexts for this commit. */
  contexts: StatusContext[]
  /** The Node ID of the Status object */
  id: ID
  /** The combined commit status. */
  state: StatusState
}
/** Required status check */
export interface StatusCheckConfiguration {
  __typename?: string
  /** The status check context name that must be present on the commit. */
  context: string
  /** The optional integration ID that this status check must originate from. */
  integrationId?: Int | null
}
/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollup extends Node {
  __typename?: string
  /** The commit the status and check runs are attached to. */
  commit?: Commit | null
  /** A list of status contexts and check runs for this commit. */
  contexts: StatusCheckRollupContextConnection
  /** The Node ID of the StatusCheckRollup object */
  id: ID
  /** The combined status for the commit. */
  state: StatusState
}
/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnection {
  __typename?: string
  /** The number of check runs in this rollup. */
  checkRunCount: Int
  /** Counts of check runs by state. */
  checkRunCountsByState?: CheckRunStateCount[] | null
  /** A list of edges. */
  edges?: (StatusCheckRollupContextEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (StatusCheckRollupContext | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** The number of status contexts in this rollup. */
  statusContextCount: Int
  /** Counts of status contexts by state. */
  statusContextCountsByState?: StatusContextStateCount[] | null
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface StatusCheckRollupContextEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: StatusCheckRollupContext | null
}
/** Represents an individual commit status context */
export interface StatusContext extends Node, RequirableByPullRequest {
  __typename?: string
  /** The avatar of the OAuth application or the user that created the status */
  avatarUrl?: URI | null
  /** This commit this status context is attached to. */
  commit?: Commit | null
  /** The name of this status context. */
  context: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The actor who created this status context. */
  creator?: Actor | null
  /** The description for this status context. */
  description?: string | null
  /** The Node ID of the StatusContext object */
  id: ID
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: boolean
  /** The state of this status context. */
  state: StatusState
  /** The URL for this status context. */
  targetUrl?: URI | null
}
/** Represents a count of the state of a status context. */
export interface StatusContextStateCount {
  __typename?: string
  /** The number of statuses with this state. */
  count: Int
  /** The state of a status context. */
  state: StatusState
}
/** A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors. */
export interface StripeConnectAccount {
  __typename?: string
  /** The account number used to identify this Stripe Connect account. */
  accountId: string
  /** The name of the country or region of an external account, such as a bank
   * account, tied to the Stripe Connect account. Will only return a value when
   * queried by the maintainer of the associated GitHub Sponsors profile
   * themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion?: string | null
  /** The name of the country or region of the Stripe Connect account. Will only
   * return a value when queried by the maintainer of the associated GitHub
   * Sponsors profile themselves, or by an admin of the sponsorable organization. */
  countryOrRegion?: string | null
  /** Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile. */
  isActive: boolean
  /** The GitHub Sponsors profile associated with this Stripe Connect account. */
  sponsorsListing: SponsorsListing
  /** The URL to access this Stripe Connect account on Stripe's website. */
  stripeDashboardUrl: URI
}
/** Represents a 'sub_issue_added' event on a given issue. */
export interface SubIssueAddedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the SubIssueAddedEvent object */
  id: ID
  /** The sub-issue added. */
  subIssue?: Issue | null
}
/** Represents a 'sub_issue_removed' event on a given issue. */
export interface SubIssueRemovedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the SubIssueRemovedEvent object */
  id: ID
  /** The sub-issue removed. */
  subIssue?: Issue | null
}
/** Summary of the state of an issue's sub-issues */
export interface SubIssuesSummary {
  __typename?: string
  /** Count of completed sub-issues */
  completed: Int
  /** Percent of sub-issues which are completed */
  percentCompleted: Int
  /** Count of total number of sub-issues */
  total: Int
}
/** Autogenerated return type of SubmitPullRequestReview. */
export interface SubmitPullRequestReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The submitted pull request review. */
  pullRequestReview?: PullRequestReview | null
}
/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface Submodule {
  __typename?: string
  /** The branch of the upstream submodule for tracking updates */
  branch?: string | null
  /** The git URL of the submodule repository */
  gitUrl: URI
  /** The name of the submodule in .gitmodules */
  name: string
  /** The name of the submodule in .gitmodules (Base64-encoded) */
  nameRaw: Base64String
  /** The path in the superproject that this submodule is located in */
  path: string
  /** The path in the superproject that this submodule is located in (Base64-encoded) */
  pathRaw: Base64String
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid?: GitObjectID | null
}
/** The connection type for Submodule. */
export interface SubmoduleConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (SubmoduleEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Submodule | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface SubmoduleEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Submodule | null
}
/** Entities that can be subscribed to for web and email notifications. */
export interface Subscribable {
  __typename?: string
  /** The Node ID of the Subscribable object */
  id: ID
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
}
/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribableThread {
  __typename?: string
  /** The Node ID of the SubscribableThread object */
  id: ID
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: ThreadSubscriptionFormAction | null
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: ThreadSubscriptionState | null
}
/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the SubscribedEvent object */
  id: ID
  /** Object referenced by event. */
  subscribable: Subscribable
}
/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewer {
  __typename?: string
  /** Is this suggestion based on past commits? */
  isAuthor: boolean
  /** Is this suggestion based on past review comments? */
  isCommenter: boolean
  /** Identifies the user suggested to review the pull request. */
  reviewer: User
}
/** Represents a Git tag. */
export interface Tag extends GitObject, Node {
  __typename?: string
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: string
  /** The HTTP path for this Git object */
  commitResourcePath: URI
  /** The HTTP URL for this Git object */
  commitUrl: URI
  /** The Node ID of the Tag object */
  id: ID
  /** The Git tag message. */
  message?: string | null
  /** The Git tag name. */
  name: string
  /** The Git object ID */
  oid: GitObjectID
  /** The Repository the Git object belongs to */
  repository: Repository
  /** Details about the tag author. */
  tagger?: GitActor | null
  /** The Git object the tag points to. */
  target: GitObject
}
/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParameters {
  __typename?: string
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate: boolean
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** A team of users in an organization. */
export interface Team extends MemberStatusable, Node, Subscribable {
  __typename?: string
  /** A list of teams that are ancestors of this team. */
  ancestors: TeamConnection
  /** A URL pointing to the team's avatar. */
  avatarUrl?: URI | null
  /** List of child teams belonging to this team */
  childTeams: TeamConnection
  /** The slug corresponding to the organization and team. */
  combinedSlug: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The description of the team. */
  description?: string | null
  /** Find a team discussion by its number. */
  discussion?: TeamDiscussion | null
  /** A list of team discussions. */
  discussions: TeamDiscussionConnection
  /** The HTTP path for team discussions */
  discussionsResourcePath: URI
  /** The HTTP URL for team discussions */
  discussionsUrl: URI
  /** The HTTP path for editing this team */
  editTeamResourcePath: URI
  /** The HTTP URL for editing this team */
  editTeamUrl: URI
  /** The Node ID of the Team object */
  id: ID
  /** A list of pending invitations for users to this team */
  invitations?: OrganizationInvitationConnection | null
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection
  /** A list of users who are members of this team. */
  members: TeamMemberConnection
  /** The HTTP path for the team' members */
  membersResourcePath: URI
  /** The HTTP URL for the team' members */
  membersUrl: URI
  /** The name of the team. */
  name: string
  /** The HTTP path creating a new team */
  newTeamResourcePath: URI
  /** The HTTP URL creating a new team */
  newTeamUrl: URI
  /** The notification setting that the team has set. */
  notificationSetting: TeamNotificationSetting
  /** The organization that owns this team. */
  organization: Organization
  /** The parent team of the team. */
  parentTeam?: Team | null
  /** The level of privacy the team has. */
  privacy: TeamPrivacy
  /** Finds and returns the project according to the provided project number. */
  projectV2?: ProjectV2 | null
  /** List of projects this team has collaborator access to. */
  projectsV2: ProjectV2Connection
  /** A list of repositories this team has access to. */
  repositories: TeamRepositoryConnection
  /** The HTTP path for this team's repositories */
  repositoriesResourcePath: URI
  /** The HTTP URL for this team's repositories */
  repositoriesUrl: URI
  /** The HTTP path for this team */
  resourcePath: URI
  /** What algorithm is used for review assignment for this team */
  reviewRequestDelegationAlgorithm?: TeamReviewAssignmentAlgorithm | null
  /** True if review assignment is enabled for this team */
  reviewRequestDelegationEnabled: boolean
  /** How many team members are required for review assignment for this team */
  reviewRequestDelegationMemberCount?: Int | null
  /** When assigning team members via delegation, whether the entire team should be notified as well. */
  reviewRequestDelegationNotifyTeam: boolean
  /** The slug corresponding to the team. */
  slug: string
  /** The HTTP path for this team's teams */
  teamsResourcePath: URI
  /** The HTTP URL for this team's teams */
  teamsUrl: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this team */
  url: URI
  /** Team is adminable by the viewer. */
  viewerCanAdminister: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
}
/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the TeamAddMemberAuditEntry object */
  id: ID
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData, TeamAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the TeamAddRepositoryAuditEntry object */
  id: ID
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryData {
  __typename?: string
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
}
/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the TeamChangeParentTeamAuditEntry object */
  id: ID
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The new parent team. */
  parentTeam?: Team | null
  /** The name of the new parent team */
  parentTeamName?: string | null
  /** The name of the former parent team */
  parentTeamNameWas?: string | null
  /** The HTTP path for the parent team */
  parentTeamResourcePath?: URI | null
  /** The HTTP URL for the parent team */
  parentTeamUrl?: URI | null
  /** The former parent team. */
  parentTeamWas?: Team | null
  /** The HTTP path for the previous parent team */
  parentTeamWasResourcePath?: URI | null
  /** The HTTP URL for the previous parent team */
  parentTeamWasUrl?: URI | null
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** The connection type for Team. */
export interface TeamConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (TeamEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Team | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** A team discussion. */
export interface TeamDiscussion extends Comment, Deletable, Node, Reactable, Subscribable, UniformResourceLocatable, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the discussion's team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  authorAssociation: CommentAuthorAssociation
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** Identifies the discussion body hash.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  bodyVersion: string
  /** A list of comments on this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  comments: TeamDiscussionCommentConnection
  /** The HTTP path for discussion comments
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  commentsResourcePath: URI
  /** The HTTP URL for discussion comments
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  commentsUrl: URI
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the TeamDiscussion object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** Whether or not the discussion is pinned.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  isPinned: boolean
  /** Whether or not the discussion is only visible to team members and organization owners.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  isPrivate: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Identifies the discussion within its team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  number: Int
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The HTTP path for this discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  resourcePath: URI
  /** The team that defines the context of this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  team: Team
  /** The title of the discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  title: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Whether or not the current viewer can pin this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  viewerCanPin: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: SubscriptionState | null
}
/** A comment on a team discussion. */
export interface TeamDiscussionComment extends Comment, Deletable, Node, Reactable, UniformResourceLocatable, Updatable, UpdatableComment {
  __typename?: string
  /** The actor who authored the comment. */
  author?: Actor | null
  /** Author's association with the comment's team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  authorAssociation: CommentAuthorAssociation
  /** The body as Markdown. */
  body: string
  /** The body rendered to HTML. */
  bodyHTML: HTML
  /** The body rendered to text. */
  bodyText: string
  /** The current version of the body content.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  bodyVersion: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Check if this comment was created via an email reply. */
  createdViaEmail: boolean
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The discussion this comment is about.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  discussion: TeamDiscussion
  /** The actor who edited the comment. */
  editor?: Actor | null
  /** The Node ID of the TeamDiscussionComment object */
  id: ID
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: boolean
  /** The moment the editor made the last edit */
  lastEditedAt?: DateTime | null
  /** Identifies the comment number.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  number: Int
  /** Identifies when the comment was published at. */
  publishedAt?: DateTime | null
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroup[] | null
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection
  /** The HTTP path for this comment
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  resourcePath: URI
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this comment
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  url: URI
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnection | null
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: boolean
  /** Can user react to this subject */
  viewerCanReact: boolean
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  /** Did the viewer author this comment. */
  viewerDidAuthor: boolean
}
/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (TeamDiscussionCommentEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (TeamDiscussionComment | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface TeamDiscussionCommentEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: TeamDiscussionComment | null
}
/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (TeamDiscussionEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (TeamDiscussion | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface TeamDiscussionEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: TeamDiscussion | null
}
/** An edge in a connection. */
export interface TeamEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: Team | null
}
/** The connection type for User. */
export interface TeamMemberConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (TeamMemberEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a user who is a member of a team. */
export interface TeamMemberEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath: URI
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl: URI
  node: User
  /** The role the member has on the team. */
  role: TeamMemberRole
}
/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, TeamAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the TeamRemoveMemberAuditEntry object */
  id: ID
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntry extends AuditEntry, Node, OrganizationAuditEntryData, RepositoryAuditEntryData, TeamAuditEntryData {
  __typename?: string
  /** The action name */
  action: string
  /** The user who initiated the action */
  actor?: AuditEntryActor | null
  /** The IP address of the actor */
  actorIp?: string | null
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocation | null
  /** The username of the user who initiated the action */
  actorLogin?: string | null
  /** The HTTP path for the actor. */
  actorResourcePath?: URI | null
  /** The HTTP URL for the actor. */
  actorUrl?: URI | null
  /** The time the action was initiated */
  createdAt: PreciseDateTime
  /** The Node ID of the TeamRemoveRepositoryAuditEntry object */
  id: ID
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | null
  /** The corresponding operation type for the action */
  operationType?: OperationType | null
  /** The Organization associated with the Audit Entry. */
  organization?: Organization | null
  /** The name of the Organization. */
  organizationName?: string | null
  /** The HTTP path for the organization */
  organizationResourcePath?: URI | null
  /** The HTTP URL for the organization */
  organizationUrl?: URI | null
  /** The repository associated with the action */
  repository?: Repository | null
  /** The name of the repository */
  repositoryName?: string | null
  /** The HTTP path for the repository */
  repositoryResourcePath?: URI | null
  /** The HTTP URL for the repository */
  repositoryUrl?: URI | null
  /** The team associated with the action */
  team?: Team | null
  /** The name of the team */
  teamName?: string | null
  /** The HTTP path for this team */
  teamResourcePath?: URI | null
  /** The HTTP URL for this team */
  teamUrl?: URI | null
  /** The user affected by the action */
  user?: User | null
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: string | null
  /** The HTTP path for the user. */
  userResourcePath?: URI | null
  /** The HTTP URL for the user. */
  userUrl?: URI | null
}
/** The connection type for Repository. */
export interface TeamRepositoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (TeamRepositoryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (Repository | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** Represents a team repository. */
export interface TeamRepositoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  node: Repository
  /** The permission level the team has on the repository */
  permission: RepositoryPermission
}
/** A text match within a search result. */
export interface TextMatch {
  __typename?: string
  /** The specific text fragment within the property matched on. */
  fragment: string
  /** Highlights within the matched fragment. */
  highlights: TextMatchHighlight[]
  /** The property matched on. */
  property: string
}
/** Represents a single highlight in a search result match. */
export interface TextMatchHighlight {
  __typename?: string
  /** The indice in the fragment where the matched text begins. */
  beginIndice: Int
  /** The indice in the fragment where the matched text ends. */
  endIndice: Int
  /** The text matched. */
  text: string
}
/** A topic aggregates entities that are related to a subject. */
export interface Topic extends Node, Starrable {
  __typename?: string
  /** The Node ID of the Topic object */
  id: ID
  /** The topic's name. */
  name: string
  /** A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics. */
  relatedTopics: Topic[]
  /** A list of repositories. */
  repositories: RepositoryConnection
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount: Int
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: boolean
}
/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryData {
  __typename?: string
  /** The name of the topic added to the repository */
  topic?: Topic | null
  /** The name of the topic added to the repository */
  topicName?: string | null
}
/** Autogenerated return type of TransferEnterpriseOrganization. */
export interface TransferEnterpriseOrganizationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organization for which a transfer was initiated. */
  organization?: Organization | null
}
/** Autogenerated return type of TransferIssue. */
export interface TransferIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue that was transferred */
  issue?: Issue | null
}
/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The repository this came from */
  fromRepository?: Repository | null
  /** The Node ID of the TransferredEvent object */
  id: ID
  /** Identifies the issue associated with the event. */
  issue: Issue
}
/** Represents a Git tree. */
export interface Tree extends GitObject, Node {
  __typename?: string
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: string
  /** The HTTP path for this Git object */
  commitResourcePath: URI
  /** The HTTP URL for this Git object */
  commitUrl: URI
  /** A list of tree entries. */
  entries?: TreeEntry[] | null
  /** The Node ID of the Tree object */
  id: ID
  /** The Git object ID */
  oid: GitObjectID
  /** The Repository the Git object belongs to */
  repository: Repository
}
/** Represents a Git tree entry. */
export interface TreeEntry {
  __typename?: string
  /** The extension of the file */
  extension?: string | null
  /** Whether or not this tree entry is generated */
  isGenerated: boolean
  /** The programming language this file is written in. */
  language?: Language | null
  /** Number of lines in the file. */
  lineCount?: Int | null
  /** Entry file mode. */
  mode: Int
  /** Entry file name. */
  name: string
  /** Entry file name. (Base64-encoded) */
  nameRaw: Base64String
  /** Entry file object. */
  object?: GitObject | null
  /** Entry file Git object ID. */
  oid: GitObjectID
  /** The full path of the file. */
  path?: string | null
  /** The full path of the file. (Base64-encoded) */
  pathRaw?: Base64String | null
  /** The Repository the tree entry belongs to */
  repository: Repository
  /** Entry byte size */
  size: Int
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule?: Submodule | null
  /** Entry file type. */
  type: string
}
/** Autogenerated return type of UnarchiveProjectV2Item. */
export interface UnarchiveProjectV2ItemPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item unarchived from the project. */
  item?: ProjectV2Item | null
}
/** Autogenerated return type of UnarchiveRepository. */
export interface UnarchiveRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository that was unarchived. */
  repository?: Repository | null
}
/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the assignable associated with the event. */
  assignable: Assignable
  /** Identifies the user or mannequin that was unassigned. */
  assignee?: Assignee | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UnassignedEvent object */
  id: ID
  /** Identifies the subject (user) who was unassigned.
   *
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC. */
  user?: User | null
}
/** Autogenerated return type of UnfollowOrganization. */
export interface UnfollowOrganizationPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The organization that was unfollowed. */
  organization?: Organization | null
}
/** Autogenerated return type of UnfollowUser. */
export interface UnfollowUserPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The user that was unfollowed. */
  user?: User | null
}
/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatable {
  __typename?: string
  /** The HTML path to this resource. */
  resourcePath: URI
  /** The URL to this resource. */
  url: URI
}
/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignature extends GitSignature {
  __typename?: string
  /** Email used to sign this object. */
  email: string
  /** True if the signature is valid and verified by GitHub. */
  isValid: boolean
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: string
  /** ASCII-armored signature header from object. */
  signature: string
  /** GitHub user corresponding to the email signing this commit. */
  signer?: User | null
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState
  /** The date the signature was verified, if valid */
  verifiedAt?: DateTime | null
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: boolean
}
/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UnlabeledEvent object */
  id: ID
  /** Identifies the label associated with the 'unlabeled' event. */
  label: Label
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable
}
/** Autogenerated return type of UnlinkProjectV2FromRepository. */
export interface UnlinkProjectV2FromRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository the project is no longer linked to. */
  repository?: Repository | null
}
/** Autogenerated return type of UnlinkProjectV2FromTeam. */
export interface UnlinkProjectV2FromTeamPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The team the project is unlinked from */
  team?: Team | null
}
/** Autogenerated return type of UnlinkRepositoryFromProject. */
export interface UnlinkRepositoryFromProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The linked Project. */
  project?: Project | null
  /** The linked Repository. */
  repository?: Repository | null
}
/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UnlockedEvent object */
  id: ID
  /** Object that was unlocked. */
  lockable: Lockable
}
/** Autogenerated return type of UnlockLockable. */
export interface UnlockLockablePayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item that was unlocked. */
  unlockedRecord?: Lockable | null
}
/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer. */
export interface UnmarkDiscussionCommentAsAnswerPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion that includes the comment. */
  discussion?: Discussion | null
}
/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: IssueOrPullRequest | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: IssueOrPullRequest | null
  /** The Node ID of the UnmarkedAsDuplicateEvent object */
  id: ID
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: boolean
}
/** Autogenerated return type of UnmarkFileAsViewed. */
export interface UnmarkFileAsViewedPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated pull request. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of UnmarkIssueAsDuplicate. */
export interface UnmarkIssueAsDuplicatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue or pull request that was marked as a duplicate. */
  duplicate?: IssueOrPullRequest | null
}
/** Autogenerated return type of UnmarkProjectV2AsTemplate. */
export interface UnmarkProjectV2AsTemplatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of UnminimizeComment. */
export interface UnminimizeCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The comment that was unminimized. */
  unminimizedComment?: Minimizable | null
}
/** Autogenerated return type of UnpinIssue. */
export interface UnpinIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the pinned issue that was unpinned */
  id?: ID | null
  /** The issue that was unpinned */
  issue?: Issue | null
}
/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UnpinnedEvent object */
  id: ID
  /** Identifies the issue associated with the event. */
  issue: Issue
}
/** Autogenerated return type of UnresolveReviewThread. */
export interface UnresolveReviewThreadPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The thread to resolve. */
  thread?: PullRequestReviewThread | null
}
/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UnsubscribedEvent object */
  id: ID
  /** Object referenced by event. */
  subscribable: Subscribable
}
/** Entities that can be updated. */
export interface Updatable {
  __typename?: string
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: boolean
}
/** Comments that can be updated. */
export interface UpdatableComment {
  __typename?: string
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
}
/** Autogenerated return type of UpdateBranchProtectionRule. */
export interface UpdateBranchProtectionRulePayload {
  __typename?: string
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: BranchProtectionRule | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of UpdateCheckRun. */
export interface UpdateCheckRunPayload {
  __typename?: string
  /** The updated check run. */
  checkRun?: CheckRun | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of UpdateCheckSuitePreferences. */
export interface UpdateCheckSuitePreferencesPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated repository. */
  repository?: Repository | null
}
/** Autogenerated return type of UpdateDiscussionComment. */
export interface UpdateDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The modified discussion comment. */
  comment?: DiscussionComment | null
}
/** Autogenerated return type of UpdateDiscussion. */
export interface UpdateDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The modified discussion. */
  discussion?: Discussion | null
}
/** Autogenerated return type of UpdateEnterpriseAdministratorRole. */
export interface UpdateEnterpriseAdministratorRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of changing the administrator's role. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting. */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting. */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated base repository permission setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the base repository permission setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseDeployKeySetting. */
export interface UpdateEnterpriseDeployKeySettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated deploy key setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the deploy key setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting. */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can change repository visibility setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can change repository visibility setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting. */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can create repositories setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can create repositories setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting. */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can delete issues setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can delete issues setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting. */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can delete repositories setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting. */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting. */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can make purchases setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can make purchases setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting. */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can update protected branches setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting. */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting. */
export interface UpdateEnterpriseOrganizationProjectsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated organization projects setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the organization projects setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole. */
export interface UpdateEnterpriseOwnerOrganizationRolePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of changing the owner's organization role. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseProfile. */
export interface UpdateEnterpriseProfilePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated enterprise. */
  enterprise?: Enterprise | null
}
/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting. */
export interface UpdateEnterpriseRepositoryProjectsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated repository projects setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the repository projects setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting. */
export interface UpdateEnterpriseTeamDiscussionsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated team discussions setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the team discussions setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting. */
export interface UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated two-factor authentication disallowed methods setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the two-factor authentication disallowed methods setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting. */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise?: Enterprise | null
  /** A message confirming the result of updating the two factor authentication required setting. */
  message?: string | null
}
/** Autogenerated return type of UpdateEnvironment. */
export interface UpdateEnvironmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated environment. */
  environment?: Environment | null
}
/** Autogenerated return type of UpdateIpAllowListEnabledSetting. */
export interface UpdateIpAllowListEnabledSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The IP allow list owner on which the setting was updated. */
  owner?: IpAllowListOwner | null
}
/** Autogenerated return type of UpdateIpAllowListEntry. */
export interface UpdateIpAllowListEntryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The IP allow list entry that was updated. */
  ipAllowListEntry?: IpAllowListEntry | null
}
/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting. */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The IP allow list owner on which the setting was updated. */
  owner?: IpAllowListOwner | null
}
/** Autogenerated return type of UpdateIssueComment. */
export interface UpdateIssueCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated comment. */
  issueComment?: IssueComment | null
}
/** Autogenerated return type of UpdateIssue. */
export interface UpdateIssuePayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The issue. */
  issue?: Issue | null
}
/** Autogenerated return type of UpdateLabel. */
export interface UpdateLabelPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated label. */
  label?: Label | null
}
/** Autogenerated return type of UpdateNotificationRestrictionSetting. */
export interface UpdateNotificationRestrictionSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The owner on which the setting was updated. */
  owner?: VerifiableDomainOwner | null
}
/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting. */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: string | null
  /** The organization with the updated allow private repository forking setting. */
  organization?: Organization | null
}
/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting. */
export interface UpdateOrganizationWebCommitSignoffSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: string | null
  /** The organization with the updated web commit signoff setting. */
  organization?: Organization | null
}
/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParameters {
  __typename?: string
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: boolean
}
/** Autogenerated return type of UpdatePatreonSponsorability. */
export interface UpdatePatreonSponsorabilityPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The GitHub Sponsors profile. */
  sponsorsListing?: SponsorsListing | null
}
/** Autogenerated return type of UpdateProjectCard. */
export interface UpdateProjectCardPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated ProjectCard. */
  projectCard?: ProjectCard | null
}
/** Autogenerated return type of UpdateProjectColumn. */
export interface UpdateProjectColumnPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated project column. */
  projectColumn?: ProjectColumn | null
}
/** Autogenerated return type of UpdateProject. */
export interface UpdateProjectPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated project. */
  project?: Project | null
}
/** Autogenerated return type of UpdateProjectV2Collaborators. */
export interface UpdateProjectV2CollaboratorsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The collaborators granted a role */
  collaborators?: ProjectV2ActorConnection | null
}
/** Autogenerated return type of UpdateProjectV2DraftIssue. */
export interface UpdateProjectV2DraftIssuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The draft issue updated in the project. */
  draftIssue?: DraftIssue | null
}
/** Autogenerated return type of UpdateProjectV2Field. */
export interface UpdateProjectV2FieldPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated field. */
  projectV2Field?: ProjectV2FieldConfiguration | null
}
/** Autogenerated return type of UpdateProjectV2ItemFieldValue. */
export interface UpdateProjectV2ItemFieldValuePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated item. */
  projectV2Item?: ProjectV2Item | null
}
/** Autogenerated return type of UpdateProjectV2ItemPosition. */
export interface UpdateProjectV2ItemPositionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The items in the new order */
  items?: ProjectV2ItemConnection | null
}
/** Autogenerated return type of UpdateProjectV2. */
export interface UpdateProjectV2Payload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated Project. */
  projectV2?: ProjectV2 | null
}
/** Autogenerated return type of UpdateProjectV2StatusUpdate. */
export interface UpdateProjectV2StatusUpdatePayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The status update updated in the project. */
  statusUpdate?: ProjectV2StatusUpdate | null
}
/** Autogenerated return type of UpdatePullRequestBranch. */
export interface UpdatePullRequestBranchPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated pull request. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of UpdatePullRequest. */
export interface UpdatePullRequestPayload {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated pull request. */
  pullRequest?: PullRequest | null
}
/** Autogenerated return type of UpdatePullRequestReviewComment. */
export interface UpdatePullRequestReviewCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated comment. */
  pullRequestReviewComment?: PullRequestReviewComment | null
}
/** Autogenerated return type of UpdatePullRequestReview. */
export interface UpdatePullRequestReviewPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated pull request review. */
  pullRequestReview?: PullRequestReview | null
}
/** Autogenerated return type of UpdateRef. */
export interface UpdateRefPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated Ref. */
  ref?: Ref | null
}
/** Autogenerated return type of UpdateRefs. */
export interface UpdateRefsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated return type of UpdateRepository. */
export interface UpdateRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated repository. */
  repository?: Repository | null
}
/** Autogenerated return type of UpdateRepositoryRuleset. */
export interface UpdateRepositoryRulesetPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The newly created Ruleset. */
  ruleset?: RepositoryRuleset | null
}
/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting. */
export interface UpdateRepositoryWebCommitSignoffSettingPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: string | null
  /** The updated repository. */
  repository?: Repository | null
}
/** Autogenerated return type of UpdateSponsorshipPreferences. */
export interface UpdateSponsorshipPreferencesPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The sponsorship that was updated. */
  sponsorship?: Sponsorship | null
}
/** Autogenerated return type of UpdateSubscription. */
export interface UpdateSubscriptionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The input subscribable entity. */
  subscribable?: Subscribable | null
}
/** Autogenerated return type of UpdateTeamDiscussionComment. */
export interface UpdateTeamDiscussionCommentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated comment. */
  teamDiscussionComment?: TeamDiscussionComment | null
}
/** Autogenerated return type of UpdateTeamDiscussion. */
export interface UpdateTeamDiscussionPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The updated discussion. */
  teamDiscussion?: TeamDiscussion | null
}
/** Autogenerated return type of UpdateTeamReviewAssignment. */
export interface UpdateTeamReviewAssignmentPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The team that was modified */
  team?: Team | null
}
/** Autogenerated return type of UpdateTeamsRepository. */
export interface UpdateTeamsRepositoryPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The repository that was updated. */
  repository?: Repository | null
  /** The teams granted permission on the repository. */
  teams?: Team[] | null
}
/** Autogenerated return type of UpdateTopics. */
export interface UpdateTopicsPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Names of the provided topics that are not valid. */
  invalidTopicNames?: string[] | null
  /** The updated repository. */
  repository?: Repository | null
}
/** Autogenerated return type of UpdateUserList. */
export interface UpdateUserListPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The list that was just updated */
  list?: UserList | null
}
/** Autogenerated return type of UpdateUserListsForItem. */
export interface UpdateUserListsForItemPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item that was added */
  item?: UserListItems | null
  /** The lists to which this item belongs */
  lists?: UserList[] | null
  /** The user who owns the lists */
  user?: User | null
}
/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface User extends Actor, Node, PackageOwner, ProfileOwner, ProjectOwner, ProjectV2Owner, ProjectV2Recent, RepositoryDiscussionAuthor, RepositoryDiscussionCommentAuthor, RepositoryOwner, Sponsorable, UniformResourceLocatable {
  __typename?: string
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: boolean
  /** A URL pointing to the user's public avatar. */
  avatarUrl: URI
  /** The user's public profile bio. */
  bio?: string | null
  /** The user's public profile bio as HTML. */
  bioHTML: HTML
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: boolean
  /** A list of commit comments made by this user. */
  commitComments: CommitCommentConnection
  /** The user's public profile company. */
  company?: string | null
  /** The user's public profile company as HTML. */
  companyHTML: HTML
  /** The collection of contributions this user has made to different repositories. */
  contributionsCollection: ContributionsCollection
  /** The user's Copilot endpoint information */
  copilotEndpoints?: CopilotEndpoints | null
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The user's publicly visible profile email. */
  email: string
  /** A list of enterprises that the user belongs to. */
  enterprises?: EnterpriseConnection | null
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Int
  /** A list of users the given user is followed by. */
  followers: FollowerConnection
  /** A list of users the given user is following. */
  following: FollowingConnection
  /** Find gist by repo name. */
  gist?: Gist | null
  /** A list of gist comments made by this user. */
  gistComments: GistCommentConnection
  /** A list of the Gists the user has created. */
  gists: GistConnection
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: boolean
  /** The hovercard information for this user in a given context */
  hovercard: Hovercard
  /** The Node ID of the User object */
  id: ID
  /** The interaction ability settings for this user. */
  interactionAbility?: RepositoryInteractionAbility | null
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  isBountyHunter: boolean
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  isCampusExpert: boolean
  /** Whether or not this user is a GitHub Developer Program member. */
  isDeveloperProgramMember: boolean
  /** Whether or not this user is a GitHub employee. */
  isEmployee: boolean
  /** Whether or not this user is following the viewer. Inverse of viewerIsFollowing */
  isFollowingViewer: boolean
  /** Whether or not this user is a member of the GitHub Stars Program. */
  isGitHubStar: boolean
  /** Whether or not the user has marked themselves as for hire. */
  isHireable: boolean
  /** Whether or not this user is a site administrator. */
  isSiteAdmin: boolean
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy: boolean
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: boolean
  /** Whether or not this user is the viewing user. */
  isViewer: boolean
  /** A list of issue comments made by this user. */
  issueComments: IssueCommentConnection
  /** A list of issues associated with this user. */
  issues: IssueConnection
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection
  /** A user-curated list of repositories */
  lists: UserListConnection
  /** The user's public profile location. */
  location?: string | null
  /** The username used to login. */
  login: string
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Int
  /** The user's public profile name. */
  name?: string | null
  /** Find an organization by its login that the user belongs to. */
  organization?: Organization | null
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  organizationVerifiedDomainEmails: string[]
  /** A list of organizations the user belongs to. */
  organizations: OrganizationConnection
  /** A list of packages under the owner. */
  packages: PackageConnection
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Int
  /** Find project by number. */
  project?: Project | null
  /** Find a project by number. */
  projectV2?: ProjectV2 | null
  /** A list of projects under the owner. */
  projects: ProjectConnection
  /** The HTTP path listing user's projects */
  projectsResourcePath: URI
  /** The HTTP URL listing user's projects */
  projectsUrl: URI
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection
  /** The user's profile pronouns */
  pronouns?: string | null
  /** A list of public keys associated with this user. */
  publicKeys: PublicKeyConnection
  /** A list of pull requests associated with this user. */
  pullRequests: PullRequestConnection
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection
  /** A list of repositories that the user recently contributed to. */
  repositoriesContributedTo: RepositoryConnection
  /** Find Repository. */
  repository?: Repository | null
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection
  /** The HTTP path for this user */
  resourcePath: URI
  /** Replies this user has saved */
  savedReplies?: SavedReplyConnection | null
  /** The user's social media accounts, ordered as they appear on the user's profile. */
  socialAccounts: SocialAccountConnection
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListing | null
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: Sponsorship | null
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: Sponsorship | null
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer: SponsorshipConnection
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor: SponsorshipConnection
  /** Repositories the user has starred. */
  starredRepositories: StarredRepositoryConnection
  /** The user's description of what they're currently doing. */
  status?: UserStatus | null
  /** Suggested names for user lists */
  suggestedListNames: UserListSuggestion[]
  /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
  topRepositories: RepositoryConnection
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: Int | null
  /** The user's Twitter username. */
  twitterUsername?: string | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this user */
  url: URI
  /** Whether the request returns publicly visible information or privately visible information about the user */
  userViewType: UserViewType
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: boolean
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: boolean
  /** Whether or not the viewer is able to follow the user. */
  viewerCanFollow: boolean
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: boolean
  /** Whether or not this user is followed by the viewer. Inverse of isFollowingViewer. */
  viewerIsFollowing: boolean
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: boolean
  /** A list of repositories the given user is watching. */
  watching: RepositoryConnection
  /** A URL pointing to the user's public website/blog. */
  websiteUrl?: URI | null
}
/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEvent extends Node {
  __typename?: string
  /** Identifies the actor who performed the event. */
  actor?: Actor | null
  /** Number of days that the user was blocked for. */
  blockDuration: UserBlockDuration
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The Node ID of the UserBlockedEvent object */
  id: ID
  /** The user who was blocked. */
  subject?: User | null
}
/** A list of users. */
export interface UserConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (User | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edit on user content */
export interface UserContentEdit extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the date and time when the object was deleted. */
  deletedAt?: DateTime | null
  /** The actor who deleted this content */
  deletedBy?: Actor | null
  /** A summary of the changes for this edit */
  diff?: string | null
  /** When this content was edited */
  editedAt: DateTime
  /** The actor who edited this content */
  editor?: Actor | null
  /** The Node ID of the UserContentEdit object */
  id: ID
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
}
/** A list of edits to content. */
export interface UserContentEditConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserContentEditEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (UserContentEdit | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface UserContentEditEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: UserContentEdit | null
}
/** Represents a user. */
export interface UserEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: User | null
}
/** Email attributes from External Identity */
export interface UserEmailMetadata {
  __typename?: string
  /** Boolean to identify primary emails */
  primary?: boolean | null
  /** Type of email */
  type?: string | null
  /** Email id */
  value: string
}
/** A user-curated list of repositories */
export interface UserList extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** The description of this list */
  description?: string | null
  /** The Node ID of the UserList object */
  id: ID
  /** Whether or not this list is private */
  isPrivate: boolean
  /** The items associated with this list */
  items: UserListItemsConnection
  /** The date and time at which this list was created or last had items added to it */
  lastAddedAt: DateTime
  /** The name of this list */
  name: string
  /** The slug of this list */
  slug: string
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The user to which this list belongs */
  user: User
}
/** The connection type for UserList. */
export interface UserListConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserListEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (UserList | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface UserListEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: UserList | null
}
/** The connection type for UserListItems. */
export interface UserListItemsConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserListItemsEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (UserListItems | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface UserListItemsEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: UserListItems | null
}
/** Represents a suggested user list. */
export interface UserListSuggestion {
  __typename?: string
  /** The ID of the suggested user list */
  id?: ID | null
  /** The name of the suggested user list */
  name?: string | null
}
/** A repository owned by an Enterprise Managed user. */
export interface UserNamespaceRepository extends Node {
  __typename?: string
  /** The Node ID of the UserNamespaceRepository object */
  id: ID
  /** The name of the repository. */
  name: string
  /** The repository's name with owner. */
  nameWithOwner: string
  /** The user owner of the repository. */
  owner: RepositoryOwner
  /** The repository owned by an enterprise managed user. */
  repository?: RepositoryInfo | null
}
/** A list of repositories owned by users in an enterprise with Enterprise Managed Users. */
export interface UserNamespaceRepositoryConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserNamespaceRepositoryEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (UserNamespaceRepository | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface UserNamespaceRepositoryEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: UserNamespaceRepository | null
}
/** The user's description of what they're currently doing. */
export interface UserStatus extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** An emoji summarizing the user's status. */
  emoji?: string | null
  /** The status emoji as HTML. */
  emojiHTML?: HTML | null
  /** If set, the status will not be shown after this date. */
  expiresAt?: DateTime | null
  /** The Node ID of the UserStatus object */
  id: ID
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability: boolean
  /** A brief message describing what the user is doing. */
  message?: string | null
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization?: Organization | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The user who has this status. */
  user: User
}
/** The connection type for UserStatus. */
export interface UserStatusConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (UserStatusEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (UserStatus | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface UserStatusEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: UserStatus | null
}
/** A domain that can be verified or approved for an organization or an enterprise. */
export interface VerifiableDomain extends Node {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The DNS host name that should be used for verification. */
  dnsHostName?: URI | null
  /** The unicode encoded domain. */
  domain: URI
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName: boolean
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken: boolean
  /** The Node ID of the VerifiableDomain object */
  id: ID
  /** Whether or not the domain is approved. */
  isApproved: boolean
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement: boolean
  /** Whether or not the domain is verified. */
  isVerified: boolean
  /** The owner of the domain. */
  owner: VerifiableDomainOwner
  /** The punycode encoded domain. */
  punycodeEncodedDomain: URI
  /** The time that the current verification token will expire. */
  tokenExpirationTime?: DateTime | null
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The current verification token for the domain. */
  verificationToken?: string | null
}
/** The connection type for VerifiableDomain. */
export interface VerifiableDomainConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (VerifiableDomainEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (VerifiableDomain | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface VerifiableDomainEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: VerifiableDomain | null
}
/** Autogenerated return type of VerifyVerifiableDomain. */
export interface VerifyVerifiableDomainPayload {
  __typename?: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The verifiable domain that was verified. */
  domain?: VerifiableDomain | null
}
/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContext extends HovercardContext {
  __typename?: string
  /** A string describing this context */
  message: string
  /** An octicon to accompany this context */
  octicon: string
  /** Identifies the user who is related to this context. */
  viewer: User
}
/** A subject that may be upvoted. */
export interface Votable {
  __typename?: string
  /** Number of upvotes that this subject has received. */
  upvoteCount: Int
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: boolean
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: boolean
}
/** A workflow contains meta information about an Actions workflow file. */
export interface Workflow extends Node, UniformResourceLocatable {
  __typename?: string
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The Node ID of the Workflow object */
  id: ID
  /** The name of the workflow. */
  name: string
  /** The HTTP path for this workflow */
  resourcePath: URI
  /** The runs of the workflow. */
  runs: WorkflowRunConnection
  /** The state of the workflow. */
  state: WorkflowState
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this workflow */
  url: URI
}
/** A workflow that must run for this rule to pass */
export interface WorkflowFileReference {
  __typename?: string
  /** The path to the workflow file */
  path: string
  /** The ref (branch or tag) of the workflow file to use */
  ref?: string | null
  /** The ID of the repository where the workflow is defined */
  repositoryId: Int
  /** The commit SHA of the workflow file to use */
  sha?: string | null
}
/** A workflow run. */
export interface WorkflowRun extends Node, UniformResourceLocatable {
  __typename?: string
  /** The check suite this workflow run belongs to. */
  checkSuite: CheckSuite
  /** Identifies the date and time when the object was created. */
  createdAt: DateTime
  /** Identifies the primary key from the database. */
  databaseId?: Int | null
  /** The log of deployment reviews */
  deploymentReviews: DeploymentReviewConnection
  /** The event that triggered the workflow run */
  event: string
  /** The workflow file */
  file?: WorkflowRunFile | null
  /** The Node ID of the WorkflowRun object */
  id: ID
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests: DeploymentRequestConnection
  /** The HTTP path for this workflow run */
  resourcePath: URI
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber: Int
  /** Identifies the date and time when the object was last updated. */
  updatedAt: DateTime
  /** The HTTP URL for this workflow run */
  url: URI
  /** The workflow executed in this workflow run. */
  workflow: Workflow
}
/** The connection type for WorkflowRun. */
export interface WorkflowRunConnection {
  __typename?: string
  /** A list of edges. */
  edges?: (WorkflowRunEdge | null)[] | null
  /** A list of nodes. */
  nodes?: (WorkflowRun | null)[] | null
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** Identifies the total count of items in the connection. */
  totalCount: Int
}
/** An edge in a connection. */
export interface WorkflowRunEdge {
  __typename?: string
  /** A cursor for use in pagination. */
  cursor: string
  /** The item at the end of the edge. */
  node?: WorkflowRun | null
}
/** An executed workflow file for a workflow run. */
export interface WorkflowRunFile extends Node, UniformResourceLocatable {
  __typename?: string
  /** The Node ID of the WorkflowRunFile object */
  id: ID
  /** The path of the workflow file relative to its repository. */
  path: string
  /** The direct link to the file in the repository which stores the workflow file. */
  repositoryFileUrl: URI
  /** The repository name and owner which stores the workflow file. */
  repositoryName: URI
  /** The HTTP path for this workflow run file */
  resourcePath: URI
  /** The parent workflow run execution for this file. */
  run: WorkflowRun
  /** The HTTP URL for this workflow run file */
  url: URI
  /** If the viewer has permissions to push to the repository which stores the workflow. */
  viewerCanPushRepository: boolean
  /** If the viewer has permissions to read the repository which stores the workflow. */
  viewerCanReadRepository: boolean
}
/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParameters {
  __typename?: string
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate: boolean
  /** Workflows that must pass for this rule to pass. */
  workflows: WorkflowFileReference[]
}
/** Autogenerated input type of AbortQueuedMigrations */
export interface AbortQueuedMigrationsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the organization that is running the migrations. */
  ownerId: ID
}
/** Autogenerated input type of AbortRepositoryMigration */
export interface AbortRepositoryMigrationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the migration to be aborted. */
  migrationId: ID
}
/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the invitation being accepted */
  invitationId: ID
}
/** Autogenerated input type of AcceptEnterpriseMemberInvitation */
export interface AcceptEnterpriseMemberInvitationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the invitation being accepted */
  invitationId: ID
}
/** Autogenerated input type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the suggested topic.
   *
   * **Upcoming Change on 2024-04-01 UTC**
   * **Description:** `name` will be removed.
   * **Reason:** Suggested topics are no longer supported */
  name?: string | null
  /** The Node ID of the repository.
   *
   * **Upcoming Change on 2024-04-01 UTC**
   * **Description:** `repositoryId` will be removed.
   * **Reason:** Suggested topics are no longer supported */
  repositoryId?: ID | null
}
/** Autogenerated input type of AccessUserNamespaceRepository */
export interface AccessUserNamespaceRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise owning the user namespace repository. */
  enterpriseId: ID
  /** The ID of the user namespace repository to access. */
  repositoryId: ID
}
/** Autogenerated input type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The id of the assignable object to add assignees to. */
  assignableId: ID
  /** The id of users to add as assignees. */
  assigneeIds: ID[]
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated input type of AddComment */
export interface AddCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The contents of the comment. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the subject to modify. */
  subjectId: ID
}
/** Autogenerated input type of AddDiscussionComment */
export interface AddDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The contents of the comment. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion to comment on. */
  discussionId: ID
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: ID | null
}
/** Autogenerated input type of AddDiscussionPollVote */
export interface AddDiscussionPollVoteInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion poll option to vote for. */
  pollOptionId: ID
}
/** Autogenerated input type of AddEnterpriseOrganizationMember */
export interface AddEnterpriseOrganizationMemberInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise which owns the organization. */
  enterpriseId: ID
  /** The ID of the organization the users will be added to. */
  organizationId: ID
  /** The role to assign the users in the organization */
  role?: { $enum: OrganizationMemberRole } | null
  /** The IDs of the enterprise members to add. */
  userIds: ID[]
}
/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export interface AddEnterpriseSupportEntitlementInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: ID
  /** The login of a member who will receive the support entitlement. */
  login: string
}
/** Autogenerated input type of AddLabelsToLabelable */
export interface AddLabelsToLabelableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ids of the labels to add. */
  labelIds: ID[]
  /** The id of the labelable object to add labels to. */
  labelableId: ID
}
/** Autogenerated input type of AddProjectCard */
export interface AddProjectCardInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: ID | null
  /** The note on the card. */
  note?: string | null
  /** The Node ID of the ProjectColumn. */
  projectColumnId: ID
}
/** Autogenerated input type of AddProjectColumn */
export interface AddProjectColumnInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the column. */
  name: string
  /** The Node ID of the project. */
  projectId: ID
}
/** Autogenerated input type of AddProjectV2DraftIssue */
export interface AddProjectV2DraftIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: ID[] | null
  /** The body of the draft issue. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to add the draft issue to. */
  projectId: ID
  /** The title of the draft issue. A project item can also be created by providing
   * the URL of an Issue or Pull Request if you have access. */
  title: string
}
/** Autogenerated input type of AddProjectV2ItemById */
export interface AddProjectV2ItemByIdInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the Issue or Pull Request to add. */
  contentId: ID
  /** The ID of the Project to add the item to. */
  projectId: ID
}
/** Autogenerated input type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The text of the comment. This field is required
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The SHA of the commit to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  commitOID?: GitObjectID | null
  /** The comment id to reply to.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  inReplyTo?: ID | null
  /** The relative path of the file to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  path?: string | null
  /** The line index in the diff to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  position?: Int | null
  /** The node ID of the pull request reviewing
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestId` will be removed. use
   * addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  pullRequestId?: ID | null
  /** The Node ID of the review to modify.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestReviewId` will be removed. use
   * addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation */
  pullRequestReviewId?: ID | null
}
/** Autogenerated input type of AddPullRequestReview */
export interface AddPullRequestReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The contents of the review body comment. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The review line comments.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `comments` will be removed. use the `threads` argument instead
   * **Reason:** We are deprecating comment fields that use diff-relative positioning */
  comments?: (DraftPullRequestReviewComment | null)[] | null
  /** The commit OID the review pertains to. */
  commitOID?: GitObjectID | null
  /** The event to perform on the pull request review. */
  event?: { $enum: PullRequestReviewEvent } | null
  /** The Node ID of the pull request to modify. */
  pullRequestId: ID
  /** The review line comment threads. */
  threads?: (DraftPullRequestReviewThread | null)[] | null
}
/** Autogenerated input type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Body of the thread's first comment. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The line of the blob to which the thread refers, required for line-level
   * threads. The end of the line range for multi-line comments. */
  line?: Int | null
  /** Path to the file being commented on. */
  path: string
  /** The node ID of the pull request reviewing */
  pullRequestId?: ID | null
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: ID | null
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   *
   * Default value: `RIGHT` */
  side?: { $enum: DiffSide } | null
  /** The first line of the range to which the comment refers. */
  startLine?: Int | null
  /** The side of the diff on which the start line resides.
   *
   * Default value: `RIGHT` */
  startSide?: { $enum: DiffSide } | null
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
   *
   * Default value: `LINE` */
  subjectType?: { $enum: PullRequestReviewThreadSubjectType } | null
}
/** Autogenerated input type of AddPullRequestReviewThreadReply */
export interface AddPullRequestReviewThreadReplyInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The text of the reply. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pending review to which the reply will belong. */
  pullRequestReviewId?: ID | null
  /** The Node ID of the thread to which this reply is being written. */
  pullRequestReviewThreadId: ID
}
/** Autogenerated input type of AddReaction */
export interface AddReactionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the emoji to react with. */
  content: { $enum: ReactionContent }
  /** The Node ID of the subject to modify. */
  subjectId: ID
}
/** Autogenerated input type of AddStar */
export interface AddStarInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Starrable ID to star. */
  starrableId: ID
}
/** Autogenerated input type of AddSubIssue */
export interface AddSubIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the issue. */
  issueId: ID
  /** Option to replace parent issue if one already exists */
  replaceParent?: boolean | null
  /** The id of the sub-issue. */
  subIssueId?: ID | null
  /** The url of the sub-issue. */
  subIssueUrl?: string | null
}
/** Autogenerated input type of AddUpvote */
export interface AddUpvoteInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: ID
}
/** Autogenerated input type of AddVerifiableDomain */
export interface AddVerifiableDomainInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The URL of the domain */
  domain: URI
  /** The ID of the owner to add the domain to */
  ownerId: ID
}
/** Autogenerated input type of ApproveDeployments */
export interface ApproveDeploymentsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Optional comment for approving deployments
   *
   * Default value: `""` */
  comment?: string | null
  /** The ids of environments to reject deployments */
  environmentIds: ID[]
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: ID
}
/** Autogenerated input type of ApproveVerifiableDomain */
export interface ApproveVerifiableDomainInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the verifiable domain to approve. */
  id: ID
}
/** Autogenerated input type of ArchiveProjectV2Item */
export interface ArchiveProjectV2ItemInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the ProjectV2Item to archive. */
  itemId: ID
  /** The ID of the Project to archive the item from. */
  projectId: ID
}
/** Autogenerated input type of ArchiveRepository */
export interface ArchiveRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the repository to mark as archived. */
  repositoryId: ID
}
/** Ordering options for Audit Log connections. */
export interface AuditLogOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction?: { $enum: OrderDirection } | null
  /** The field to order Audit Logs by. */
  field?: { $enum: AuditLogOrderField } | null
}
/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | null
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Information about a sponsorship to make for a user or organization with a GitHub
 * Sponsors profile, as part of sponsoring many users or organizations at once. */
export interface BulkSponsorship {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. */
  amount: Int
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: ID | null
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: string | null
}
/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: ID
}
/** Autogenerated input type of CancelEnterpriseMemberInvitation */
export interface CancelEnterpriseMemberInvitationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pending enterprise member invitation. */
  invitationId: ID
}
/** Autogenerated input type of CancelSponsorship */
export interface CancelSponsorshipInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the user or organization who is acting as the sponsor, paying for
   * the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: ID | null
  /** The username of the user or organization who is acting as the sponsor, paying
   * for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: string | null
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: ID | null
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: string | null
}
/** Autogenerated input type of ChangeUserStatus */
export interface ChangeUserStatusInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: string | null
  /** If set, the user status will not be shown after this date. */
  expiresAt?: DateTime | null
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
   *
   * Default value: `false` */
  limitedAvailability?: boolean | null
  /** A short description of your current status. */
  message?: string | null
  /** The ID of the organization whose members will be allowed to see the status. If
   * omitted, the status will be publicly visible. */
  organizationId?: ID | null
}
/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationData {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Represents an annotation's information level */
  annotationLevel: { $enum: CheckAnnotationLevel }
  /** The location of the annotation */
  location: CheckAnnotationRange
  /** A short description of the feedback for these lines of code. */
  message: string
  /** The path of the file to add an annotation to. */
  path: string
  /** Details about this annotation. */
  rawDetails?: string | null
  /** The title that represents the annotation. */
  title?: string | null
}
/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationRange {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ending column of the range. */
  endColumn?: Int | null
  /** The ending line of the range. */
  endLine: Int
  /** The starting column of the range. */
  startColumn?: Int | null
  /** The starting line of the range. */
  startLine: Int
}
/** Possible further actions the integrator can perform. */
export interface CheckRunAction {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A short explanation of what this action would do. */
  description: string
  /** A reference for the action on the integrator's system. */
  identifier: string
  /** The text to be displayed on a button in the web UI. */
  label: string
}
/** The filters that are available when fetching check runs. */
export interface CheckRunFilter {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Filters the check runs created by this application ID. */
  appId?: Int | null
  /** Filters the check runs by this name. */
  checkName?: string | null
  /** Filters the check runs by this type. */
  checkType?: { $enum: CheckRunType } | null
  /** Filters the check runs by these conclusions. */
  conclusions?: { $enum: CheckConclusionState }[] | null
  /** Filters the check runs by this status. Superceded by statuses. */
  status?: { $enum: CheckStatusState } | null
  /** Filters the check runs by this status. Overrides status. */
  statuses?: { $enum: CheckStatusState }[] | null
}
/** Descriptive details about the check run. */
export interface CheckRunOutput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The annotations that are made as part of the check run. */
  annotations?: CheckAnnotationData[] | null
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: CheckRunOutputImage[] | null
  /** The summary of the check run (supports Commonmark). */
  summary: string
  /** The details of the check run (supports Commonmark). */
  text?: string | null
  /** A title to provide for this check run. */
  title: string
}
/** Images attached to the check run output displayed in the GitHub pull request UI. */
export interface CheckRunOutputImage {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The alternative text for the image. */
  alt: string
  /** A short image description. */
  caption?: string | null
  /** The full URL of the image. */
  imageUrl: URI
}
/** The auto-trigger preferences that are available for check suites. */
export interface CheckSuiteAutoTriggerPreference {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The node ID of the application that owns the check suite. */
  appId: ID
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: boolean
}
/** The filters that are available when fetching check suites. */
export interface CheckSuiteFilter {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Filters the check suites created by this application ID. */
  appId?: Int | null
  /** Filters the check suites by this name. */
  checkName?: string | null
}
/** Autogenerated input type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the labelable object to clear the labels from. */
  labelableId: ID
}
/** Autogenerated input type of ClearProjectV2ItemFieldValue */
export interface ClearProjectV2ItemFieldValueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the field to be cleared. */
  fieldId: ID
  /** The ID of the item to be cleared. */
  itemId: ID
  /** The ID of the Project. */
  projectId: ID
}
/** Autogenerated input type of CloneProject */
export interface CloneProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The description of the project. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: boolean
  /** The name of the project. */
  name: string
  /** The visibility of the project, defaults to false (private). */
  public?: boolean | null
  /** The source project to clone. */
  sourceId: ID
  /** The owner ID to create the project under. */
  targetOwnerId: ID
}
/** Autogenerated input type of CloneTemplateRepository */
export interface CloneTemplateRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A short description of the new repository. */
  description?: string | null
  /** Whether to copy all branches from the template to the new repository. Defaults
   * to copying only the default branch of the template.
   *
   * Default value: `false` */
  includeAllBranches?: boolean | null
  /** The name of the new repository. */
  name: string
  /** The ID of the owner for the new repository. */
  ownerId: ID
  /** The Node ID of the template repository. */
  repositoryId: ID
  /** Indicates the repository's visibility level. */
  visibility: { $enum: RepositoryVisibility }
}
/** Autogenerated input type of CloseDiscussion */
export interface CloseDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the discussion to be closed. */
  discussionId: ID
  /** The reason why the discussion is being closed.
   *
   * Default value: `RESOLVED` */
  reason?: { $enum: DiscussionCloseReason } | null
}
/** Autogenerated input type of CloseIssue */
export interface CloseIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the issue that this is a duplicate of. */
  duplicateIssueId?: ID | null
  /** ID of the issue to be closed. */
  issueId: ID
  /** The reason the issue is to be closed. */
  stateReason?: { $enum: IssueClosedStateReason } | null
}
/** Autogenerated input type of ClosePullRequest */
export interface ClosePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the pull request to be closed. */
  pullRequestId: ID
}
/** Choose which tools must provide code scanning results before the reference is
 * updated. When configured, code scanning must be enabled and have results for
 * both the commit and the reference being updated. */
export interface CodeScanningParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Tools that must provide code scanning results for this rule to pass. */
  codeScanningTools: CodeScanningToolInput[]
}
/** A tool that must provide code scanning results for this rule to pass. */
export interface CodeScanningToolInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The severity level at which code scanning results that raise alerts block a
   * reference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  alertsThreshold: string
  /** The severity level at which code scanning results that raise security alerts
   * block a reference update. For more information on security severity levels,
   * see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  securityAlertsThreshold: string
  /** The name of a code scanning tool */
  tool: string
}
/** Specifies an author for filtering Git commits. */
export interface CommitAuthor {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: string[] | null
  /** ID of a User to filter by. If non-null, only commits authored by this user
   * will be returned. This field takes precedence over emails. */
  id?: ID | null
}
/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | null
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Ordering options for commit contribution connections. */
export interface CommitContributionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field by which to order commit contributions. */
  field: { $enum: CommitContributionOrderField }
}
/** A message to include with a new commit */
export interface CommitMessage {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The body of the message. */
  body?: string | null
  /** The headline of the message. */
  headline: string
}
/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | null
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * `repositoryNameWithOwner` and `branchName`.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using `repositoryNameWithOwner` and `branchName`:
 *
 *     {
 *       "repositoryNameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     } */
export interface CommittableBranch {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The unqualified name of the branch to append the commit to. */
  branchName?: string | null
  /** The Node ID of the Ref to be updated. */
  id?: ID | null
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: string | null
}
/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | null
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Ordering options for contribution connections. */
export interface ContributionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
}
/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The body of the newly created issue. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ProjectCard ID to convert. */
  projectCardId: ID
  /** The ID of the repository to create the issue in. */
  repositoryId: ID
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: string | null
}
/** Autogenerated input type of ConvertProjectV2DraftIssueItemToIssue */
export interface ConvertProjectV2DraftIssueItemToIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the draft issue ProjectV2Item to convert. */
  itemId: ID
  /** The ID of the repository to create the issue in. */
  repositoryId: ID
}
/** Autogenerated input type of ConvertPullRequestToDraft */
export interface ConvertPullRequestToDraftInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the pull request to convert to draft */
  pullRequestId: ID
}
/** Autogenerated input type of CopyProjectV2 */
export interface CopyProjectV2Input {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Include draft issues in the new project
   *
   * Default value: `false` */
  includeDraftIssues?: boolean | null
  /** The owner ID of the new project. */
  ownerId: ID
  /** The ID of the source Project to copy. */
  projectId: ID
  /** The title of the project. */
  title: string
}
/** Autogenerated input type of CreateAttributionInvitation */
export interface CreateAttributionInvitationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the owner scoping the reattributable data. */
  ownerId: ID
  /** The Node ID of the account owning the data to reattribute. */
  sourceId: ID
  /** The Node ID of the account which may claim the data. */
  targetId: ID
}
/** Autogenerated input type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRuleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Can this branch be deleted. */
  allowsDeletions?: boolean | null
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: boolean | null
  /** Is branch creation a protected operation. */
  blocksCreations?: boolean | null
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: ID[] | null
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: ID[] | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: boolean | null
  /** Can admins override branch protection. */
  isAdminEnforced?: boolean | null
  /** Whether users can pull changes from upstream when the branch is locked. Set to
   * `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: boolean | null
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: boolean | null
  /** The glob-like pattern used to determine matching branches. */
  pattern: string
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: ID[] | null
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: ID
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: boolean | null
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Int | null
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: string[] | null
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: string[] | null
  /** The list of required status checks */
  requiredStatusChecks?: RequiredStatusCheckInput[] | null
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: boolean | null
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: boolean | null
  /** Are commits required to be signed. */
  requiresCommitSignatures?: boolean | null
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: boolean | null
  /** Are successful deployments required before merging. */
  requiresDeployments?: boolean | null
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: boolean | null
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: boolean | null
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: boolean | null
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: boolean | null
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: boolean | null
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: ID[] | null
}
/** Autogenerated input type of CreateCheckRun */
export interface CreateCheckRunInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: CheckRunAction[] | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The time that the check run finished. */
  completedAt?: DateTime | null
  /** The final conclusion of the check. */
  conclusion?: { $enum: CheckConclusionState } | null
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: URI | null
  /** A reference for the run on the integrator's system. */
  externalId?: string | null
  /** The SHA of the head commit. */
  headSha: GitObjectID
  /** The name of the check. */
  name: string
  /** Descriptive details about the run. */
  output?: CheckRunOutput | null
  /** The node ID of the repository. */
  repositoryId: ID
  /** The time that the check run began. */
  startedAt?: DateTime | null
  /** The current status. */
  status?: { $enum: RequestableCheckStatusState } | null
}
/** Autogenerated input type of CreateCheckSuite */
export interface CreateCheckSuiteInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The SHA of the head commit. */
  headSha: GitObjectID
  /** The Node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of CreateCommitOnBranch */
export interface CreateCommitOnBranchInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The Ref to be updated.  Must be a branch. */
  branch: CommittableBranch
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: GitObjectID
  /** A description of changes to files in this commit. */
  fileChanges?: FileChanges | null
  /** The commit message the be included with the commit. */
  message: CommitMessage
}
/** Autogenerated input type of CreateDeployment */
export interface CreateDeploymentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Attempt to automatically merge the default branch into the requested ref, defaults to true.
   *
   * Default value: `true` */
  autoMerge?: boolean | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Short description of the deployment.
   *
   * Default value: `""` */
  description?: string | null
  /** Name for the target deployment environment.
   *
   * Default value: `"production"` */
  environment?: string | null
  /** JSON payload with extra information about the deployment.
   *
   * Default value: `"{}"` */
  payload?: string | null
  /** The node ID of the ref to be deployed. */
  refId: ID
  /** The node ID of the repository. */
  repositoryId: ID
  /** The status contexts to verify against commit status checks. To bypass required
   * contexts, pass an empty array. Defaults to all unique contexts. */
  requiredContexts?: string[] | null
  /** Specifies a task to execute.
   *
   * Default value: `"deploy"` */
  task?: string | null
}
/** Autogenerated input type of CreateDeploymentStatus */
export interface CreateDeploymentStatusInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Adds a new inactive status to all non-transient, non-production environment
   * deployments with the same repository and environment name as the created
   * status's deployment.
   *
   * Default value: `true` */
  autoInactive?: boolean | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The node ID of the deployment. */
  deploymentId: ID
  /** A short description of the status. Maximum length of 140 characters.
   *
   * Default value: `""` */
  description?: string | null
  /** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
  environment?: string | null
  /** Sets the URL for accessing your environment.
   *
   * Default value: `""` */
  environmentUrl?: string | null
  /** The log URL to associate with this status.       This URL should contain
   * output to keep the user updated while the task is running       or serve as
   * historical information for what happened in the deployment.
   *
   * Default value: `""` */
  logUrl?: string | null
  /** The state of the deployment. */
  state: { $enum: DeploymentStatusState }
}
/** Autogenerated input type of CreateDiscussion */
export interface CreateDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The body of the discussion. */
  body: string
  /** The id of the discussion category to associate with this discussion. */
  categoryId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the repository on which to create the discussion. */
  repositoryId: ID
  /** The title of the discussion. */
  title: string
}
/** Autogenerated input type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The logins for the administrators of the new organization. */
  adminLogins: string[]
  /** The email used for sending billing receipts. */
  billingEmail: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: ID
  /** The login of the new organization. */
  login: string
  /** The profile name of the new organization. */
  profileName: string
}
/** Autogenerated input type of CreateEnvironment */
export interface CreateEnvironmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the environment. */
  name: string
  /** The node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: boolean
  /** An optional name for the IP allow list entry. */
  name?: string | null
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: ID
}
/** Autogenerated input type of CreateIssue */
export interface CreateIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: ID[] | null
  /** The body for the issue description. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: string | null
  /** An array of Node IDs of labels for this issue. */
  labelIds?: ID[] | null
  /** The Node ID of the milestone for this issue. */
  milestoneId?: ID | null
  /** The Node ID of the parent issue to add this new issue to */
  parentIssueId?: ID | null
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: ID[] | null
  /** The Node ID of the repository. */
  repositoryId: ID
  /** The title for the issue. */
  title: string
}
/** Autogenerated input type of CreateLabel */
export interface CreateLabelInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A 6 character hex code, without the leading #, identifying the color of the label. */
  color: string
  /** A brief description of the label, such as its purpose. */
  description?: string | null
  /** The name of the label. */
  name: string
  /** The Node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of CreateLinkedBranch */
export interface CreateLinkedBranchInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the issue to link to. */
  issueId: ID
  /** The name of the new branch. Defaults to issue number and title. */
  name?: string | null
  /** The commit SHA to base the new branch on. */
  oid: GitObjectID
  /** ID of the repository to create the branch in. Defaults to the issue repository. */
  repositoryId?: ID | null
}
/** Autogenerated input type of CreateMigrationSource */
export interface CreateMigrationSourceInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The migration source access token. */
  accessToken?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: string | null
  /** The migration source name. */
  name: string
  /** The ID of the organization that will own the migration source. */
  ownerId: ID
  /** The migration source type. */
  type: { $enum: MigrationSourceType }
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: string | null
}
/** Autogenerated input type of CreateProject */
export interface CreateProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The description of project. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of project. */
  name: string
  /** The owner ID to create the project under. */
  ownerId: ID
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: ID[] | null
  /** The name of the GitHub-provided template. */
  template?: { $enum: ProjectTemplate } | null
}
/** Autogenerated input type of CreateProjectV2Field */
export interface CreateProjectV2FieldInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The data type of the field. */
  dataType: { $enum: ProjectV2CustomFieldType }
  /** The name of the field. */
  name: string
  /** The ID of the Project to create the field in. */
  projectId: ID
  /** Options for a single select field. At least one value is required if data_type is SINGLE_SELECT */
  singleSelectOptions?: ProjectV2SingleSelectFieldOptionInput[] | null
}
/** Autogenerated input type of CreateProjectV2 */
export interface CreateProjectV2Input {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The owner ID to create the project under. */
  ownerId: ID
  /** The repository to link the project to. */
  repositoryId?: ID | null
  /** The team to link the project to. The team will be granted read permissions. */
  teamId?: ID | null
  /** The title of the project. */
  title: string
}
/** Autogenerated input type of CreateProjectV2StatusUpdate */
export interface CreateProjectV2StatusUpdateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The body of the status update. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to create the status update in. */
  projectId: ID
  /** The start date of the status update. */
  startDate?: Date | null
  /** The status of the status update. */
  status?: { $enum: ProjectV2StatusUpdateStatus } | null
  /** The target date of the status update. */
  targetDate?: Date | null
}
/** Autogenerated input type of CreatePullRequest */
export interface CreatePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository. */
  baseRefName: string
  /** The contents of the pull request. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Indicates whether this pull request should be a draft.
   *
   * Default value: `false` */
  draft?: boolean | null
  /** The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`. */
  headRefName: string
  /** The Node ID of the head repository. */
  headRepositoryId?: ID | null
  /** Indicates whether maintainers can modify the pull request.
   *
   * Default value: `true` */
  maintainerCanModify?: boolean | null
  /** The Node ID of the repository. */
  repositoryId: ID
  /** The title of the pull request. */
  title: string
}
/** Autogenerated input type of CreateRef */
export interface CreateRefInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: string
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: GitObjectID
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: ID
}
/** Autogenerated input type of CreateRepository */
export interface CreateRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A short description of the new repository. */
  description?: string | null
  /** Indicates if the repository should have the issues feature enabled.
   *
   * Default value: `true` */
  hasIssuesEnabled?: boolean | null
  /** Indicates if the repository should have the wiki feature enabled.
   *
   * Default value: `false` */
  hasWikiEnabled?: boolean | null
  /** The URL for a web page about this repository. */
  homepageUrl?: URI | null
  /** The name of the new repository. */
  name: string
  /** The ID of the owner for the new repository. */
  ownerId?: ID | null
  /** When an organization is specified as the owner, this ID identifies the team
   * that should be granted access to the new repository. */
  teamId?: ID | null
  /** Whether this repository should be marked as a template such that anyone who
   * can access it can create new repositories with the same files and directory structure.
   *
   * Default value: `false` */
  template?: boolean | null
  /** Indicates the repository's visibility level. */
  visibility: { $enum: RepositoryVisibility }
}
/** Autogenerated input type of CreateRepositoryRuleset */
export interface CreateRepositoryRulesetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: RepositoryRulesetBypassActorInput[] | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The set of conditions for this ruleset */
  conditions: RepositoryRuleConditionsInput
  /** The enforcement level for this ruleset */
  enforcement: { $enum: RuleEnforcement }
  /** The name of the ruleset. */
  name: string
  /** The list of rules for this ruleset */
  rules?: RepositoryRuleInput[] | null
  /** The global relay id of the source in which a new ruleset should be created in. */
  sourceId: ID
  /** The target of the ruleset. */
  target?: { $enum: RepositoryRulesetTarget } | null
}
/** Autogenerated input type of CreateSponsorship */
export interface CreateSponsorshipInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: Int | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: boolean | null
  /** Specify whether others should be able to see that the sponsor is sponsoring
   * the sponsorable. Public visibility still does not reveal which tier is used.
   *
   * Default value: `PUBLIC` */
  privacyLevel?: { $enum: SponsorshipPrivacy } | null
  /** Whether the sponsor should receive email updates from the sponsorable.
   *
   * Default value: `true` */
  receiveEmails?: boolean | null
  /** The ID of the user or organization who is acting as the sponsor, paying for
   * the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: ID | null
  /** The username of the user or organization who is acting as the sponsor, paying
   * for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: string | null
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: ID | null
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: string | null
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: ID | null
}
/** Autogenerated input type of CreateSponsorships */
export interface CreateSponsorshipsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Specify whether others should be able to see that the sponsor is sponsoring
   * the sponsorables. Public visibility still does not reveal the dollar value of
   * the sponsorship.
   *
   * Default value: `PUBLIC` */
  privacyLevel?: { $enum: SponsorshipPrivacy } | null
  /** Whether the sponsor should receive email updates from the sponsorables.
   *
   * Default value: `false` */
  receiveEmails?: boolean | null
  /** Whether the sponsorships created should continue each billing cycle for the
   * sponsor (monthly or annually), versus lasting only a single month. Defaults to
   * one-time sponsorships.
   *
   * Default value: `false` */
  recurring?: boolean | null
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorships. */
  sponsorLogin: string
  /** The list of maintainers to sponsor and for how much apiece. */
  sponsorships: BulkSponsorship[]
}
/** Autogenerated input type of CreateSponsorsListing */
export interface CreateSponsorsListingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The country or region where the sponsorable's bank account is located.
   * Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified. */
  billingCountryOrRegionCode?: { $enum: SponsorsCountryOrRegionCode } | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The email address we should use to contact you about the GitHub Sponsors
   * profile being created. This will not be shared publicly. Must be a verified
   * email address already on your GitHub account. Only relevant when the
   * sponsorable is yourself. Defaults to your primary email address on file if omitted. */
  contactEmail?: string | null
  /** The username of the supported fiscal host's GitHub organization, if you want
   * to receive sponsorship payouts through a fiscal host rather than directly to a
   * bank account. For example, 'Open-Source-Collective' for Open Source Collective
   * or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
   * for more information. */
  fiscalHostLogin?: string | null
  /** The URL for your profile page on the fiscal host's website, e.g.,
   * https://opencollective.com/babel or https://numfocus.org/project/bokeh.
   * Required if fiscalHostLogin is specified. */
  fiscallyHostedProjectProfileUrl?: string | null
  /** Provide an introduction to serve as the main focus that appears on your GitHub
   * Sponsors profile. It's a great opportunity to help potential sponsors learn
   * more about you, your work, and why their sponsorship is important to you.
   * GitHub-flavored Markdown is supported. */
  fullDescription?: string | null
  /** The country or region where the sponsorable resides. This is for tax purposes.
   * Required if the sponsorable is yourself, ignored when sponsorableLogin
   * specifies an organization. */
  residenceCountryOrRegionCode?: { $enum: SponsorsCountryOrRegionCode } | null
  /** The username of the organization to create a GitHub Sponsors profile for, if
   * desired. Defaults to creating a GitHub Sponsors profile for the authenticated
   * user if omitted. */
  sponsorableLogin?: string | null
}
/** Autogenerated input type of CreateSponsorsTier */
export interface CreateSponsorsTierInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Int
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: string
  /** Whether sponsorships using this tier should happen monthly/yearly or just once.
   *
   * Default value: `true` */
  isRecurring?: boolean | null
  /** Whether to make the tier available immediately for sponsors to choose.
   * Defaults to creating a draft tier that will not be publicly visible.
   *
   * Default value: `false` */
  publish?: boolean | null
  /** Optional ID of the private repository that sponsors at this tier should gain
   * read-only access to. Must be owned by an organization. */
  repositoryId?: ID | null
  /** Optional name of the private repository that sponsors at this tier should gain
   * read-only access to. Must be owned by an organization. Necessary if
   * repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: string | null
  /** Optional login of the organization owner of the private repository that
   * sponsors at this tier should gain read-only access to. Necessary if
   * repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: string | null
  /** The ID of the user or organization who owns the GitHub Sponsors profile.
   * Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: ID | null
  /** The username of the user or organization who owns the GitHub Sponsors profile.
   * Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: string | null
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: string | null
}
/** Autogenerated input type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The content of the comment. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the discussion to which the comment belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `discussionId` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  discussionId?: ID | null
}
/** Autogenerated input type of CreateTeamDiscussion */
export interface CreateTeamDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The content of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** If true, restricts the visibility of this discussion to team members and
   * organization owners. If false or not specified, allows any organization member
   * to view this discussion.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `private` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  private?: boolean | null
  /** The ID of the team to which the discussion belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `teamId` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  teamId?: ID | null
  /** The title of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `title` will be removed. Follow the guide at
   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
   * find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. */
  title?: string | null
}
/** Autogenerated input type of CreateUserList */
export interface CreateUserListInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A description of the list */
  description?: string | null
  /** Whether or not the list is private
   *
   * Default value: `false` */
  isPrivate?: boolean | null
  /** The name of the new list */
  name: string
}
/** Autogenerated input type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the suggested topic.
   *
   * **Upcoming Change on 2024-04-01 UTC**
   * **Description:** `name` will be removed.
   * **Reason:** Suggested topics are no longer supported */
  name?: string | null
  /** The reason why the suggested topic is declined.
   *
   * **Upcoming Change on 2024-04-01 UTC**
   * **Description:** `reason` will be removed.
   * **Reason:** Suggested topics are no longer supported */
  reason?: { $enum: TopicSuggestionDeclineReason } | null
  /** The Node ID of the repository.
   *
   * **Upcoming Change on 2024-04-01 UTC**
   * **Description:** `repositoryId` will be removed.
   * **Reason:** Suggested topics are no longer supported */
  repositoryId?: ID | null
}
/** Autogenerated input type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRuleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated input type of DeleteDeployment */
export interface DeleteDeploymentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the deployment to be deleted. */
  id: ID
}
/** Autogenerated input type of DeleteDiscussionComment */
export interface DeleteDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node id of the discussion comment to delete. */
  id: ID
}
/** Autogenerated input type of DeleteDiscussion */
export interface DeleteDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the discussion to delete. */
  id: ID
}
/** Autogenerated input type of DeleteEnvironment */
export interface DeleteEnvironmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the environment to be deleted. */
  id: ID
}
/** Autogenerated input type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: ID
}
/** Autogenerated input type of DeleteIssueComment */
export interface DeleteIssueCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the comment to delete. */
  id: ID
}
/** Autogenerated input type of DeleteIssue */
export interface DeleteIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the issue to delete. */
  issueId: ID
}
/** Autogenerated input type of DeleteLabel */
export interface DeleteLabelInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the label to be deleted. */
  id: ID
}
/** Autogenerated input type of DeleteLinkedBranch */
export interface DeleteLinkedBranchInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the linked branch */
  linkedBranchId: ID
}
/** Autogenerated input type of DeletePackageVersion */
export interface DeletePackageVersionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the package version to be deleted. */
  packageVersionId: ID
}
/** Autogenerated input type of DeleteProjectCard */
export interface DeleteProjectCardInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The id of the card to delete. */
  cardId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated input type of DeleteProjectColumn */
export interface DeleteProjectColumnInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the column to delete. */
  columnId: ID
}
/** Autogenerated input type of DeleteProject */
export interface DeleteProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Project ID to update. */
  projectId: ID
}
/** Autogenerated input type of DeleteProjectV2Field */
export interface DeleteProjectV2FieldInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the field to delete. */
  fieldId: ID
}
/** Autogenerated input type of DeleteProjectV2 */
export interface DeleteProjectV2Input {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to delete. */
  projectId: ID
}
/** Autogenerated input type of DeleteProjectV2Item */
export interface DeleteProjectV2ItemInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the item to be removed. */
  itemId: ID
  /** The ID of the Project from which the item should be removed. */
  projectId: ID
}
/** Autogenerated input type of DeleteProjectV2StatusUpdate */
export interface DeleteProjectV2StatusUpdateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the status update to be removed. */
  statusUpdateId: ID
}
/** Autogenerated input type of DeleteProjectV2Workflow */
export interface DeleteProjectV2WorkflowInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the workflow to be removed. */
  workflowId: ID
}
/** Autogenerated input type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the comment to delete. */
  id: ID
}
/** Autogenerated input type of DeletePullRequestReview */
export interface DeletePullRequestReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: ID
}
/** Autogenerated input type of DeleteRef */
export interface DeleteRefInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the Ref to be deleted. */
  refId: ID
}
/** Autogenerated input type of DeleteRepositoryRuleset */
export interface DeleteRepositoryRulesetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The global relay id of the repository ruleset to be deleted. */
  repositoryRulesetId: ID
}
/** Autogenerated input type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the comment to delete. */
  id: ID
}
/** Autogenerated input type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The discussion ID to delete. */
  id: ID
}
/** Autogenerated input type of DeleteUserList */
export interface DeleteUserListInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the list to delete. */
  listId: ID
}
/** Autogenerated input type of DeleteVerifiableDomain */
export interface DeleteVerifiableDomainInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the verifiable domain to delete. */
  id: ID
}
/** Ordering options for deployment connections */
export interface DeploymentOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order deployments by. */
  field: { $enum: DeploymentOrderField }
}
/** Autogenerated input type of DequeuePullRequest */
export interface DequeuePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the pull request to be dequeued. */
  id: ID
}
/** Autogenerated input type of DisablePullRequestAutoMerge */
export interface DisablePullRequestAutoMergeInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: ID
}
/** Ways in which lists of discussions can be ordered upon return. */
export interface DiscussionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order discussions by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field by which to order discussions. */
  field: { $enum: DiscussionOrderField }
}
/** Ordering options for discussion poll option connections. */
export interface DiscussionPollOptionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order poll options by. */
  field: { $enum: DiscussionPollOptionOrderField }
}
/** Autogenerated input type of DismissPullRequestReview */
export interface DismissPullRequestReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The contents of the pull request review dismissal message. */
  message: string
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: ID
}
/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export interface DismissRepositoryVulnerabilityAlertInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: { $enum: DismissReason }
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: ID
}
/** Specifies a review comment to be left with a Pull Request Review. */
export interface DraftPullRequestReviewComment {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Body of the comment to leave. */
  body: string
  /** Path to the file being commented on. */
  path: string
  /** Position in the file to leave a comment on. */
  position: Int
}
/** Specifies a review comment thread to be left with a Pull Request Review. */
export interface DraftPullRequestReviewThread {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Body of the comment to leave. */
  body: string
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Int
  /** Path to the file being commented on. */
  path: string
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   *
   * Default value: `RIGHT` */
  side?: { $enum: DiffSide } | null
  /** The first line of the range to which the comment refers. */
  startLine?: Int | null
  /** The side of the diff on which the start line resides.
   *
   * Default value: `RIGHT` */
  startSide?: { $enum: DiffSide } | null
}
/** Autogenerated input type of EnablePullRequestAutoMerge */
export interface EnablePullRequestAutoMergeInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The email address to associate with this merge. */
  authorEmail?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Commit body to use for the commit when the PR is mergable; if omitted, a
   * default message will be used. NOTE: when merging with a merge queue any input
   * value for commit message is ignored. */
  commitBody?: string | null
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a
   * default message will be used. NOTE: when merging with a merge queue any input
   * value for commit headline is ignored. */
  commitHeadline?: string | null
  /** The expected head OID of the pull request. */
  expectedHeadOid?: GitObjectID | null
  /** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
   * with a merge queue any input value for merge method is ignored.
   *
   * Default value: `MERGE` */
  mergeMethod?: { $enum: PullRequestMergeMethod } | null
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: ID
}
/** Autogenerated input type of EnqueuePullRequest */
export interface EnqueuePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The expected head OID of the pull request. */
  expectedHeadOid?: GitObjectID | null
  /** Add the pull request to the front of the queue. */
  jump?: boolean | null
  /** The ID of the pull request to enqueue. */
  pullRequestId: ID
}
/** Ordering options for enterprise administrator invitation connections */
export interface EnterpriseAdministratorInvitationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order enterprise administrator invitations by. */
  field: { $enum: EnterpriseAdministratorInvitationOrderField }
}
/** Ordering options for enterprise administrator invitation connections */
export interface EnterpriseMemberInvitationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order enterprise member invitations by. */
  field: { $enum: EnterpriseMemberInvitationOrderField }
}
/** Ordering options for enterprise member connections. */
export interface EnterpriseMemberOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order enterprise members by. */
  field: { $enum: EnterpriseMemberOrderField }
}
/** Ordering options for enterprises. */
export interface EnterpriseOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order enterprises by. */
  field: { $enum: EnterpriseOrderField }
}
/** Ordering options for Enterprise Server installation connections. */
export interface EnterpriseServerInstallationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order Enterprise Server installations by. */
  field: { $enum: EnterpriseServerInstallationOrderField }
}
/** Ordering options for Enterprise Server user account email connections. */
export interface EnterpriseServerUserAccountEmailOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order emails by. */
  field: { $enum: EnterpriseServerUserAccountEmailOrderField }
}
/** Ordering options for Enterprise Server user account connections. */
export interface EnterpriseServerUserAccountOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order user accounts by. */
  field: { $enum: EnterpriseServerUserAccountOrderField }
}
/** Ordering options for Enterprise Server user accounts upload connections. */
export interface EnterpriseServerUserAccountsUploadOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order user accounts uploads by. */
  field: { $enum: EnterpriseServerUserAccountsUploadOrderField }
}
/** Ordering options for environments */
export interface Environments {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order environments by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field to order environments by. */
  field: { $enum: EnvironmentOrderField }
}
/** A command to add a file at the given path with the given contents as part of a
 * commit.  Any existing file at that that path will be replaced. */
export interface FileAddition {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The base64 encoded contents of the file */
  contents: Base64String
  /** The path in the repository where the file will be located */
  path: string
}
/** A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        } */
export interface FileChanges {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** File to add or change.
   *
   * Default value: `[]` */
  additions?: FileAddition[] | null
  /** Files to delete.
   *
   * Default value: `[]` */
  deletions?: FileDeletion[] | null
}
/** A command to delete the file at the given path as part of a commit. */
export interface FileDeletion {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The path to delete */
  path: string
}
/** Prevent commits that include files with specified file extensions from being pushed to the commit graph. */
export interface FileExtensionRestrictionParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The file extensions that are restricted from being pushed to the commit graph. */
  restrictedFileExtensions: string[]
}
/** Prevent commits that include changes in specified file paths from being pushed to the commit graph. */
export interface FilePathRestrictionParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The file paths that are restricted from being pushed to the commit graph. */
  restrictedFilePaths: string[]
}
/** Autogenerated input type of FollowOrganization */
export interface FollowOrganizationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the organization to follow. */
  organizationId: ID
}
/** Autogenerated input type of FollowUser */
export interface FollowUserInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the user to follow. */
  userId: ID
}
/** Ordering options for gist connections */
export interface GistOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order repositories by. */
  field: { $enum: GistOrderField }
}
/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export interface GrantEnterpriseOrganizationsMigratorRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: ID
  /** The login of the user to grant the migrator role */
  login: string
}
/** Autogenerated input type of GrantMigratorRole */
export interface GrantMigratorRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The user login or Team slug to grant the migrator role. */
  actor: string
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: { $enum: ActorType }
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the organization that the user/team belongs to. */
  organizationId: ID
}
/** Autogenerated input type of ImportProject */
export interface ImportProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The description of Project. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A list of columns containing issues and pull requests. */
  columnImports: ProjectColumnImport[]
  /** The name of Project. */
  name: string
  /** The name of the Organization or User to create the Project under. */
  ownerName: string
  /** Whether the Project is public or not.
   *
   * Default value: `false` */
  public?: boolean | null
}
/** Autogenerated input type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The email of the person to invite as an administrator. */
  email?: string | null
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: ID
  /** The login of a user to invite as an administrator. */
  invitee?: string | null
  /** The role of the administrator. */
  role?: { $enum: EnterpriseAdministratorRole } | null
}
/** Autogenerated input type of InviteEnterpriseMember */
export interface InviteEnterpriseMemberInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The email of the person to invite as an unaffiliated member. */
  email?: string | null
  /** The ID of the enterprise to which you want to invite an unaffiliated member. */
  enterpriseId: ID
  /** The login of a user to invite as an unaffiliated member. */
  invitee?: string | null
}
/** Ordering options for IP allow list entry connections. */
export interface IpAllowListEntryOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order IP allow list entries by. */
  field: { $enum: IpAllowListEntryOrderField }
}
/** Ways in which lists of issue comments can be ordered upon return. */
export interface IssueCommentOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order issue comments by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order issue comments by. */
  field: { $enum: IssueCommentOrderField }
}
/** Ways in which to filter lists of issues. */
export interface IssueFilters {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** List issues assigned to given name. Pass in `null` for issues with no assigned
   * user, and `*` for issues assigned to any user. */
  assignee?: string | null
  /** List issues created by given name. */
  createdBy?: string | null
  /** List issues where the list of label names exist on the issue. */
  labels?: string[] | null
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: string | null
  /** List issues by given milestone argument. If an string representation of an
   * integer is passed, it should refer to a milestone by its database ID. Pass in
   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: string | null
  /** List issues by given milestone argument. If an string representation of an
   * integer is passed, it should refer to a milestone by its number field. Pass in
   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: string | null
  /** List issues that have been updated at or after the given date. */
  since?: DateTime | null
  /** List issues filtered by the list of states given. */
  states?: { $enum: IssueState }[] | null
  /** List issues subscribed to by viewer.
   *
   * Default value: `false` */
  viewerSubscribed?: boolean | null
}
/** Ways in which lists of issues can be ordered upon return. */
export interface IssueOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order issues by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order issues by. */
  field: { $enum: IssueOrderField }
}
/** Ways in which lists of labels can be ordered upon return. */
export interface LabelOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order labels by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order labels by. */
  field: { $enum: LabelOrderField }
}
/** Ordering options for language connections. */
export interface LanguageOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order languages by. */
  field: { $enum: LanguageOrderField }
}
/** Autogenerated input type of LinkProjectV2ToRepository */
export interface LinkProjectV2ToRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the project to link to the repository. */
  projectId: ID
  /** The ID of the repository to link to the project. */
  repositoryId: ID
}
/** Autogenerated input type of LinkProjectV2ToTeam */
export interface LinkProjectV2ToTeamInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the project to link to the team. */
  projectId: ID
  /** The ID of the team to link to the project. */
  teamId: ID
}
/** Autogenerated input type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to link to a Repository */
  projectId: ID
  /** The ID of the Repository to link to a Project. */
  repositoryId: ID
}
/** Autogenerated input type of LockLockable */
export interface LockLockableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A reason for why the item will be locked. */
  lockReason?: { $enum: LockReason } | null
  /** ID of the item to be locked. */
  lockableId: ID
}
/** Ordering options for mannequins. */
export interface MannequinOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order mannequins by. */
  field: { $enum: MannequinOrderField }
}
/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export interface MarkDiscussionCommentAsAnswerInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion comment to mark as an answer. */
  id: ID
}
/** Autogenerated input type of MarkFileAsViewed */
export interface MarkFileAsViewedInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The path of the file to mark as viewed */
  path: string
  /** The Node ID of the pull request. */
  pullRequestId: ID
}
/** Autogenerated input type of MarkProjectV2AsTemplate */
export interface MarkProjectV2AsTemplateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to mark as a template. */
  projectId: ID
}
/** Autogenerated input type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: ID
}
/** Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph. */
export interface MaxFilePathLengthParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The maximum amount of characters allowed in file paths */
  maxFilePathLength: Int
}
/** Prevent commits that exceed a specified file size limit from being pushed to the commit. */
export interface MaxFileSizeParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */
  maxFileSize: Int
}
/** Autogenerated input type of MergeBranch */
export interface MergeBranchInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The email address to associate with this commit. */
  authorEmail?: string | null
  /** The name of the base branch that the provided head will be merged into. */
  base: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: string | null
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: string
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: ID
}
/** Autogenerated input type of MergePullRequest */
export interface MergePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The email address to associate with this merge. */
  authorEmail?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: string | null
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: string | null
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: GitObjectID | null
  /** The merge method to use. If omitted, defaults to 'MERGE'
   *
   * Default value: `MERGE` */
  mergeMethod?: { $enum: PullRequestMergeMethod } | null
  /** ID of the pull request to be merged. */
  pullRequestId: ID
}
/** Merges must be performed via a merge queue. */
export interface MergeQueueParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Maximum time for a required status check to report a conclusion. After this
   * much time has elapsed, checks that have not reported a conclusion will be
   * assumed to have failed */
  checkResponseTimeoutMinutes: Int
  /** When set to ALLGREEN, the merge commit created by merge queue for each PR in
   * the group must pass all required checks to merge. When set to HEADGREEN, only
   * the commit at the head of the merge group, i.e. the commit containing changes
   * from all of the PRs in the group, must pass its required checks to merge. */
  groupingStrategy: { $enum: MergeQueueGroupingStrategy }
  /** Limit the number of queued pull requests requesting checks and workflow runs at the same time. */
  maxEntriesToBuild: Int
  /** The maximum number of PRs that will be merged together in a group. */
  maxEntriesToMerge: Int
  /** Method to use when merging changes from queued pull requests. */
  mergeMethod: { $enum: MergeQueueMergeMethod }
  /** The minimum number of PRs that will be merged together in a group. */
  minEntriesToMerge: Int
  /** The time merge queue should wait after the first PR is added to the queue for
   * the minimum group size to be met. After this time has elapsed, the minimum
   * group size will be ignored and a smaller group will be merged. */
  minEntriesToMergeWaitMinutes: Int
}
/** Ordering options for milestone connections. */
export interface MilestoneOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order milestones by. */
  field: { $enum: MilestoneOrderField }
}
/** Autogenerated input type of MinimizeComment */
export interface MinimizeCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The classification of comment */
  classifier: { $enum: ReportedContentClassifiers }
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the subject to modify. */
  subjectId: ID
}
/** Autogenerated input type of MoveProjectCard */
export interface MoveProjectCardInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: ID | null
  /** The id of the card to move. */
  cardId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the column to move it into. */
  columnId: ID
}
/** Autogenerated input type of MoveProjectColumn */
export interface MoveProjectColumnInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: ID | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the column to move. */
  columnId: ID
}
/** Ordering options for organization connections. */
export interface OrganizationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order organizations by. */
  field: { $enum: OrganizationOrderField }
}
/** Ordering options for an organization's enterprise owner connections. */
export interface OrgEnterpriseOwnerOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order enterprise owners by. */
  field: { $enum: OrgEnterpriseOwnerOrderField }
}
/** Ways in which lists of package files can be ordered upon return. */
export interface PackageFileOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order package files by the specified field. */
  direction?: { $enum: OrderDirection } | null
  /** The field in which to order package files by. */
  field?: { $enum: PackageFileOrderField } | null
}
/** Ways in which lists of packages can be ordered upon return. */
export interface PackageOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order packages by the specified field. */
  direction?: { $enum: OrderDirection } | null
  /** The field in which to order packages by. */
  field?: { $enum: PackageOrderField } | null
}
/** Ways in which lists of package versions can be ordered upon return. */
export interface PackageVersionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order package versions by the specified field. */
  direction?: { $enum: OrderDirection } | null
  /** The field in which to order package versions by. */
  field?: { $enum: PackageVersionOrderField } | null
}
/** Autogenerated input type of PinEnvironment */
export interface PinEnvironmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the environment to modify */
  environmentId: ID
  /** The desired state of the environment. If true, environment will be pinned. If false, it will be unpinned. */
  pinned: boolean
}
/** Autogenerated input type of PinIssue */
export interface PinIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the issue to be pinned */
  issueId: ID
}
/** Ordering options for pinned environments */
export interface PinnedEnvironmentOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order pinned environments by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field to order pinned environments by. */
  field: { $enum: PinnedEnvironmentOrderField }
}
/** An issue or PR and its owning repository to be used in a project card. */
export interface ProjectCardImport {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The issue or pull request number. */
  number: Int
  /** Repository name with owner (owner/repository). */
  repository: string
}
/** A project column and a list of its issues and PRs. */
export interface ProjectColumnImport {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The name of the column. */
  columnName: string
  /** A list of issues and pull requests in the column. */
  issues?: ProjectCardImport[] | null
  /** The position of the column, starting from 0. */
  position: Int
}
/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order projects by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order projects by. */
  field: { $enum: ProjectOrderField }
}
/** A collaborator to update on a project. Only one of the userId or teamId should be provided. */
export interface ProjectV2Collaborator {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The role to grant the collaborator */
  role: { $enum: ProjectV2Roles }
  /** The ID of the team as a collaborator. */
  teamId?: ID | null
  /** The ID of the user as a collaborator. */
  userId?: ID | null
}
/** Ordering options for project v2 field connections */
export interface ProjectV2FieldOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order the project v2 fields by. */
  field: { $enum: ProjectV2FieldOrderField }
}
/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
export interface ProjectV2FieldValue {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ISO 8601 date to set on the field. */
  date?: Date | null
  /** The id of the iteration to set on the field. */
  iterationId?: string | null
  /** The number to set on the field. */
  number?: Float | null
  /** The id of the single select option to set on the field. */
  singleSelectOptionId?: string | null
  /** The text to set on the field. */
  text?: string | null
}
/** Ways in which to filter lists of projects. */
export interface ProjectV2Filters {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** List project v2 filtered by the state given. */
  state?: { $enum: ProjectV2State } | null
}
/** Ordering options for project v2 item field value connections */
export interface ProjectV2ItemFieldValueOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order the project v2 item field values by. */
  field: { $enum: ProjectV2ItemFieldValueOrderField }
}
/** Ordering options for project v2 item connections */
export interface ProjectV2ItemOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order the project v2 items by. */
  field: { $enum: ProjectV2ItemOrderField }
}
/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectV2Order {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order projects by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order projects by. */
  field: { $enum: ProjectV2OrderField }
}
/** Represents a single select field option */
export interface ProjectV2SingleSelectFieldOptionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The display color of the option */
  color: { $enum: ProjectV2SingleSelectFieldOptionColor }
  /** The description text of the option */
  description: string
  /** The name of the option */
  name: string
}
/** Ways in which project v2 status updates can be ordered. */
export interface ProjectV2StatusOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order nodes. */
  direction: { $enum: OrderDirection }
  /** The field by which to order nodes. */
  field: { $enum: ProjectV2StatusUpdateOrderField }
}
/** Ordering options for project v2 view connections */
export interface ProjectV2ViewOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order the project v2 views by. */
  field: { $enum: ProjectV2ViewOrderField }
}
/** Ordering options for project v2 workflows connections */
export interface ProjectV2WorkflowOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order the project v2 workflows by. */
  field: { $enum: ProjectV2WorkflowsOrderField }
}
/** A property that must match */
export interface PropertyTargetDefinitionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The name of the property */
  name: string
  /** The values to match for */
  propertyValues: string[]
  /** The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified */
  source?: string | null
}
/** Autogenerated input type of PublishSponsorsTier */
export interface PublishSponsorsTierInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the draft tier to publish. */
  tierId: ID
}
/** Ways in which lists of issues can be ordered upon return. */
export interface PullRequestOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order pull requests by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order pull requests by. */
  field: { $enum: PullRequestOrderField }
}
/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** When merging pull requests, you can allow any combination of merge commits,
   * squashing, or rebasing. At least one option must be enabled. */
  allowedMergeMethods?: string[] | null
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: boolean
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: boolean
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: boolean
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Int
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: boolean
}
/** Ways in which lists of reactions can be ordered upon return. */
export interface ReactionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order reactions by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order reactions by. */
  field: { $enum: ReactionOrderField }
}
/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTargetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: string[]
  /** Array of ref names or patterns to include. One of these patterns must match
   * for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
   * default branch or `~ALL` to include all branches. */
  include: string[]
}
/** Ways in which lists of git refs can be ordered upon return. */
export interface RefOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order refs by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order refs by. */
  field: { $enum: RefOrderField }
}
/** A ref update */
export interface RefUpdate {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The value this ref should be updated to. */
  afterOid: GitObjectID
  /** The value this ref needs to point to before the update. */
  beforeOid?: GitObjectID | null
  /** Force a non fast-forward update.
   *
   * Default value: `false` */
  force?: boolean | null
  /** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
  name: GitRefname
}
/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: ID
}
/** Autogenerated input type of RegenerateVerifiableDomainToken */
export interface RegenerateVerifiableDomainTokenInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: ID
}
/** Autogenerated input type of RejectDeployments */
export interface RejectDeploymentsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Optional comment for rejecting deployments
   *
   * Default value: `""` */
  comment?: string | null
  /** The ids of environments to reject deployments */
  environmentIds: ID[]
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: ID
}
/** Ways in which lists of releases can be ordered upon return. */
export interface ReleaseOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order releases by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field in which to order releases by. */
  field: { $enum: ReleaseOrderField }
}
/** Autogenerated input type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The id of the assignable object to remove assignees from. */
  assignableId: ID
  /** The id of users to remove as assignees. */
  assigneeIds: ID[]
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
}
/** Autogenerated input type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: ID
  /** The login of the user to remove as an administrator. */
  login: string
}
/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: ID
}
/** Autogenerated input type of RemoveEnterpriseMember */
export interface RemoveEnterpriseMemberInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise from which the user should be removed. */
  enterpriseId: ID
  /** The ID of the user to remove from the enterprise. */
  userId: ID
}
/** Autogenerated input type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: ID
  /** The ID of the organization to remove from the enterprise. */
  organizationId: ID
}
/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export interface RemoveEnterpriseSupportEntitlementInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: ID
  /** The login of a member who will lose the support entitlement. */
  login: string
}
/** Autogenerated input type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ids of labels to remove. */
  labelIds: ID[]
  /** The id of the Labelable to remove labels from. */
  labelableId: ID
}
/** Autogenerated input type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: ID
  /** The ID of the outside collaborator to remove. */
  userId: ID
}
/** Autogenerated input type of RemoveReaction */
export interface RemoveReactionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of the emoji reaction to remove. */
  content: { $enum: ReactionContent }
  /** The Node ID of the subject to modify. */
  subjectId: ID
}
/** Autogenerated input type of RemoveStar */
export interface RemoveStarInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Starrable ID to unstar. */
  starrableId: ID
}
/** Autogenerated input type of RemoveSubIssue */
export interface RemoveSubIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the issue. */
  issueId: ID
  /** The id of the sub-issue. */
  subIssueId: ID
}
/** Autogenerated input type of RemoveUpvote */
export interface RemoveUpvoteInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: ID
}
/** Autogenerated input type of ReopenDiscussion */
export interface ReopenDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the discussion to be reopened. */
  discussionId: ID
}
/** Autogenerated input type of ReopenIssue */
export interface ReopenIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the issue to be opened. */
  issueId: ID
}
/** Autogenerated input type of ReopenPullRequest */
export interface ReopenPullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the pull request to be reopened. */
  pullRequestId: ID
}
/** Autogenerated input type of ReorderEnvironment */
export interface ReorderEnvironmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the environment to modify */
  environmentId: ID
  /** The desired position of the environment */
  position: Int
}
/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTargetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** One of these repo IDs must match the repo. */
  repositoryIds: ID[]
}
/** Ordering options for repository invitation connections. */
export interface RepositoryInvitationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order repository invitations by. */
  field: { $enum: RepositoryInvitationOrderField }
}
/** Ordering options for repository migrations. */
export interface RepositoryMigrationOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: RepositoryMigrationOrderDirection }
  /** The field to order repository migrations by. */
  field: { $enum: RepositoryMigrationOrderField }
}
/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTargetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: string[]
  /** Array of repository names or patterns to include. One of these patterns must
   * match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: string[]
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: boolean | null
}
/** Ordering options for repository connections */
export interface RepositoryOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order repositories by. */
  field: { $enum: RepositoryOrderField }
}
/** Parameters to be used for the repository_property condition */
export interface RepositoryPropertyConditionTargetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Array of repository properties that must not match. */
  exclude: PropertyTargetDefinitionInput[]
  /** Array of repository properties that must match */
  include: PropertyTargetDefinitionInput[]
}
/** Specifies the conditions required for a ruleset to evaluate */
export interface RepositoryRuleConditionsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Configuration for the ref_name condition */
  refName?: RefNameConditionTargetInput | null
  /** Configuration for the repository_id condition */
  repositoryId?: RepositoryIdConditionTargetInput | null
  /** Configuration for the repository_name condition */
  repositoryName?: RepositoryNameConditionTargetInput | null
  /** Configuration for the repository_property condition */
  repositoryProperty?: RepositoryPropertyConditionTargetInput | null
}
/** Specifies the attributes for a new or updated rule. */
export interface RepositoryRuleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Optional ID of this rule when updating */
  id?: ID | null
  /** The parameters for the rule. */
  parameters?: RuleParametersInput | null
  /** The type of rule to create. */
  type: { $enum: RepositoryRuleType }
}
/** Ordering options for repository rules. */
export interface RepositoryRuleOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order repository rules by. */
  field: { $enum: RepositoryRuleOrderField }
}
/** Specifies the attributes for a new or updated ruleset bypass actor. Only one of
 * `actor_id`, `repository_role_database_id`, `organization_admin`, or `deploy_key`
 * should be specified. */
export interface RepositoryRulesetBypassActorInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** For Team and Integration bypasses, the Team or Integration ID */
  actorId?: ID | null
  /** The bypass mode for this actor. */
  bypassMode: { $enum: RepositoryRulesetBypassActorBypassMode }
  /** For deploy key bypasses, true. Can only use ALWAYS as the bypass mode */
  deployKey?: boolean | null
  /** For enterprise owner bypasses, true */
  enterpriseOwner?: boolean | null
  /** For organization owner bypasses, true */
  organizationAdmin?: boolean | null
  /** For role bypasses, the role database ID */
  repositoryRoleDatabaseId?: Int | null
}
/** Autogenerated input type of ReprioritizeSubIssue */
export interface ReprioritizeSubIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified). */
  afterId?: ID | null
  /** The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified). */
  beforeId?: ID | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The id of the parent issue. */
  issueId: ID
  /** The id of the sub-issue to reprioritize. */
  subIssueId: ID
}
/** Autogenerated input type of RequestReviews */
export interface RequestReviewsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pull request to modify. */
  pullRequestId: ID
  /** The Node IDs of the team to request. */
  teamIds?: ID[] | null
  /** Add users to the set rather than replace.
   *
   * Default value: `false` */
  union?: boolean | null
  /** The Node IDs of the user to request. */
  userIds?: ID[] | null
}
/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: string[]
}
/** Specifies the attributes for a new or updated required status check. */
export interface RequiredStatusCheckInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ID of the App that must set the status in order for it to be accepted.
   * Omit this value to use whichever app has recently been setting this status, or
   * use "any" to allow any app to set the status. */
  appId?: ID | null
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: string
}
/** Choose which status checks must pass before the ref is updated. When enabled,
 * commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate?: boolean | null
  /** Status checks that are required. */
  requiredStatusChecks: StatusCheckConfigurationInput[]
  /** Whether pull requests targeting a matching branch must be tested with the
   * latest code. This setting will not take effect unless at least one status
   * check is enabled. */
  strictRequiredStatusChecksPolicy: boolean
}
/** Autogenerated input type of RerequestCheckSuite */
export interface RerequestCheckSuiteInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The Node ID of the check suite. */
  checkSuiteId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of ResolveReviewThread */
export interface ResolveReviewThreadInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the thread to resolve */
  threadId: ID
}
/** Autogenerated input type of RetireSponsorsTier */
export interface RetireSponsorsTierInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the published tier to retire. */
  tierId: ID
}
/** Autogenerated input type of RevertPullRequest */
export interface RevertPullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The description of the revert pull request. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Indicates whether the revert pull request should be a draft.
   *
   * Default value: `false` */
  draft?: boolean | null
  /** The ID of the pull request to revert. */
  pullRequestId: ID
  /** The title of the revert pull request. */
  title?: string | null
}
/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export interface RevokeEnterpriseOrganizationsMigratorRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: ID
  /** The login of the user to revoke the migrator role */
  login: string
}
/** Autogenerated input type of RevokeMigratorRole */
export interface RevokeMigratorRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The user login or Team slug to revoke the migrator role from. */
  actor: string
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: { $enum: ActorType }
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the organization that the user/team belongs to. */
  organizationId: ID
}
/** Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified. */
export interface RuleParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Parameters used for the `branch_name_pattern` rule type */
  branchNamePattern?: BranchNamePatternParametersInput | null
  /** Parameters used for the `code_scanning` rule type */
  codeScanning?: CodeScanningParametersInput | null
  /** Parameters used for the `commit_author_email_pattern` rule type */
  commitAuthorEmailPattern?: CommitAuthorEmailPatternParametersInput | null
  /** Parameters used for the `commit_message_pattern` rule type */
  commitMessagePattern?: CommitMessagePatternParametersInput | null
  /** Parameters used for the `committer_email_pattern` rule type */
  committerEmailPattern?: CommitterEmailPatternParametersInput | null
  /** Parameters used for the `file_extension_restriction` rule type */
  fileExtensionRestriction?: FileExtensionRestrictionParametersInput | null
  /** Parameters used for the `file_path_restriction` rule type */
  filePathRestriction?: FilePathRestrictionParametersInput | null
  /** Parameters used for the `max_file_path_length` rule type */
  maxFilePathLength?: MaxFilePathLengthParametersInput | null
  /** Parameters used for the `max_file_size` rule type */
  maxFileSize?: MaxFileSizeParametersInput | null
  /** Parameters used for the `merge_queue` rule type */
  mergeQueue?: MergeQueueParametersInput | null
  /** Parameters used for the `pull_request` rule type */
  pullRequest?: PullRequestParametersInput | null
  /** Parameters used for the `required_deployments` rule type */
  requiredDeployments?: RequiredDeploymentsParametersInput | null
  /** Parameters used for the `required_status_checks` rule type */
  requiredStatusChecks?: RequiredStatusChecksParametersInput | null
  /** Parameters used for the `tag_name_pattern` rule type */
  tagNamePattern?: TagNamePatternParametersInput | null
  /** Parameters used for the `update` rule type */
  update?: UpdateParametersInput | null
  /** Parameters used for the `workflows` rule type */
  workflows?: WorkflowsParametersInput | null
}
/** Ordering options for saved reply connections. */
export interface SavedReplyOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order saved replies by. */
  field: { $enum: SavedReplyOrderField }
}
/** An advisory identifier to filter results on. */
export interface SecurityAdvisoryIdentifierFilter {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The identifier type. */
  type: { $enum: SecurityAdvisoryIdentifierType }
  /** The identifier string. Supports exact or partial matching. */
  value: string
}
/** Ordering options for security advisory connections */
export interface SecurityAdvisoryOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order security advisories by. */
  field: { $enum: SecurityAdvisoryOrderField }
}
/** Ordering options for security vulnerability connections */
export interface SecurityVulnerabilityOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order security vulnerabilities by. */
  field: { $enum: SecurityVulnerabilityOrderField }
}
/** Autogenerated input type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: { $enum: SamlDigestAlgorithm }
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: ID
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: string
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: string | null
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: { $enum: SamlSignatureAlgorithm }
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: URI
}
/** Autogenerated input type of SetOrganizationInteractionLimit */
export interface SetOrganizationInteractionLimitInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** When this limit should expire. */
  expiry?: { $enum: RepositoryInteractionLimitExpiry } | null
  /** The limit to set. */
  limit: { $enum: RepositoryInteractionLimit }
  /** The ID of the organization to set a limit for. */
  organizationId: ID
}
/** Autogenerated input type of SetRepositoryInteractionLimit */
export interface SetRepositoryInteractionLimitInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** When this limit should expire. */
  expiry?: { $enum: RepositoryInteractionLimitExpiry } | null
  /** The limit to set. */
  limit: { $enum: RepositoryInteractionLimit }
  /** The ID of the repository to set a limit for. */
  repositoryId: ID
}
/** Autogenerated input type of SetUserInteractionLimit */
export interface SetUserInteractionLimitInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** When this limit should expire. */
  expiry?: { $enum: RepositoryInteractionLimitExpiry } | null
  /** The limit to set. */
  limit: { $enum: RepositoryInteractionLimit }
  /** The ID of the user to set a limit for. */
  userId: ID
}
/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export interface SponsorableOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order sponsorable entities by. */
  field: { $enum: SponsorableOrderField }
}
/** Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors. */
export interface SponsorAndLifetimeValueOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order results by. */
  field: { $enum: SponsorAndLifetimeValueOrderField }
}
/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export interface SponsorOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order sponsor entities by. */
  field: { $enum: SponsorOrderField }
}
/** Ordering options for GitHub Sponsors activity connections. */
export interface SponsorsActivityOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order activity by. */
  field: { $enum: SponsorsActivityOrderField }
}
/** Ordering options for sponsorship newsletter connections. */
export interface SponsorshipNewsletterOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order sponsorship newsletters by. */
  field: { $enum: SponsorshipNewsletterOrderField }
}
/** Ordering options for sponsorship connections. */
export interface SponsorshipOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order sponsorship by. */
  field: { $enum: SponsorshipOrderField }
}
/** Ordering options for Sponsors tiers connections. */
export interface SponsorsTierOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order tiers by. */
  field: { $enum: SponsorsTierOrderField }
}
/** Ways in which star connections can be ordered. */
export interface StarOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order nodes. */
  direction: { $enum: OrderDirection }
  /** The field in which to order nodes by. */
  field: { $enum: StarOrderField }
}
/** Autogenerated input type of StartOrganizationMigration */
export interface StartOrganizationMigrationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The migration source access token. */
  sourceAccessToken: string
  /** The URL of the organization to migrate. */
  sourceOrgUrl: URI
  /** The ID of the enterprise the target organization belongs to. */
  targetEnterpriseId: ID
  /** The name of the target organization. */
  targetOrgName: string
}
/** Autogenerated input type of StartRepositoryMigration */
export interface StartRepositoryMigrationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The migration source access token. */
  accessToken?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether to continue the migration on error. Defaults to `true`. */
  continueOnError?: boolean | null
  /** The signed URL to access the user-uploaded git archive. */
  gitArchiveUrl?: string | null
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: string | null
  /** Whether to lock the source repository. */
  lockSource?: boolean | null
  /** The signed URL to access the user-uploaded metadata archive. */
  metadataArchiveUrl?: string | null
  /** The ID of the organization that will own the imported repository. */
  ownerId: ID
  /** The name of the imported repository. */
  repositoryName: string
  /** Whether to skip migrating releases for the repository. */
  skipReleases?: boolean | null
  /** The ID of the migration source. */
  sourceId: ID
  /** The URL of the source repository. */
  sourceRepositoryUrl: URI
  /** The visibility of the imported repository. */
  targetRepoVisibility?: string | null
}
/** Required status check */
export interface StatusCheckConfigurationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The status check context name that must be present on the commit. */
  context: string
  /** The optional integration ID that this status check must originate from. */
  integrationId?: Int | null
}
/** Autogenerated input type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The text field to set on the Pull Request Review. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The event to send to the Pull Request Review. */
  event: { $enum: PullRequestReviewEvent }
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: ID | null
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: ID | null
}
/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** How this rule will appear to users. */
  name?: string | null
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | null
  /** The operator to use for matching. */
  operator: string
  /** The pattern to match with. */
  pattern: string
}
/** Ways in which team discussion comment connections can be ordered. */
export interface TeamDiscussionCommentOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order nodes. */
  direction: { $enum: OrderDirection }
  /** The field by which to order nodes. */
  field: { $enum: TeamDiscussionCommentOrderField }
}
/** Ways in which team discussion connections can be ordered. */
export interface TeamDiscussionOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order nodes. */
  direction: { $enum: OrderDirection }
  /** The field by which to order nodes. */
  field: { $enum: TeamDiscussionOrderField }
}
/** Ordering options for team member connections */
export interface TeamMemberOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order team members by. */
  field: { $enum: TeamMemberOrderField }
}
/** Ways in which team connections can be ordered. */
export interface TeamOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order nodes. */
  direction: { $enum: OrderDirection }
  /** The field in which to order nodes by. */
  field: { $enum: TeamOrderField }
}
/** Ordering options for team repository connections */
export interface TeamRepositoryOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order repositories by. */
  field: { $enum: TeamRepositoryOrderField }
}
/** Autogenerated input type of TransferEnterpriseOrganization */
export interface TransferEnterpriseOrganizationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise where the organization should be transferred. */
  destinationEnterpriseId: ID
  /** The ID of the organization to transfer. */
  organizationId: ID
}
/** Autogenerated input type of TransferIssue */
export interface TransferIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether to create labels if they don't exist in the target repository (matched by name)
   *
   * Default value: `false` */
  createLabelsIfMissing?: boolean | null
  /** The Node ID of the issue to be transferred */
  issueId: ID
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: ID
}
/** Autogenerated input type of UnarchiveProjectV2Item */
export interface UnarchiveProjectV2ItemInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the ProjectV2Item to unarchive. */
  itemId: ID
  /** The ID of the Project to archive the item from. */
  projectId: ID
}
/** Autogenerated input type of UnarchiveRepository */
export interface UnarchiveRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the repository to unarchive. */
  repositoryId: ID
}
/** Autogenerated input type of UnfollowOrganization */
export interface UnfollowOrganizationInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the organization to unfollow. */
  organizationId: ID
}
/** Autogenerated input type of UnfollowUser */
export interface UnfollowUserInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the user to unfollow. */
  userId: ID
}
/** Autogenerated input type of UnlinkProjectV2FromRepository */
export interface UnlinkProjectV2FromRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the project to unlink from the repository. */
  projectId: ID
  /** The ID of the repository to unlink from the project. */
  repositoryId: ID
}
/** Autogenerated input type of UnlinkProjectV2FromTeam */
export interface UnlinkProjectV2FromTeamInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the project to unlink from the team. */
  projectId: ID
  /** The ID of the team to unlink from the project. */
  teamId: ID
}
/** Autogenerated input type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project linked to the Repository. */
  projectId: ID
  /** The ID of the Repository linked to the Project. */
  repositoryId: ID
}
/** Autogenerated input type of UnlockLockable */
export interface UnlockLockableInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the item to be unlocked. */
  lockableId: ID
}
/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export interface UnmarkDiscussionCommentAsAnswerInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: ID
}
/** Autogenerated input type of UnmarkFileAsViewed */
export interface UnmarkFileAsViewedInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The path of the file to mark as unviewed */
  path: string
  /** The Node ID of the pull request. */
  pullRequestId: ID
}
/** Autogenerated input type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: ID
}
/** Autogenerated input type of UnmarkProjectV2AsTemplate */
export interface UnmarkProjectV2AsTemplateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Project to unmark as a template. */
  projectId: ID
}
/** Autogenerated input type of UnminimizeComment */
export interface UnminimizeCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the subject to modify. */
  subjectId: ID
}
/** Autogenerated input type of UnpinIssue */
export interface UnpinIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the issue to be unpinned */
  issueId: ID
}
/** Autogenerated input type of UnresolveReviewThread */
export interface UnresolveReviewThreadInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the thread to unresolve */
  threadId: ID
}
/** Autogenerated input type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRuleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Can this branch be deleted. */
  allowsDeletions?: boolean | null
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: boolean | null
  /** Is branch creation a protected operation. */
  blocksCreations?: boolean | null
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: ID
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: ID[] | null
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: ID[] | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: boolean | null
  /** Can admins override branch protection. */
  isAdminEnforced?: boolean | null
  /** Whether users can pull changes from upstream when the branch is locked. Set to
   * `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: boolean | null
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: boolean | null
  /** The glob-like pattern used to determine matching branches. */
  pattern?: string | null
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: ID[] | null
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: boolean | null
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Int | null
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: string[] | null
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: string[] | null
  /** The list of required status checks */
  requiredStatusChecks?: RequiredStatusCheckInput[] | null
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: boolean | null
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: boolean | null
  /** Are commits required to be signed. */
  requiresCommitSignatures?: boolean | null
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: boolean | null
  /** Are successful deployments required before merging. */
  requiresDeployments?: boolean | null
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: boolean | null
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: boolean | null
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: boolean | null
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: boolean | null
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: boolean | null
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: ID[] | null
}
/** Autogenerated input type of UpdateCheckRun */
export interface UpdateCheckRunInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: CheckRunAction[] | null
  /** The node of the check. */
  checkRunId: ID
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The time that the check run finished. */
  completedAt?: DateTime | null
  /** The final conclusion of the check. */
  conclusion?: { $enum: CheckConclusionState } | null
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: URI | null
  /** A reference for the run on the integrator's system. */
  externalId?: string | null
  /** The name of the check. */
  name?: string | null
  /** Descriptive details about the run. */
  output?: CheckRunOutput | null
  /** The node ID of the repository. */
  repositoryId: ID
  /** The time that the check run began. */
  startedAt?: DateTime | null
  /** The current status. */
  status?: { $enum: RequestableCheckStatusState } | null
}
/** Autogenerated input type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The check suite preferences to modify. */
  autoTriggerPreferences: CheckSuiteAutoTriggerPreference[]
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of UpdateDiscussionComment */
export interface UpdateDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The new contents of the comment body. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion comment to update. */
  commentId: ID
}
/** Autogenerated input type of UpdateDiscussion */
export interface UpdateDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The new contents of the discussion body. */
  body?: string | null
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: ID | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion to update. */
  discussionId: ID
  /** The new discussion title. */
  title?: string | null
}
/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: ID
  /** The login of a administrator whose role is being changed. */
  login: string
  /** The new role for the Enterprise administrator. */
  role: { $enum: EnterpriseAdministratorRole }
}
/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: ID
  /** The value for the allow private repository forking policy on the enterprise. */
  policyValue?: { $enum: EnterpriseAllowPrivateRepositoryForkingPolicyValue } | null
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: ID
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: { $enum: EnterpriseDefaultRepositoryPermissionSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseDeployKeySetting */
export interface UpdateEnterpriseDeployKeySettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the deploy key setting. */
  enterpriseId: ID
  /** The value for the deploy key setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: ID
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: ID
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: boolean | null
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: boolean | null
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: boolean | null
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: boolean | null
  /** Value for the members can create repositories setting on the enterprise. This
   * or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: { $enum: EnterpriseMembersCanCreateRepositoriesSettingValue } | null
}
/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: ID
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: ID
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: ID
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: ID
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: { $enum: EnterpriseMembersCanMakePurchasesSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: ID
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: ID
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: ID
  /** The value for the organization projects setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export interface UpdateEnterpriseOwnerOrganizationRoleInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: ID
  /** The ID of the organization for membership change. */
  organizationId: ID
  /** The role to assume in the organization. */
  organizationRole: { $enum: RoleInOrganization }
}
/** Autogenerated input type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfileInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The description of the enterprise. */
  description?: string | null
  /** The Enterprise ID to update. */
  enterpriseId: ID
  /** The location of the enterprise. */
  location?: string | null
  /** The name of the enterprise. */
  name?: string | null
  /** The URL of the enterprise's website. */
  websiteUrl?: string | null
}
/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: ID
  /** The value for the repository projects setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: ID
  /** The value for the team discussions setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledDisabledSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the two-factor authentication disallowed methods setting. */
  enterpriseId: ID
  /** The value for the two-factor authentication disallowed methods setting on the enterprise. */
  settingValue: { $enum: EnterpriseDisallowedMethodsSettingValue }
}
/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: ID
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: { $enum: EnterpriseEnabledSettingValue }
}
/** Autogenerated input type of UpdateEnvironment */
export interface UpdateEnvironmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The node ID of the environment. */
  environmentId: ID
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: boolean | null
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: ID[] | null
  /** The wait timer in minutes. */
  waitTimer?: Int | null
}
/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: ID
  /** The value for the IP allow list enabled setting. */
  settingValue: { $enum: IpAllowListEnabledSettingValue }
}
/** Autogenerated input type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: ID
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: boolean
  /** An optional name for the IP allow list entry. */
  name?: string | null
}
/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the owner. */
  ownerId: ID
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: { $enum: IpAllowListForInstalledAppsEnabledSettingValue }
}
/** Autogenerated input type of UpdateIssueComment */
export interface UpdateIssueCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The updated text of the comment. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the IssueComment to modify. */
  id: ID
}
/** Autogenerated input type of UpdateIssue */
export interface UpdateIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: ID[] | null
  /** The body for the issue description. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the Issue to modify. */
  id: ID
  /** An array of Node IDs of labels for this issue. */
  labelIds?: ID[] | null
  /** The Node ID of the milestone for this issue. */
  milestoneId?: ID | null
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: ID[] | null
  /** The desired issue state. */
  state?: { $enum: IssueState } | null
  /** The title for the issue. */
  title?: string | null
}
/** Autogenerated input type of UpdateLabel */
export interface UpdateLabelInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A 6 character hex code, without the leading #, identifying the updated color of the label. */
  color?: string | null
  /** A brief description of the label, such as its purpose. */
  description?: string | null
  /** The Node ID of the label to be updated. */
  id: ID
  /** The updated name of the label. */
  name?: string | null
}
/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export interface UpdateNotificationRestrictionSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: ID
  /** The value for the restrict notifications setting. */
  settingValue: { $enum: NotificationRestrictionSettingValue }
}
/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: boolean
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: ID
}
/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
export interface UpdateOrganizationWebCommitSignoffSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the organization on which to set the web commit signoff setting. */
  organizationId: ID
  /** Enable signoff on web-based commits for repositories in the organization? */
  webCommitSignoffRequired: boolean
}
/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: boolean
}
/** Autogenerated input type of UpdatePatreonSponsorability */
export interface UpdatePatreonSponsorabilityInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
   * allowing potential sponsors to make their payment through Patreon instead of GitHub. */
  enablePatreonSponsorships: boolean
  /** The username of the organization with the GitHub Sponsors profile, if any.
   * Defaults to the GitHub Sponsors profile for the authenticated user if omitted. */
  sponsorableLogin?: string | null
}
/** Autogenerated input type of UpdateProjectCard */
export interface UpdateProjectCardInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Whether or not the ProjectCard should be archived */
  isArchived?: boolean | null
  /** The note of ProjectCard. */
  note?: string | null
  /** The ProjectCard ID to update. */
  projectCardId: ID
}
/** Autogenerated input type of UpdateProjectColumn */
export interface UpdateProjectColumnInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of project column. */
  name: string
  /** The ProjectColumn ID to update. */
  projectColumnId: ID
}
/** Autogenerated input type of UpdateProject */
export interface UpdateProjectInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The description of project. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The name of project. */
  name?: string | null
  /** The Project ID to update. */
  projectId: ID
  /** Whether the project is public or not. */
  public?: boolean | null
  /** Whether the project is open or closed. */
  state?: { $enum: ProjectState } | null
}
/** Autogenerated input type of UpdateProjectV2Collaborators */
export interface UpdateProjectV2CollaboratorsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The collaborators to update. */
  collaborators: ProjectV2Collaborator[]
  /** The ID of the project to update the collaborators for. */
  projectId: ID
}
/** Autogenerated input type of UpdateProjectV2DraftIssue */
export interface UpdateProjectV2DraftIssueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: ID[] | null
  /** The body of the draft issue. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the draft issue to update. */
  draftIssueId: ID
  /** The title of the draft issue. */
  title?: string | null
}
/** Autogenerated input type of UpdateProjectV2Field */
export interface UpdateProjectV2FieldInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the field to update. */
  fieldId: ID
  /** The name to update. */
  name?: string | null
  /** Options for a field of type SINGLE_SELECT. If empty, no changes will be made
   * to the options. If values are present, they will overwrite the existing
   * options for the field. */
  singleSelectOptions?: ProjectV2SingleSelectFieldOptionInput[] | null
}
/** Autogenerated input type of UpdateProjectV2 */
export interface UpdateProjectV2Input {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Set the project to closed or open. */
  closed?: boolean | null
  /** The ID of the Project to update. */
  projectId: ID
  /** Set the project to public or private. */
  public?: boolean | null
  /** Set the readme description of the project. */
  readme?: string | null
  /** Set the short description of the project. */
  shortDescription?: string | null
  /** Set the title of the project. */
  title?: string | null
}
/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
export interface UpdateProjectV2ItemFieldValueInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the field to be updated. */
  fieldId: ID
  /** The ID of the item to be updated. */
  itemId: ID
  /** The ID of the Project. */
  projectId: ID
  /** The value which will be set on the field. */
  value: ProjectV2FieldValue
}
/** Autogenerated input type of UpdateProjectV2ItemPosition */
export interface UpdateProjectV2ItemPositionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
  afterId?: ID | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the item to be moved. */
  itemId: ID
  /** The ID of the Project. */
  projectId: ID
}
/** Autogenerated input type of UpdateProjectV2StatusUpdate */
export interface UpdateProjectV2StatusUpdateInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The body of the status update. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The start date of the status update. */
  startDate?: Date | null
  /** The status of the status update. */
  status?: { $enum: ProjectV2StatusUpdateStatus } | null
  /** The ID of the status update to be updated. */
  statusUpdateId: ID
  /** The target date of the status update. */
  targetDate?: Date | null
}
/** Autogenerated input type of UpdatePullRequestBranch */
export interface UpdatePullRequestBranchInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: GitObjectID | null
  /** The Node ID of the pull request. */
  pullRequestId: ID
  /** The update branch method to use. If omitted, defaults to 'MERGE' */
  updateMethod?: { $enum: PullRequestBranchUpdateMethod } | null
}
/** Autogenerated input type of UpdatePullRequest */
export interface UpdatePullRequestInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: ID[] | null
  /** The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. */
  baseRefName?: string | null
  /** The contents of the pull request. */
  body?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: ID[] | null
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: boolean | null
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: ID | null
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: ID[] | null
  /** The Node ID of the pull request. */
  pullRequestId: ID
  /** The target state of the pull request. */
  state?: { $enum: PullRequestUpdateState } | null
  /** The title of the pull request. */
  title?: string | null
}
/** Autogenerated input type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The text of the comment. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: ID
}
/** Autogenerated input type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The contents of the pull request review body. */
  body: string
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: ID
}
/** Autogenerated input type of UpdateRef */
export interface UpdateRefInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Permit updates of branch Refs that are not fast-forwards?
   *
   * Default value: `false` */
  force?: boolean | null
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: GitObjectID
  /** The Node ID of the Ref to be updated. */
  refId: ID
}
/** Autogenerated input type of UpdateRefs */
export interface UpdateRefsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A list of ref updates. */
  refUpdates: RefUpdate[]
  /** The Node ID of the repository. */
  repositoryId: ID
}
/** Autogenerated input type of UpdateRepository */
export interface UpdateRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: string | null
  /** Indicates if the repository should have the discussions feature enabled. */
  hasDiscussionsEnabled?: boolean | null
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: boolean | null
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: boolean | null
  /** Indicates if the repository displays a Sponsor button for financial contributions. */
  hasSponsorshipsEnabled?: boolean | null
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: boolean | null
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: URI | null
  /** The new name of the repository. */
  name?: string | null
  /** The ID of the repository to update. */
  repositoryId: ID
  /** Whether this repository should be marked as a template such that anyone who
   * can access it can create new repositories with the same files and directory structure. */
  template?: boolean | null
}
/** Autogenerated input type of UpdateRepositoryRuleset */
export interface UpdateRepositoryRulesetInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: RepositoryRulesetBypassActorInput[] | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The list of conditions for this ruleset */
  conditions?: RepositoryRuleConditionsInput | null
  /** The enforcement level for this ruleset */
  enforcement?: { $enum: RuleEnforcement } | null
  /** The name of the ruleset. */
  name?: string | null
  /** The global relay id of the repository ruleset to be updated. */
  repositoryRulesetId: ID
  /** The list of rules for this ruleset */
  rules?: RepositoryRuleInput[] | null
  /** The target of the ruleset. */
  target?: { $enum: RepositoryRulesetTarget } | null
}
/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
export interface UpdateRepositoryWebCommitSignoffSettingInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the repository to update. */
  repositoryId: ID
  /** Indicates if the repository should require signoff on web-based commits. */
  webCommitSignoffRequired: boolean
}
/** Autogenerated input type of UpdateSponsorshipPreferences */
export interface UpdateSponsorshipPreferencesInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Specify whether others should be able to see that the sponsor is sponsoring
   * the sponsorable. Public visibility still does not reveal which tier is used.
   *
   * Default value: `PUBLIC` */
  privacyLevel?: { $enum: SponsorshipPrivacy } | null
  /** Whether the sponsor should receive email updates from the sponsorable.
   *
   * Default value: `true` */
  receiveEmails?: boolean | null
  /** The ID of the user or organization who is acting as the sponsor, paying for
   * the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: ID | null
  /** The username of the user or organization who is acting as the sponsor, paying
   * for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: string | null
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: ID | null
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: string | null
}
/** Autogenerated input type of UpdateSubscription */
export interface UpdateSubscriptionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The new state of the subscription. */
  state: { $enum: SubscriptionState }
  /** The Node ID of the subscribable object to modify. */
  subscribableId: ID
}
/** Autogenerated input type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The updated text of the comment. */
  body: string
  /** The current version of the body content. */
  bodyVersion?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the comment to modify. */
  id: ID
}
/** Autogenerated input type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The updated text of the discussion. */
  body?: string | null
  /** The current version of the body content. If provided, this update operation
   * will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: string | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the discussion to modify. */
  id: ID
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: boolean | null
  /** The updated title of the discussion. */
  title?: string | null
}
/** Autogenerated input type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The algorithm to use for review assignment
   *
   * Default value: `ROUND_ROBIN` */
  algorithm?: { $enum: TeamReviewAssignmentAlgorithm } | null
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Count any members whose review has already been requested against the required number of members assigned to review
   *
   * Default value: `true` */
  countMembersAlreadyRequested?: boolean | null
  /** Turn on or off review assignment */
  enabled: boolean
  /** An array of team member IDs to exclude */
  excludedTeamMemberIds?: ID[] | null
  /** The Node ID of the team to update review assignments of */
  id: ID
  /** Include the members of any child teams when assigning
   *
   * Default value: `true` */
  includeChildTeamMembers?: boolean | null
  /** Notify the entire team of the PR if it is delegated
   *
   * Default value: `true` */
  notifyTeam?: boolean | null
  /** Remove the team review request when assigning
   *
   * Default value: `true` */
  removeTeamRequest?: boolean | null
  /** The number of team members to assign
   *
   * Default value: `1` */
  teamMemberCount?: Int | null
}
/** Autogenerated input type of UpdateTeamsRepository */
export interface UpdateTeamsRepositoryInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** Permission that should be granted to the teams. */
  permission: { $enum: RepositoryPermission }
  /** Repository ID being granted access to. */
  repositoryId: ID
  /** A list of teams being granted access. Limit: 10 */
  teamIds: ID[]
}
/** Autogenerated input type of UpdateTopics */
export interface UpdateTopicsInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The Node ID of the repository. */
  repositoryId: ID
  /** An array of topic names. */
  topicNames: string[]
}
/** Autogenerated input type of UpdateUserList */
export interface UpdateUserListInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** A description of the list */
  description?: string | null
  /** Whether or not the list is private */
  isPrivate?: boolean | null
  /** The ID of the list to update. */
  listId: ID
  /** The name of the list */
  name?: string | null
}
/** Autogenerated input type of UpdateUserListsForItem */
export interface UpdateUserListsForItemInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The item to add to the list */
  itemId: ID
  /** The lists to which this item should belong */
  listIds: ID[]
  /** The suggested lists to create and add this item to */
  suggestedListIds?: ID[] | null
}
/** Ordering options for user status connections. */
export interface UserStatusOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order user statuses by. */
  field: { $enum: UserStatusOrderField }
}
/** Ordering options for verifiable domain connections. */
export interface VerifiableDomainOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The ordering direction. */
  direction: { $enum: OrderDirection }
  /** The field to order verifiable domains by. */
  field: { $enum: VerifiableDomainOrderField }
}
/** Autogenerated input type of VerifyVerifiableDomain */
export interface VerifyVerifiableDomainInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: string | null
  /** The ID of the verifiable domain to verify. */
  id: ID
}
/** A workflow that must run for this rule to pass */
export interface WorkflowFileReferenceInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The path to the workflow file */
  path: string
  /** The ref (branch or tag) of the workflow file to use */
  ref?: string | null
  /** The ID of the repository where the workflow is defined */
  repositoryId: Int
  /** The commit SHA of the workflow file to use */
  sha?: string | null
}
/** Ways in which lists of workflow runs can be ordered upon return. */
export interface WorkflowRunOrder {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** The direction in which to order workflow runs by the specified field. */
  direction: { $enum: OrderDirection }
  /** The field by which to order workflows. */
  field: { $enum: WorkflowRunOrderField }
}
/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParametersInput {
  /** This field is a generated field that can be used to keep an empty input object. */
  $keep?: boolean | number
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate?: boolean | null
  /** Workflows that must pass for this rule to pass. */
  workflows: WorkflowFileReferenceInput[]
}
export type $<T> = T | T[]

export interface $Directive {
  name: string
  args?: any
}

export interface $Directives {
  $directives?: $<string | $Directive>
}

export interface $GraphQLError {
  message: string
  locations?: { line: number; column: number }[]
  path?: (string | number)[]
  extensions?: Record<string, any>
}

export type $Operation<Fields> = Fields & $Directives & {
  __typename?: $Pick
  $name?: string
  $variables?: Record<string, string>
  $fields?: Fields[]
}

export type $Options = $Directives & {
  $alias?: string
}

export type $Pick = $Scalar | $<$Options>

export type $Scalar = string | number | boolean | null | undefined

export interface ActorAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface AppIpAllowListEntriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for IP allow list entries returned.
   *
   * Default value: `{direction: ASC, field: ALLOW_LIST_VALUE}` */
  orderBy?: IpAllowListEntryOrder | null
}
export interface AppLogoUrlArgs {
  /** The size of the resulting image. */
  size?: Int | null
}
export interface AssignableAssigneesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface BotAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface BranchProtectionRuleBranchProtectionRuleConflictsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface BranchProtectionRuleBypassForcePushAllowancesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface BranchProtectionRuleBypassPullRequestAllowancesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface BranchProtectionRuleMatchingRefsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filters refs with query on name */
  query?: string | null
}
export interface BranchProtectionRulePushAllowancesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface BranchProtectionRuleReviewDismissalAllowancesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CheckRunAnnotationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CheckRunIsRequiredArgs {
  /** The id of the pull request this is required for */
  pullRequestId?: ID | null
  /** The number of the pull request this is required for */
  pullRequestNumber?: Int | null
}
export interface CheckRunStepsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Step number */
  number?: Int | null
}
export interface CheckSuiteCheckRunsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filters the check runs by this type. */
  filterBy?: CheckRunFilter | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CheckSuiteMatchingPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface CommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitAssociatedPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: PullRequestOrder | null
}
export interface CommitAuthorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitBlameArgs {
  /** The file whose Git blame information you want. */
  path: string
}
export interface CommitCheckSuitesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filters the check suites by this type. */
  filterBy?: CheckSuiteFilter | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitCommentReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface CommitCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitCommentThreadCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitContributionsByRepositoryContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for commit contributions returned from the connection.
   *
   * Default value: `{direction: DESC, field: OCCURRED_AT}` */
  orderBy?: CommitContributionOrder | null
}
export interface CommitDeploymentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Environments to list deployments for */
  environments?: string[] | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for deployments returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: DeploymentOrder | null
}
export interface CommitFileArgs {
  /** The path for the file */
  path: string
}
export interface CommitHistoryArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** If non-null, filters history to only show commits with matching authorship. */
  author?: CommitAuthor | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** If non-null, filters history to only show commits touching files under this path. */
  path?: string | null
  /** Allows specifying a beginning time or date for fetching commits. Unexpected
   * results may be returned for dates not between 1970-01-01 and 2099-12-13 (inclusive). */
  since?: GitTimestamp | null
  /** Allows specifying an ending time or date for fetching commits. Unexpected
   * results may be returned for dates not between 1970-01-01 and 2099-12-13 (inclusive). */
  until?: GitTimestamp | null
}
export interface CommitParentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface CommitSubmodulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ComparisonCommitsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ContributionsCollectionCommitContributionsByRepositoryArgs {
  /** How many repositories should be included.
   *
   * Default value: `25` */
  maxRepositories?: Int | null
}
export interface ContributionsCollectionIssueContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Should the user's first issue ever be excluded from the result.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented issue be excluded from the result.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface ContributionsCollectionIssueContributionsByRepositoryArgs {
  /** Should the user's first issue ever be excluded from the result.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented issue be excluded from the result.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
  /** How many repositories should be included.
   *
   * Default value: `25` */
  maxRepositories?: Int | null
}
export interface ContributionsCollectionPullRequestContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Should the user's first pull request ever be excluded from the result.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented pull request be excluded from the result.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface ContributionsCollectionPullRequestContributionsByRepositoryArgs {
  /** Should the user's first pull request ever be excluded from the result.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented pull request be excluded from the result.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
  /** How many repositories should be included.
   *
   * Default value: `25` */
  maxRepositories?: Int | null
}
export interface ContributionsCollectionPullRequestReviewContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs {
  /** How many repositories should be included.
   *
   * Default value: `25` */
  maxRepositories?: Int | null
}
export interface ContributionsCollectionRepositoryContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Should the user's first repository ever be excluded from the result.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface ContributionsCollectionTotalIssueContributionsArgs {
  /** Should the user's first issue ever be excluded from this count.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented issue be excluded from this count.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
}
export interface ContributionsCollectionTotalPullRequestContributionsArgs {
  /** Should the user's first pull request ever be excluded from this count.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented pull request be excluded from this count.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
}
export interface ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs {
  /** Should the user's first issue ever be excluded from this count.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented issue be excluded from this count.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
}
export interface ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs {
  /** Should the user's first pull request ever be excluded from this count.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
  /** Should the user's most commented pull request be excluded from this count.
   *
   * Default value: `false` */
  excludePopular?: boolean | null
}
export interface ContributionsCollectionTotalRepositoryContributionsArgs {
  /** Should the user's first repository ever be excluded from this count.
   *
   * Default value: `false` */
  excludeFirst?: boolean | null
}
export interface DependencyGraphManifestDependenciesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DeploymentProtectionRuleReviewersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DeploymentRequestReviewersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DeploymentReviewEnvironmentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DeploymentStatusesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DiscussionCommentReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface DiscussionCommentRepliesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DiscussionCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DiscussionCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DiscussionLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
}
export interface DiscussionPollOptionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** How to order the options for the discussion poll.
   *
   * Default value: `{direction: ASC, field: AUTHORED_ORDER}` */
  orderBy?: DiscussionPollOptionOrder | null
}
export interface DiscussionReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface DiscussionUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DraftIssueAssigneesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DraftIssueProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface DraftIssueProjectV2ItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface EnterpriseAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface EnterpriseIdentityProviderExternalIdentitiesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter to external identities with the users login */
  login?: string | null
  /** Filter to external identities with valid org membership only */
  membersOnly?: boolean | null
  /** Filter to external identities with the users userName/NameID attribute */
  userName?: string | null
}
export interface EnterpriseMembersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Only return members within the selected GitHub Enterprise deployment */
  deployment?: { $enum: EnterpriseUserDeployment } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Only return members with this two-factor authentication status. Does not
   * include members who only have an account on a GitHub Enterprise Server instance.
   *
   * **Upcoming Change on 2025-04-01 UTC**
   * **Description:** `hasTwoFactorEnabled` will be removed. Use `two_factor_method_security` instead.
   * **Reason:** `has_two_factor_enabled` will be removed.
   *
   * Default value: `null` */
  hasTwoFactorEnabled?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for members returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: EnterpriseMemberOrder | null
  /** Only return members within the organizations with these logins */
  organizationLogins?: string[] | null
  /** The search string to look for. */
  query?: string | null
  /** The role of the user in the enterprise organization or server. */
  role?: { $enum: EnterpriseUserAccountMembershipRole } | null
  /** Only return members with this type of two-factor authentication method. Does
   * not include members who only have an account on a GitHub Enterprise Server instance.
   *
   * Default value: `null` */
  twoFactorMethodSecurity?: { $enum: TwoFactorCredentialSecurityType } | null
}
export interface EnterpriseOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The search string to look for. */
  query?: string | null
  /** The viewer's role in an organization. */
  viewerOrganizationRole?: { $enum: RoleInOrganization } | null
}
export interface EnterpriseOutsideCollaboratorEdgeRepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories.
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: RepositoryOrder | null
}
export interface EnterpriseOwnerInfoAdminsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Only return administrators with this two-factor authentication status.
   *
   * **Upcoming Change on 2025-04-01 UTC**
   * **Description:** `hasTwoFactorEnabled` will be removed. Use `two_factor_method_security` instead.
   * **Reason:** `has_two_factor_enabled` will be removed.
   *
   * Default value: `null` */
  hasTwoFactorEnabled?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for administrators returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: EnterpriseMemberOrder | null
  /** Only return members within the organizations with these logins */
  organizationLogins?: string[] | null
  /** The search string to look for. */
  query?: string | null
  /** The role to filter by. */
  role?: { $enum: EnterpriseAdministratorRole } | null
  /** Only return outside collaborators with this type of two-factor authentication method.
   *
   * Default value: `null` */
  twoFactorMethodSecurity?: { $enum: TwoFactorCredentialSecurityType } | null
}
export interface EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The permission to find organizations for. */
  value: { $enum: DefaultRepositoryPermissionField }
}
export interface EnterpriseOwnerInfoDomainsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Filter whether or not the domain is approved.
   *
   * Default value: `null` */
  isApproved?: boolean | null
  /** Filter whether or not the domain is verified.
   *
   * Default value: `null` */
  isVerified?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for verifiable domains returned.
   *
   * Default value: `{direction: ASC, field: DOMAIN}` */
  orderBy?: VerifiableDomainOrder | null
}
export interface EnterpriseOwnerInfoEnterpriseServerInstallationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Whether or not to only return installations discovered via GitHub Connect.
   *
   * Default value: `false` */
  connectedOnly?: boolean | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for Enterprise Server installations returned.
   *
   * Default value: `{direction: ASC, field: HOST_NAME}` */
  orderBy?: EnterpriseServerInstallationOrder | null
}
export interface EnterpriseOwnerInfoFailedInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The search string to look for. */
  query?: string | null
}
export interface EnterpriseOwnerInfoIpAllowListEntriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for IP allow list entries returned.
   *
   * Default value: `{direction: ASC, field: ALLOW_LIST_VALUE}` */
  orderBy?: IpAllowListEntryOrder | null
}
export interface EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting to find organizations for. */
  value: { $enum: OrganizationMembersCanCreateRepositoriesSettingValue }
}
export interface EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoOutsideCollaboratorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Only return outside collaborators with this two-factor authentication status.
   *
   * **Upcoming Change on 2025-04-01 UTC**
   * **Description:** `hasTwoFactorEnabled` will be removed. Use `two_factor_method_security` instead.
   * **Reason:** `has_two_factor_enabled` will be removed.
   *
   * Default value: `null` */
  hasTwoFactorEnabled?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The login of one specific outside collaborator. */
  login?: string | null
  /** Ordering options for outside collaborators returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: EnterpriseMemberOrder | null
  /** Only return outside collaborators within the organizations with these logins */
  organizationLogins?: string[] | null
  /** The search string to look for. */
  query?: string | null
  /** Only return outside collaborators with this type of two-factor authentication method.
   *
   * Default value: `null` */
  twoFactorMethodSecurity?: { $enum: TwoFactorCredentialSecurityType } | null
  /** Only return outside collaborators on repositories with this visibility. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface EnterpriseOwnerInfoPendingAdminInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pending enterprise administrator invitations returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: EnterpriseAdministratorInvitationOrder | null
  /** The search string to look for. */
  query?: string | null
  /** The role to filter by. */
  role?: { $enum: EnterpriseAdministratorRole } | null
}
export interface EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pending repository collaborator invitations returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: RepositoryInvitationOrder | null
  /** The search string to look for. */
  query?: string | null
}
export interface EnterpriseOwnerInfoPendingMemberInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Only return invitations matching this invitation source */
  invitationSource?: { $enum: OrganizationInvitationSource } | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Only return invitations within the organizations with these logins */
  organizationLogins?: string[] | null
  /** The search string to look for. */
  query?: string | null
}
export interface EnterpriseOwnerInfoPendingUnaffiliatedMemberInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pending enterprise member invitations returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: EnterpriseMemberInvitationOrder | null
  /** The search string to look for. */
  query?: string | null
}
export interface EnterpriseOwnerInfoRepositoryDeployKeySettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: { $enum: IdentityProviderConfigurationState }
}
export interface EnterpriseOwnerInfoSupportEntitlementsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for support entitlement users returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: EnterpriseMemberOrder | null
}
export interface EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations with this setting.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The setting value to find organizations for. */
  value: boolean
}
export interface EnterpriseRulesetArgs {
  /** The ID of the ruleset to be returned. */
  databaseId: Int
}
export interface EnterpriseRulesetsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface EnterpriseServerInstallationUserAccountsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for Enterprise Server user accounts returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: EnterpriseServerUserAccountOrder | null
}
export interface EnterpriseServerInstallationUserAccountsUploadsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for Enterprise Server user accounts uploads returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: EnterpriseServerUserAccountsUploadOrder | null
}
export interface EnterpriseServerUserAccountEmailsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for Enterprise Server user account emails returned from the connection.
   *
   * Default value: `{direction: ASC, field: EMAIL}` */
  orderBy?: EnterpriseServerUserAccountEmailOrder | null
}
export interface EnterpriseUserAccountAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface EnterpriseUserAccountEnterpriseInstallationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for installations returned from the connection.
   *
   * Default value: `{direction: ASC, field: HOST_NAME}` */
  orderBy?: EnterpriseServerInstallationOrder | null
  /** The search string to look for. */
  query?: string | null
  /** The role of the user in the installation. */
  role?: { $enum: EnterpriseUserAccountMembershipRole } | null
}
export interface EnterpriseUserAccountOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for organizations returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrganizationOrder | null
  /** The search string to look for. */
  query?: string | null
  /** The role of the user in the enterprise organization. */
  role?: { $enum: EnterpriseUserAccountMembershipRole } | null
}
export interface EnterpriseUserNamespaceRepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection.
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: RepositoryOrder | null
  /** The search string to look for. */
  query?: string | null
}
export interface EnvironmentProtectionRulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface GistCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface GistCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface GistFilesArgs {
  /** The maximum number of files to return.
   *
   * Default value: `10` */
  limit?: Int | null
  /** The oid of the files to return */
  oid?: GitObjectID | null
}
export interface GistFileTextArgs {
  /** Optionally truncate the returned file to this length. */
  truncate?: Int | null
}
export interface GistForksArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for gists returned from the connection */
  orderBy?: GistOrder | null
}
export interface GistStargazersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: StarOrder | null
}
export interface GitActorAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueAssigneesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueClosedByPullRequestsReferencesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Include closed PRs in results
   *
   * Default value: `false` */
  includeClosedPrs?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Return results ordered by state
   *
   * Default value: `false` */
  orderByState?: boolean | null
  /** Return only manually linked PRs
   *
   * Default value: `false` */
  userLinkedOnly?: boolean | null
}
export interface IssueCommentReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface IssueCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issue comments returned from the connection. */
  orderBy?: IssueCommentOrder | null
}
export interface IssueCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueContributionsByRepositoryContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface IssueHovercardArgs {
  /** Whether or not to include notification contexts
   *
   * Default value: `true` */
  includeNotificationContexts?: boolean | null
}
export interface IssueLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
}
export interface IssueLinkedBranchesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueParticipantsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueProjectCardsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** A list of archived states to filter the cards by
   *
   * Default value: `[ARCHIVED, NOT_ARCHIVED]` */
  archivedStates?: ({ $enum: ProjectCardArchivedState } | null)[] | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueProjectItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Include archived items.
   *
   * Default value: `true` */
  includeArchived?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for under the the owner. */
  query?: string | null
}
export interface IssueProjectV2Args {
  /** The project number. */
  number: Int
}
export interface IssueReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface IssueStateReasonArgs {
  /** Whether or not to return state reason for duplicates
   *
   * Default value: `false` */
  enableDuplicate?: boolean | null
}
export interface IssueSubIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueTemplateAssigneesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueTemplateLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
}
export interface IssueTimelineArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows filtering timeline events by a `since` timestamp. */
  since?: DateTime | null
}
export interface IssueTimelineItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Filter timeline items by type. */
  itemTypes?: { $enum: IssueTimelineItemsItemType }[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter timeline items by a `since` timestamp. */
  since?: DateTime | null
  /** Skips the first _n_ elements in the list. */
  skip?: Int | null
}
export interface IssueTrackedInIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueTrackedIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface IssueTrackedIssuesCountArgs {
  /** Limit the count to tracked issues with the specified states. */
  states?: ({ $enum: TrackedIssueStates } | null)[] | null
}
export interface IssueUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface LabelableLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
}
export interface LabelIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filtering options for issues returned from the connection. */
  filterBy?: IssueFilters | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issues returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the issues by. */
  states?: { $enum: IssueState }[] | null
}
export interface LabelPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface MannequinAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface MarketplaceListingLogoUrlArgs {
  /** The size in pixels of the resulting square image.
   *
   * Default value: `400` */
  size?: Int | null
}
export interface MemberStatusableMemberStatusesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for user statuses returned from the connection.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: UserStatusOrder | null
}
export interface MergeQueueEntriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface MilestoneIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filtering options for issues returned from the connection. */
  filterBy?: IssueFilters | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issues returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the issues by. */
  states?: { $enum: IssueState }[] | null
}
export interface MilestonePullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface MutationAbortQueuedMigrationsArgs {
  /** Parameters for AbortQueuedMigrations */
  input: AbortQueuedMigrationsInput
}
export interface MutationAbortRepositoryMigrationArgs {
  /** Parameters for AbortRepositoryMigration */
  input: AbortRepositoryMigrationInput
}
export interface MutationAcceptEnterpriseAdministratorInvitationArgs {
  /** Parameters for AcceptEnterpriseAdministratorInvitation */
  input: AcceptEnterpriseAdministratorInvitationInput
}
export interface MutationAcceptEnterpriseMemberInvitationArgs {
  /** Parameters for AcceptEnterpriseMemberInvitation */
  input: AcceptEnterpriseMemberInvitationInput
}
export interface MutationAcceptTopicSuggestionArgs {
  /** Parameters for AcceptTopicSuggestion */
  input: AcceptTopicSuggestionInput
}
export interface MutationAccessUserNamespaceRepositoryArgs {
  /** Parameters for AccessUserNamespaceRepository */
  input: AccessUserNamespaceRepositoryInput
}
export interface MutationAddAssigneesToAssignableArgs {
  /** Parameters for AddAssigneesToAssignable */
  input: AddAssigneesToAssignableInput
}
export interface MutationAddCommentArgs {
  /** Parameters for AddComment */
  input: AddCommentInput
}
export interface MutationAddDiscussionCommentArgs {
  /** Parameters for AddDiscussionComment */
  input: AddDiscussionCommentInput
}
export interface MutationAddDiscussionPollVoteArgs {
  /** Parameters for AddDiscussionPollVote */
  input: AddDiscussionPollVoteInput
}
export interface MutationAddEnterpriseOrganizationMemberArgs {
  /** Parameters for AddEnterpriseOrganizationMember */
  input: AddEnterpriseOrganizationMemberInput
}
export interface MutationAddEnterpriseSupportEntitlementArgs {
  /** Parameters for AddEnterpriseSupportEntitlement */
  input: AddEnterpriseSupportEntitlementInput
}
export interface MutationAddLabelsToLabelableArgs {
  /** Parameters for AddLabelsToLabelable */
  input: AddLabelsToLabelableInput
}
export interface MutationAddProjectCardArgs {
  /** Parameters for AddProjectCard */
  input: AddProjectCardInput
}
export interface MutationAddProjectColumnArgs {
  /** Parameters for AddProjectColumn */
  input: AddProjectColumnInput
}
export interface MutationAddProjectV2DraftIssueArgs {
  /** Parameters for AddProjectV2DraftIssue */
  input: AddProjectV2DraftIssueInput
}
export interface MutationAddProjectV2ItemByIdArgs {
  /** Parameters for AddProjectV2ItemById */
  input: AddProjectV2ItemByIdInput
}
export interface MutationAddPullRequestReviewArgs {
  /** Parameters for AddPullRequestReview */
  input: AddPullRequestReviewInput
}
export interface MutationAddPullRequestReviewCommentArgs {
  /** Parameters for AddPullRequestReviewComment */
  input: AddPullRequestReviewCommentInput
}
export interface MutationAddPullRequestReviewThreadArgs {
  /** Parameters for AddPullRequestReviewThread */
  input: AddPullRequestReviewThreadInput
}
export interface MutationAddPullRequestReviewThreadReplyArgs {
  /** Parameters for AddPullRequestReviewThreadReply */
  input: AddPullRequestReviewThreadReplyInput
}
export interface MutationAddReactionArgs {
  /** Parameters for AddReaction */
  input: AddReactionInput
}
export interface MutationAddStarArgs {
  /** Parameters for AddStar */
  input: AddStarInput
}
export interface MutationAddSubIssueArgs {
  /** Parameters for AddSubIssue */
  input: AddSubIssueInput
}
export interface MutationAddUpvoteArgs {
  /** Parameters for AddUpvote */
  input: AddUpvoteInput
}
export interface MutationAddVerifiableDomainArgs {
  /** Parameters for AddVerifiableDomain */
  input: AddVerifiableDomainInput
}
export interface MutationApproveDeploymentsArgs {
  /** Parameters for ApproveDeployments */
  input: ApproveDeploymentsInput
}
export interface MutationApproveVerifiableDomainArgs {
  /** Parameters for ApproveVerifiableDomain */
  input: ApproveVerifiableDomainInput
}
export interface MutationArchiveProjectV2ItemArgs {
  /** Parameters for ArchiveProjectV2Item */
  input: ArchiveProjectV2ItemInput
}
export interface MutationArchiveRepositoryArgs {
  /** Parameters for ArchiveRepository */
  input: ArchiveRepositoryInput
}
export interface MutationCancelEnterpriseAdminInvitationArgs {
  /** Parameters for CancelEnterpriseAdminInvitation */
  input: CancelEnterpriseAdminInvitationInput
}
export interface MutationCancelEnterpriseMemberInvitationArgs {
  /** Parameters for CancelEnterpriseMemberInvitation */
  input: CancelEnterpriseMemberInvitationInput
}
export interface MutationCancelSponsorshipArgs {
  /** Parameters for CancelSponsorship */
  input: CancelSponsorshipInput
}
export interface MutationChangeUserStatusArgs {
  /** Parameters for ChangeUserStatus */
  input: ChangeUserStatusInput
}
export interface MutationClearLabelsFromLabelableArgs {
  /** Parameters for ClearLabelsFromLabelable */
  input: ClearLabelsFromLabelableInput
}
export interface MutationClearProjectV2ItemFieldValueArgs {
  /** Parameters for ClearProjectV2ItemFieldValue */
  input: ClearProjectV2ItemFieldValueInput
}
export interface MutationCloneProjectArgs {
  /** Parameters for CloneProject */
  input: CloneProjectInput
}
export interface MutationCloneTemplateRepositoryArgs {
  /** Parameters for CloneTemplateRepository */
  input: CloneTemplateRepositoryInput
}
export interface MutationCloseDiscussionArgs {
  /** Parameters for CloseDiscussion */
  input: CloseDiscussionInput
}
export interface MutationCloseIssueArgs {
  /** Parameters for CloseIssue */
  input: CloseIssueInput
}
export interface MutationClosePullRequestArgs {
  /** Parameters for ClosePullRequest */
  input: ClosePullRequestInput
}
export interface MutationConvertProjectCardNoteToIssueArgs {
  /** Parameters for ConvertProjectCardNoteToIssue */
  input: ConvertProjectCardNoteToIssueInput
}
export interface MutationConvertProjectV2DraftIssueItemToIssueArgs {
  /** Parameters for ConvertProjectV2DraftIssueItemToIssue */
  input: ConvertProjectV2DraftIssueItemToIssueInput
}
export interface MutationConvertPullRequestToDraftArgs {
  /** Parameters for ConvertPullRequestToDraft */
  input: ConvertPullRequestToDraftInput
}
export interface MutationCopyProjectV2Args {
  /** Parameters for CopyProjectV2 */
  input: CopyProjectV2Input
}
export interface MutationCreateAttributionInvitationArgs {
  /** Parameters for CreateAttributionInvitation */
  input: CreateAttributionInvitationInput
}
export interface MutationCreateBranchProtectionRuleArgs {
  /** Parameters for CreateBranchProtectionRule */
  input: CreateBranchProtectionRuleInput
}
export interface MutationCreateCheckRunArgs {
  /** Parameters for CreateCheckRun */
  input: CreateCheckRunInput
}
export interface MutationCreateCheckSuiteArgs {
  /** Parameters for CreateCheckSuite */
  input: CreateCheckSuiteInput
}
export interface MutationCreateCommitOnBranchArgs {
  /** Parameters for CreateCommitOnBranch */
  input: CreateCommitOnBranchInput
}
export interface MutationCreateDeploymentArgs {
  /** Parameters for CreateDeployment */
  input: CreateDeploymentInput
}
export interface MutationCreateDeploymentStatusArgs {
  /** Parameters for CreateDeploymentStatus */
  input: CreateDeploymentStatusInput
}
export interface MutationCreateDiscussionArgs {
  /** Parameters for CreateDiscussion */
  input: CreateDiscussionInput
}
export interface MutationCreateEnterpriseOrganizationArgs {
  /** Parameters for CreateEnterpriseOrganization */
  input: CreateEnterpriseOrganizationInput
}
export interface MutationCreateEnvironmentArgs {
  /** Parameters for CreateEnvironment */
  input: CreateEnvironmentInput
}
export interface MutationCreateIpAllowListEntryArgs {
  /** Parameters for CreateIpAllowListEntry */
  input: CreateIpAllowListEntryInput
}
export interface MutationCreateIssueArgs {
  /** Parameters for CreateIssue */
  input: CreateIssueInput
}
export interface MutationCreateLabelArgs {
  /** Parameters for CreateLabel */
  input: CreateLabelInput
}
export interface MutationCreateLinkedBranchArgs {
  /** Parameters for CreateLinkedBranch */
  input: CreateLinkedBranchInput
}
export interface MutationCreateMigrationSourceArgs {
  /** Parameters for CreateMigrationSource */
  input: CreateMigrationSourceInput
}
export interface MutationCreateProjectArgs {
  /** Parameters for CreateProject */
  input: CreateProjectInput
}
export interface MutationCreateProjectV2Args {
  /** Parameters for CreateProjectV2 */
  input: CreateProjectV2Input
}
export interface MutationCreateProjectV2FieldArgs {
  /** Parameters for CreateProjectV2Field */
  input: CreateProjectV2FieldInput
}
export interface MutationCreateProjectV2StatusUpdateArgs {
  /** Parameters for CreateProjectV2StatusUpdate */
  input: CreateProjectV2StatusUpdateInput
}
export interface MutationCreatePullRequestArgs {
  /** Parameters for CreatePullRequest */
  input: CreatePullRequestInput
}
export interface MutationCreateRefArgs {
  /** Parameters for CreateRef */
  input: CreateRefInput
}
export interface MutationCreateRepositoryArgs {
  /** Parameters for CreateRepository */
  input: CreateRepositoryInput
}
export interface MutationCreateRepositoryRulesetArgs {
  /** Parameters for CreateRepositoryRuleset */
  input: CreateRepositoryRulesetInput
}
export interface MutationCreateSponsorshipArgs {
  /** Parameters for CreateSponsorship */
  input: CreateSponsorshipInput
}
export interface MutationCreateSponsorshipsArgs {
  /** Parameters for CreateSponsorships */
  input: CreateSponsorshipsInput
}
export interface MutationCreateSponsorsListingArgs {
  /** Parameters for CreateSponsorsListing */
  input: CreateSponsorsListingInput
}
export interface MutationCreateSponsorsTierArgs {
  /** Parameters for CreateSponsorsTier */
  input: CreateSponsorsTierInput
}
export interface MutationCreateTeamDiscussionArgs {
  /** Parameters for CreateTeamDiscussion */
  input: CreateTeamDiscussionInput
}
export interface MutationCreateTeamDiscussionCommentArgs {
  /** Parameters for CreateTeamDiscussionComment */
  input: CreateTeamDiscussionCommentInput
}
export interface MutationCreateUserListArgs {
  /** Parameters for CreateUserList */
  input: CreateUserListInput
}
export interface MutationDeclineTopicSuggestionArgs {
  /** Parameters for DeclineTopicSuggestion */
  input: DeclineTopicSuggestionInput
}
export interface MutationDeleteBranchProtectionRuleArgs {
  /** Parameters for DeleteBranchProtectionRule */
  input: DeleteBranchProtectionRuleInput
}
export interface MutationDeleteDeploymentArgs {
  /** Parameters for DeleteDeployment */
  input: DeleteDeploymentInput
}
export interface MutationDeleteDiscussionArgs {
  /** Parameters for DeleteDiscussion */
  input: DeleteDiscussionInput
}
export interface MutationDeleteDiscussionCommentArgs {
  /** Parameters for DeleteDiscussionComment */
  input: DeleteDiscussionCommentInput
}
export interface MutationDeleteEnvironmentArgs {
  /** Parameters for DeleteEnvironment */
  input: DeleteEnvironmentInput
}
export interface MutationDeleteIpAllowListEntryArgs {
  /** Parameters for DeleteIpAllowListEntry */
  input: DeleteIpAllowListEntryInput
}
export interface MutationDeleteIssueArgs {
  /** Parameters for DeleteIssue */
  input: DeleteIssueInput
}
export interface MutationDeleteIssueCommentArgs {
  /** Parameters for DeleteIssueComment */
  input: DeleteIssueCommentInput
}
export interface MutationDeleteLabelArgs {
  /** Parameters for DeleteLabel */
  input: DeleteLabelInput
}
export interface MutationDeleteLinkedBranchArgs {
  /** Parameters for DeleteLinkedBranch */
  input: DeleteLinkedBranchInput
}
export interface MutationDeletePackageVersionArgs {
  /** Parameters for DeletePackageVersion */
  input: DeletePackageVersionInput
}
export interface MutationDeleteProjectArgs {
  /** Parameters for DeleteProject */
  input: DeleteProjectInput
}
export interface MutationDeleteProjectCardArgs {
  /** Parameters for DeleteProjectCard */
  input: DeleteProjectCardInput
}
export interface MutationDeleteProjectColumnArgs {
  /** Parameters for DeleteProjectColumn */
  input: DeleteProjectColumnInput
}
export interface MutationDeleteProjectV2Args {
  /** Parameters for DeleteProjectV2 */
  input: DeleteProjectV2Input
}
export interface MutationDeleteProjectV2FieldArgs {
  /** Parameters for DeleteProjectV2Field */
  input: DeleteProjectV2FieldInput
}
export interface MutationDeleteProjectV2ItemArgs {
  /** Parameters for DeleteProjectV2Item */
  input: DeleteProjectV2ItemInput
}
export interface MutationDeleteProjectV2StatusUpdateArgs {
  /** Parameters for DeleteProjectV2StatusUpdate */
  input: DeleteProjectV2StatusUpdateInput
}
export interface MutationDeleteProjectV2WorkflowArgs {
  /** Parameters for DeleteProjectV2Workflow */
  input: DeleteProjectV2WorkflowInput
}
export interface MutationDeletePullRequestReviewArgs {
  /** Parameters for DeletePullRequestReview */
  input: DeletePullRequestReviewInput
}
export interface MutationDeletePullRequestReviewCommentArgs {
  /** Parameters for DeletePullRequestReviewComment */
  input: DeletePullRequestReviewCommentInput
}
export interface MutationDeleteRefArgs {
  /** Parameters for DeleteRef */
  input: DeleteRefInput
}
export interface MutationDeleteRepositoryRulesetArgs {
  /** Parameters for DeleteRepositoryRuleset */
  input: DeleteRepositoryRulesetInput
}
export interface MutationDeleteTeamDiscussionArgs {
  /** Parameters for DeleteTeamDiscussion */
  input: DeleteTeamDiscussionInput
}
export interface MutationDeleteTeamDiscussionCommentArgs {
  /** Parameters for DeleteTeamDiscussionComment */
  input: DeleteTeamDiscussionCommentInput
}
export interface MutationDeleteUserListArgs {
  /** Parameters for DeleteUserList */
  input: DeleteUserListInput
}
export interface MutationDeleteVerifiableDomainArgs {
  /** Parameters for DeleteVerifiableDomain */
  input: DeleteVerifiableDomainInput
}
export interface MutationDequeuePullRequestArgs {
  /** Parameters for DequeuePullRequest */
  input: DequeuePullRequestInput
}
export interface MutationDisablePullRequestAutoMergeArgs {
  /** Parameters for DisablePullRequestAutoMerge */
  input: DisablePullRequestAutoMergeInput
}
export interface MutationDismissPullRequestReviewArgs {
  /** Parameters for DismissPullRequestReview */
  input: DismissPullRequestReviewInput
}
export interface MutationDismissRepositoryVulnerabilityAlertArgs {
  /** Parameters for DismissRepositoryVulnerabilityAlert */
  input: DismissRepositoryVulnerabilityAlertInput
}
export interface MutationEnablePullRequestAutoMergeArgs {
  /** Parameters for EnablePullRequestAutoMerge */
  input: EnablePullRequestAutoMergeInput
}
export interface MutationEnqueuePullRequestArgs {
  /** Parameters for EnqueuePullRequest */
  input: EnqueuePullRequestInput
}
export interface MutationFollowOrganizationArgs {
  /** Parameters for FollowOrganization */
  input: FollowOrganizationInput
}
export interface MutationFollowUserArgs {
  /** Parameters for FollowUser */
  input: FollowUserInput
}
export interface MutationGrantEnterpriseOrganizationsMigratorRoleArgs {
  /** Parameters for GrantEnterpriseOrganizationsMigratorRole */
  input: GrantEnterpriseOrganizationsMigratorRoleInput
}
export interface MutationGrantMigratorRoleArgs {
  /** Parameters for GrantMigratorRole */
  input: GrantMigratorRoleInput
}
export interface MutationImportProjectArgs {
  /** Parameters for ImportProject */
  input: ImportProjectInput
}
export interface MutationInviteEnterpriseAdminArgs {
  /** Parameters for InviteEnterpriseAdmin */
  input: InviteEnterpriseAdminInput
}
export interface MutationInviteEnterpriseMemberArgs {
  /** Parameters for InviteEnterpriseMember */
  input: InviteEnterpriseMemberInput
}
export interface MutationLinkProjectV2ToRepositoryArgs {
  /** Parameters for LinkProjectV2ToRepository */
  input: LinkProjectV2ToRepositoryInput
}
export interface MutationLinkProjectV2ToTeamArgs {
  /** Parameters for LinkProjectV2ToTeam */
  input: LinkProjectV2ToTeamInput
}
export interface MutationLinkRepositoryToProjectArgs {
  /** Parameters for LinkRepositoryToProject */
  input: LinkRepositoryToProjectInput
}
export interface MutationLockLockableArgs {
  /** Parameters for LockLockable */
  input: LockLockableInput
}
export interface MutationMarkDiscussionCommentAsAnswerArgs {
  /** Parameters for MarkDiscussionCommentAsAnswer */
  input: MarkDiscussionCommentAsAnswerInput
}
export interface MutationMarkFileAsViewedArgs {
  /** Parameters for MarkFileAsViewed */
  input: MarkFileAsViewedInput
}
export interface MutationMarkProjectV2AsTemplateArgs {
  /** Parameters for MarkProjectV2AsTemplate */
  input: MarkProjectV2AsTemplateInput
}
export interface MutationMarkPullRequestReadyForReviewArgs {
  /** Parameters for MarkPullRequestReadyForReview */
  input: MarkPullRequestReadyForReviewInput
}
export interface MutationMergeBranchArgs {
  /** Parameters for MergeBranch */
  input: MergeBranchInput
}
export interface MutationMergePullRequestArgs {
  /** Parameters for MergePullRequest */
  input: MergePullRequestInput
}
export interface MutationMinimizeCommentArgs {
  /** Parameters for MinimizeComment */
  input: MinimizeCommentInput
}
export interface MutationMoveProjectCardArgs {
  /** Parameters for MoveProjectCard */
  input: MoveProjectCardInput
}
export interface MutationMoveProjectColumnArgs {
  /** Parameters for MoveProjectColumn */
  input: MoveProjectColumnInput
}
export interface MutationPinEnvironmentArgs {
  /** Parameters for PinEnvironment */
  input: PinEnvironmentInput
}
export interface MutationPinIssueArgs {
  /** Parameters for PinIssue */
  input: PinIssueInput
}
export interface MutationPublishSponsorsTierArgs {
  /** Parameters for PublishSponsorsTier */
  input: PublishSponsorsTierInput
}
export interface MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs {
  /** Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes */
  input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput
}
export interface MutationRegenerateVerifiableDomainTokenArgs {
  /** Parameters for RegenerateVerifiableDomainToken */
  input: RegenerateVerifiableDomainTokenInput
}
export interface MutationRejectDeploymentsArgs {
  /** Parameters for RejectDeployments */
  input: RejectDeploymentsInput
}
export interface MutationRemoveAssigneesFromAssignableArgs {
  /** Parameters for RemoveAssigneesFromAssignable */
  input: RemoveAssigneesFromAssignableInput
}
export interface MutationRemoveEnterpriseAdminArgs {
  /** Parameters for RemoveEnterpriseAdmin */
  input: RemoveEnterpriseAdminInput
}
export interface MutationRemoveEnterpriseIdentityProviderArgs {
  /** Parameters for RemoveEnterpriseIdentityProvider */
  input: RemoveEnterpriseIdentityProviderInput
}
export interface MutationRemoveEnterpriseMemberArgs {
  /** Parameters for RemoveEnterpriseMember */
  input: RemoveEnterpriseMemberInput
}
export interface MutationRemoveEnterpriseOrganizationArgs {
  /** Parameters for RemoveEnterpriseOrganization */
  input: RemoveEnterpriseOrganizationInput
}
export interface MutationRemoveEnterpriseSupportEntitlementArgs {
  /** Parameters for RemoveEnterpriseSupportEntitlement */
  input: RemoveEnterpriseSupportEntitlementInput
}
export interface MutationRemoveLabelsFromLabelableArgs {
  /** Parameters for RemoveLabelsFromLabelable */
  input: RemoveLabelsFromLabelableInput
}
export interface MutationRemoveOutsideCollaboratorArgs {
  /** Parameters for RemoveOutsideCollaborator */
  input: RemoveOutsideCollaboratorInput
}
export interface MutationRemoveReactionArgs {
  /** Parameters for RemoveReaction */
  input: RemoveReactionInput
}
export interface MutationRemoveStarArgs {
  /** Parameters for RemoveStar */
  input: RemoveStarInput
}
export interface MutationRemoveSubIssueArgs {
  /** Parameters for RemoveSubIssue */
  input: RemoveSubIssueInput
}
export interface MutationRemoveUpvoteArgs {
  /** Parameters for RemoveUpvote */
  input: RemoveUpvoteInput
}
export interface MutationReopenDiscussionArgs {
  /** Parameters for ReopenDiscussion */
  input: ReopenDiscussionInput
}
export interface MutationReopenIssueArgs {
  /** Parameters for ReopenIssue */
  input: ReopenIssueInput
}
export interface MutationReopenPullRequestArgs {
  /** Parameters for ReopenPullRequest */
  input: ReopenPullRequestInput
}
export interface MutationReorderEnvironmentArgs {
  /** Parameters for ReorderEnvironment */
  input: ReorderEnvironmentInput
}
export interface MutationReprioritizeSubIssueArgs {
  /** Parameters for ReprioritizeSubIssue */
  input: ReprioritizeSubIssueInput
}
export interface MutationRequestReviewsArgs {
  /** Parameters for RequestReviews */
  input: RequestReviewsInput
}
export interface MutationRerequestCheckSuiteArgs {
  /** Parameters for RerequestCheckSuite */
  input: RerequestCheckSuiteInput
}
export interface MutationResolveReviewThreadArgs {
  /** Parameters for ResolveReviewThread */
  input: ResolveReviewThreadInput
}
export interface MutationRetireSponsorsTierArgs {
  /** Parameters for RetireSponsorsTier */
  input: RetireSponsorsTierInput
}
export interface MutationRevertPullRequestArgs {
  /** Parameters for RevertPullRequest */
  input: RevertPullRequestInput
}
export interface MutationRevokeEnterpriseOrganizationsMigratorRoleArgs {
  /** Parameters for RevokeEnterpriseOrganizationsMigratorRole */
  input: RevokeEnterpriseOrganizationsMigratorRoleInput
}
export interface MutationRevokeMigratorRoleArgs {
  /** Parameters for RevokeMigratorRole */
  input: RevokeMigratorRoleInput
}
export interface MutationSetEnterpriseIdentityProviderArgs {
  /** Parameters for SetEnterpriseIdentityProvider */
  input: SetEnterpriseIdentityProviderInput
}
export interface MutationSetOrganizationInteractionLimitArgs {
  /** Parameters for SetOrganizationInteractionLimit */
  input: SetOrganizationInteractionLimitInput
}
export interface MutationSetRepositoryInteractionLimitArgs {
  /** Parameters for SetRepositoryInteractionLimit */
  input: SetRepositoryInteractionLimitInput
}
export interface MutationSetUserInteractionLimitArgs {
  /** Parameters for SetUserInteractionLimit */
  input: SetUserInteractionLimitInput
}
export interface MutationStartOrganizationMigrationArgs {
  /** Parameters for StartOrganizationMigration */
  input: StartOrganizationMigrationInput
}
export interface MutationStartRepositoryMigrationArgs {
  /** Parameters for StartRepositoryMigration */
  input: StartRepositoryMigrationInput
}
export interface MutationSubmitPullRequestReviewArgs {
  /** Parameters for SubmitPullRequestReview */
  input: SubmitPullRequestReviewInput
}
export interface MutationTransferEnterpriseOrganizationArgs {
  /** Parameters for TransferEnterpriseOrganization */
  input: TransferEnterpriseOrganizationInput
}
export interface MutationTransferIssueArgs {
  /** Parameters for TransferIssue */
  input: TransferIssueInput
}
export interface MutationUnarchiveProjectV2ItemArgs {
  /** Parameters for UnarchiveProjectV2Item */
  input: UnarchiveProjectV2ItemInput
}
export interface MutationUnarchiveRepositoryArgs {
  /** Parameters for UnarchiveRepository */
  input: UnarchiveRepositoryInput
}
export interface MutationUnfollowOrganizationArgs {
  /** Parameters for UnfollowOrganization */
  input: UnfollowOrganizationInput
}
export interface MutationUnfollowUserArgs {
  /** Parameters for UnfollowUser */
  input: UnfollowUserInput
}
export interface MutationUnlinkProjectV2FromRepositoryArgs {
  /** Parameters for UnlinkProjectV2FromRepository */
  input: UnlinkProjectV2FromRepositoryInput
}
export interface MutationUnlinkProjectV2FromTeamArgs {
  /** Parameters for UnlinkProjectV2FromTeam */
  input: UnlinkProjectV2FromTeamInput
}
export interface MutationUnlinkRepositoryFromProjectArgs {
  /** Parameters for UnlinkRepositoryFromProject */
  input: UnlinkRepositoryFromProjectInput
}
export interface MutationUnlockLockableArgs {
  /** Parameters for UnlockLockable */
  input: UnlockLockableInput
}
export interface MutationUnmarkDiscussionCommentAsAnswerArgs {
  /** Parameters for UnmarkDiscussionCommentAsAnswer */
  input: UnmarkDiscussionCommentAsAnswerInput
}
export interface MutationUnmarkFileAsViewedArgs {
  /** Parameters for UnmarkFileAsViewed */
  input: UnmarkFileAsViewedInput
}
export interface MutationUnmarkIssueAsDuplicateArgs {
  /** Parameters for UnmarkIssueAsDuplicate */
  input: UnmarkIssueAsDuplicateInput
}
export interface MutationUnmarkProjectV2AsTemplateArgs {
  /** Parameters for UnmarkProjectV2AsTemplate */
  input: UnmarkProjectV2AsTemplateInput
}
export interface MutationUnminimizeCommentArgs {
  /** Parameters for UnminimizeComment */
  input: UnminimizeCommentInput
}
export interface MutationUnpinIssueArgs {
  /** Parameters for UnpinIssue */
  input: UnpinIssueInput
}
export interface MutationUnresolveReviewThreadArgs {
  /** Parameters for UnresolveReviewThread */
  input: UnresolveReviewThreadInput
}
export interface MutationUpdateBranchProtectionRuleArgs {
  /** Parameters for UpdateBranchProtectionRule */
  input: UpdateBranchProtectionRuleInput
}
export interface MutationUpdateCheckRunArgs {
  /** Parameters for UpdateCheckRun */
  input: UpdateCheckRunInput
}
export interface MutationUpdateCheckSuitePreferencesArgs {
  /** Parameters for UpdateCheckSuitePreferences */
  input: UpdateCheckSuitePreferencesInput
}
export interface MutationUpdateDiscussionArgs {
  /** Parameters for UpdateDiscussion */
  input: UpdateDiscussionInput
}
export interface MutationUpdateDiscussionCommentArgs {
  /** Parameters for UpdateDiscussionComment */
  input: UpdateDiscussionCommentInput
}
export interface MutationUpdateEnterpriseAdministratorRoleArgs {
  /** Parameters for UpdateEnterpriseAdministratorRole */
  input: UpdateEnterpriseAdministratorRoleInput
}
export interface MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs {
  /** Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
  input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
}
export interface MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs {
  /** Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting */
  input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput
}
export interface MutationUpdateEnterpriseDeployKeySettingArgs {
  /** Parameters for UpdateEnterpriseDeployKeySetting */
  input: UpdateEnterpriseDeployKeySettingInput
}
export interface MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
  input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
}
export interface MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting */
  input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
}
export interface MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting */
  input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput
}
export interface MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
  input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
}
export interface MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
  input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
}
export interface MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting */
  input: UpdateEnterpriseMembersCanMakePurchasesSettingInput
}
export interface MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
  input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
}
export interface MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs {
  /** Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
  input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
}
export interface MutationUpdateEnterpriseOrganizationProjectsSettingArgs {
  /** Parameters for UpdateEnterpriseOrganizationProjectsSetting */
  input: UpdateEnterpriseOrganizationProjectsSettingInput
}
export interface MutationUpdateEnterpriseOwnerOrganizationRoleArgs {
  /** Parameters for UpdateEnterpriseOwnerOrganizationRole */
  input: UpdateEnterpriseOwnerOrganizationRoleInput
}
export interface MutationUpdateEnterpriseProfileArgs {
  /** Parameters for UpdateEnterpriseProfile */
  input: UpdateEnterpriseProfileInput
}
export interface MutationUpdateEnterpriseRepositoryProjectsSettingArgs {
  /** Parameters for UpdateEnterpriseRepositoryProjectsSetting */
  input: UpdateEnterpriseRepositoryProjectsSettingInput
}
export interface MutationUpdateEnterpriseTeamDiscussionsSettingArgs {
  /** Parameters for UpdateEnterpriseTeamDiscussionsSetting */
  input: UpdateEnterpriseTeamDiscussionsSettingInput
}
export interface MutationUpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingArgs {
  /** Parameters for UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting */
  input: UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingInput
}
export interface MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs {
  /** Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
  input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
}
export interface MutationUpdateEnvironmentArgs {
  /** Parameters for UpdateEnvironment */
  input: UpdateEnvironmentInput
}
export interface MutationUpdateIpAllowListEnabledSettingArgs {
  /** Parameters for UpdateIpAllowListEnabledSetting */
  input: UpdateIpAllowListEnabledSettingInput
}
export interface MutationUpdateIpAllowListEntryArgs {
  /** Parameters for UpdateIpAllowListEntry */
  input: UpdateIpAllowListEntryInput
}
export interface MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs {
  /** Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting */
  input: UpdateIpAllowListForInstalledAppsEnabledSettingInput
}
export interface MutationUpdateIssueArgs {
  /** Parameters for UpdateIssue */
  input: UpdateIssueInput
}
export interface MutationUpdateIssueCommentArgs {
  /** Parameters for UpdateIssueComment */
  input: UpdateIssueCommentInput
}
export interface MutationUpdateLabelArgs {
  /** Parameters for UpdateLabel */
  input: UpdateLabelInput
}
export interface MutationUpdateNotificationRestrictionSettingArgs {
  /** Parameters for UpdateNotificationRestrictionSetting */
  input: UpdateNotificationRestrictionSettingInput
}
export interface MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs {
  /** Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting */
  input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput
}
export interface MutationUpdateOrganizationWebCommitSignoffSettingArgs {
  /** Parameters for UpdateOrganizationWebCommitSignoffSetting */
  input: UpdateOrganizationWebCommitSignoffSettingInput
}
export interface MutationUpdatePatreonSponsorabilityArgs {
  /** Parameters for UpdatePatreonSponsorability */
  input: UpdatePatreonSponsorabilityInput
}
export interface MutationUpdateProjectArgs {
  /** Parameters for UpdateProject */
  input: UpdateProjectInput
}
export interface MutationUpdateProjectCardArgs {
  /** Parameters for UpdateProjectCard */
  input: UpdateProjectCardInput
}
export interface MutationUpdateProjectColumnArgs {
  /** Parameters for UpdateProjectColumn */
  input: UpdateProjectColumnInput
}
export interface MutationUpdateProjectV2Args {
  /** Parameters for UpdateProjectV2 */
  input: UpdateProjectV2Input
}
export interface MutationUpdateProjectV2CollaboratorsArgs {
  /** Parameters for UpdateProjectV2Collaborators */
  input: UpdateProjectV2CollaboratorsInput
}
export interface MutationUpdateProjectV2DraftIssueArgs {
  /** Parameters for UpdateProjectV2DraftIssue */
  input: UpdateProjectV2DraftIssueInput
}
export interface MutationUpdateProjectV2FieldArgs {
  /** Parameters for UpdateProjectV2Field */
  input: UpdateProjectV2FieldInput
}
export interface MutationUpdateProjectV2ItemFieldValueArgs {
  /** Parameters for UpdateProjectV2ItemFieldValue */
  input: UpdateProjectV2ItemFieldValueInput
}
export interface MutationUpdateProjectV2ItemPositionArgs {
  /** Parameters for UpdateProjectV2ItemPosition */
  input: UpdateProjectV2ItemPositionInput
}
export interface MutationUpdateProjectV2StatusUpdateArgs {
  /** Parameters for UpdateProjectV2StatusUpdate */
  input: UpdateProjectV2StatusUpdateInput
}
export interface MutationUpdatePullRequestArgs {
  /** Parameters for UpdatePullRequest */
  input: UpdatePullRequestInput
}
export interface MutationUpdatePullRequestBranchArgs {
  /** Parameters for UpdatePullRequestBranch */
  input: UpdatePullRequestBranchInput
}
export interface MutationUpdatePullRequestReviewArgs {
  /** Parameters for UpdatePullRequestReview */
  input: UpdatePullRequestReviewInput
}
export interface MutationUpdatePullRequestReviewCommentArgs {
  /** Parameters for UpdatePullRequestReviewComment */
  input: UpdatePullRequestReviewCommentInput
}
export interface MutationUpdateRefArgs {
  /** Parameters for UpdateRef */
  input: UpdateRefInput
}
export interface MutationUpdateRefsArgs {
  /** Parameters for UpdateRefs */
  input: UpdateRefsInput
}
export interface MutationUpdateRepositoryArgs {
  /** Parameters for UpdateRepository */
  input: UpdateRepositoryInput
}
export interface MutationUpdateRepositoryRulesetArgs {
  /** Parameters for UpdateRepositoryRuleset */
  input: UpdateRepositoryRulesetInput
}
export interface MutationUpdateRepositoryWebCommitSignoffSettingArgs {
  /** Parameters for UpdateRepositoryWebCommitSignoffSetting */
  input: UpdateRepositoryWebCommitSignoffSettingInput
}
export interface MutationUpdateSponsorshipPreferencesArgs {
  /** Parameters for UpdateSponsorshipPreferences */
  input: UpdateSponsorshipPreferencesInput
}
export interface MutationUpdateSubscriptionArgs {
  /** Parameters for UpdateSubscription */
  input: UpdateSubscriptionInput
}
export interface MutationUpdateTeamDiscussionArgs {
  /** Parameters for UpdateTeamDiscussion */
  input: UpdateTeamDiscussionInput
}
export interface MutationUpdateTeamDiscussionCommentArgs {
  /** Parameters for UpdateTeamDiscussionComment */
  input: UpdateTeamDiscussionCommentInput
}
export interface MutationUpdateTeamReviewAssignmentArgs {
  /** Parameters for UpdateTeamReviewAssignment */
  input: UpdateTeamReviewAssignmentInput
}
export interface MutationUpdateTeamsRepositoryArgs {
  /** Parameters for UpdateTeamsRepository */
  input: UpdateTeamsRepositoryInput
}
export interface MutationUpdateTopicsArgs {
  /** Parameters for UpdateTopics */
  input: UpdateTopicsInput
}
export interface MutationUpdateUserListArgs {
  /** Parameters for UpdateUserList */
  input: UpdateUserListInput
}
export interface MutationUpdateUserListsForItemArgs {
  /** Parameters for UpdateUserListsForItem */
  input: UpdateUserListsForItemInput
}
export interface MutationVerifyVerifiableDomainArgs {
  /** Parameters for VerifyVerifiableDomain */
  input: VerifyVerifiableDomainInput
}
export interface OIDCProviderExternalIdentitiesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter to external identities with the users login */
  login?: string | null
  /** Filter to external identities with valid org membership only */
  membersOnly?: boolean | null
  /** Filter to external identities with the users userName/NameID attribute */
  userName?: string | null
}
export interface OrganizationAnyPinnableItemsArgs {
  /** Filter to only a particular kind of pinnable item. */
  type?: { $enum: PinnableItemType } | null
}
export interface OrganizationAuditLogArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the returned audit log entries.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: AuditLogOrder | null
  /** The query string to filter audit entries */
  query?: string | null
}
export interface OrganizationAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface OrganizationDomainsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Filter by if the domain is approved.
   *
   * Default value: `null` */
  isApproved?: boolean | null
  /** Filter by if the domain is verified.
   *
   * Default value: `null` */
  isVerified?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for verifiable domains returned.
   *
   * Default value: `{direction: ASC, field: DOMAIN}` */
  orderBy?: VerifiableDomainOrder | null
}
export interface OrganizationEnterpriseOwnersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for enterprise owners returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: OrgEnterpriseOwnerOrder | null
  /** The organization role to filter by. */
  organizationRole?: { $enum: RoleInOrganization } | null
  /** The search string to look for. */
  query?: string | null
}
export interface OrganizationIdentityProviderExternalIdentitiesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter to external identities with the users login */
  login?: string | null
  /** Filter to external identities with valid org membership only */
  membersOnly?: boolean | null
  /** Filter to external identities with the users userName/NameID attribute */
  userName?: string | null
}
export interface OrganizationIpAllowListEntriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for IP allow list entries returned.
   *
   * Default value: `{direction: ASC, field: ALLOW_LIST_VALUE}` */
  orderBy?: IpAllowListEntryOrder | null
}
export interface OrganizationIsSponsoredByArgs {
  /** The target account's login. */
  accountLogin: string
}
export interface OrganizationLifetimeReceivedSponsorshipValuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for results returned from the connection.
   *
   * Default value: `{direction: ASC, field: SPONSOR_LOGIN}` */
  orderBy?: SponsorAndLifetimeValueOrder | null
}
export interface OrganizationMannequinsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter mannequins by login. */
  login?: string | null
  /** Ordering options for mannequins returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: MannequinOrder | null
}
export interface OrganizationMemberStatusesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for user statuses returned from the connection.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: UserStatusOrder | null
}
export interface OrganizationMembersWithRoleArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface OrganizationPackagesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Find packages by their names. */
  names?: (string | null)[] | null
  /** Ordering of the returned packages.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: PackageOrder | null
  /** Filter registry package by type. */
  packageType?: { $enum: PackageType } | null
  /** Find packages in a repository by ID. */
  repositoryId?: ID | null
}
export interface OrganizationPendingMembersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface OrganizationPinnableItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinnable items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface OrganizationPinnedItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinned items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface OrganizationProjectArgs {
  /** The project number to find. */
  number: Int
}
export interface OrganizationProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for projects returned from the connection */
  orderBy?: ProjectOrder | null
  /** Query to search projects by, currently only searching by name. */
  search?: string | null
  /** A list of states to filter the projects by. */
  states?: { $enum: ProjectState }[] | null
}
export interface OrganizationProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for under the the owner. */
  query?: string | null
}
export interface OrganizationProjectV2Args {
  /** The project number. */
  number: Int
}
export interface OrganizationRecentProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface OrganizationRepositoriesArgs {
  /** Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they are archived and not maintained */
  isArchived?: boolean | null
  /** If non-null, filters repositories according to whether they are forks of another repository */
  isFork?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface OrganizationRepositoryArgs {
  /** Follow repository renames. If disabled, a repository referenced by its old name will return an error.
   *
   * Default value: `true` */
  followRenames?: boolean | null
  /** Name of Repository to find. */
  name: string
}
export interface OrganizationRepositoryDiscussionCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter discussion comments to only those that were marked as the answer
   *
   * Default value: `false` */
  onlyAnswers?: boolean | null
  /** Filter discussion comments to only those in a specific repository. */
  repositoryId?: ID | null
}
export interface OrganizationRepositoryDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   *
   * Default value: `null` */
  answered?: boolean | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for discussions returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: DiscussionOrder | null
  /** Filter discussions to only those in a specific repository. */
  repositoryId?: ID | null
  /** A list of states to filter the discussions by.
   *
   * Default value: `[]` */
  states?: { $enum: DiscussionState }[] | null
}
export interface OrganizationRepositoryMigrationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repository migrations returned.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: RepositoryMigrationOrder | null
  /** Filter repository migrations by repository name. */
  repositoryName?: string | null
  /** Filter repository migrations by state. */
  state?: { $enum: MigrationState } | null
}
export interface OrganizationRulesetArgs {
  /** The ID of the ruleset to be returned. */
  databaseId: Int
  /** Include rulesets configured at higher levels that apply to this organization.
   *
   * Default value: `true` */
  includeParents?: boolean | null
}
export interface OrganizationRulesetsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Return rulesets configured at higher levels that apply to this organization
   *
   * Default value: `true` */
  includeParents?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Return rulesets that apply to the specified target
   *
   * Default value: `null` */
  targets?: { $enum: RepositoryRulesetTarget }[] | null
}
export interface OrganizationsHovercardContextRelevantOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the User's organizations.
   *
   * Default value: `null` */
  orderBy?: OrganizationOrder | null
}
export interface OrganizationSponsoringArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the users and organizations returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
}
export interface OrganizationSponsorsActivitiesArgs {
  /** Filter activities to only the specified actions.
   *
   * Default value: `[]` */
  actions?: { $enum: SponsorsActivityAction }[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether to include those events where this sponsorable acted as the sponsor.
   * Defaults to only including events where this sponsorable was the recipient
   * of a sponsorship.
   *
   * Default value: `false` */
  includeAsSponsor?: boolean | null
  /** Whether or not to include private activities in the result set. Defaults to including public and private activities.
   *
   * Default value: `true` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for activity returned from the connection.
   *
   * Default value: `{direction: DESC, field: TIMESTAMP}` */
  orderBy?: SponsorsActivityOrder | null
  /** Filter activities returned to only those that occurred in the most recent
   * specified time period. Set to ALL to avoid filtering by when the activity
   * occurred. Will be ignored if `since` or `until` is given.
   *
   * Default value: `MONTH` */
  period?: { $enum: SponsorsActivityPeriod } | null
  /** Filter activities to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter activities to those that occurred before this time. */
  until?: DateTime | null
}
export interface OrganizationSponsorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsors returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
  /** If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see. */
  tierId?: ID | null
}
export interface OrganizationSponsorshipForViewerAsSponsorableArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface OrganizationSponsorshipForViewerAsSponsorArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the viewer's sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface OrganizationSponsorshipNewslettersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorship updates returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: SponsorshipNewsletterOrder | null
}
export interface OrganizationSponsorshipsAsMaintainerArgs {
  /** Whether to include only sponsorships that are active right now, versus all
   * sponsorships this maintainer has ever received.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether or not to include private sponsorships in the result set
   *
   * Default value: `false` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface OrganizationSponsorshipsAsSponsorArgs {
  /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter sponsorships returned to those for the specified maintainers. That
   * is, the recipient of the sponsorship is a user or organization with one of
   * the given logins. */
  maintainerLogins?: string[] | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface OrganizationTeamArgs {
  /** The name or slug of the team to find. */
  slug: string
}
export interface OrganizationTeamsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
  ldapMapped?: boolean | null
  /** If non-null, filters teams according to notification setting */
  notificationSetting?: { $enum: TeamNotificationSetting } | null
  /** Ordering options for teams returned from the connection */
  orderBy?: TeamOrder | null
  /** If non-null, filters teams according to privacy */
  privacy?: { $enum: TeamPrivacy } | null
  /** If non-null, filters teams with query on team name and team slug */
  query?: string | null
  /** If non-null, filters teams according to whether the viewer is an admin or member on team */
  role?: { $enum: TeamRole } | null
  /** If true, restrict to only root teams
   *
   * Default value: `false` */
  rootTeamsOnly?: boolean | null
  /** User logins to filter by */
  userLogins?: string[] | null
}
export interface OrganizationTeamsHovercardContextRelevantTeamsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface OrganizationTotalSponsorshipAmountAsSponsorInCentsArgs {
  /** Filter payments to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter payments to those made to the users or organizations with the specified usernames.
   *
   * Default value: `[]` */
  sponsorableLogins?: string[] | null
  /** Filter payments to those that occurred before this time. */
  until?: DateTime | null
}
export interface PackageOwnerPackagesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Find packages by their names. */
  names?: (string | null)[] | null
  /** Ordering of the returned packages.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: PackageOrder | null
  /** Filter registry package by type. */
  packageType?: { $enum: PackageType } | null
  /** Find packages in a repository by ID. */
  repositoryId?: ID | null
}
export interface PackageVersionArgs {
  /** The package version. */
  version: string
}
export interface PackageVersionFilesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering of the returned package files.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: PackageFileOrder | null
}
export interface PackageVersionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering of the returned packages.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: PackageVersionOrder | null
}
export interface ProfileItemShowcaseItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProfileOwnerAnyPinnableItemsArgs {
  /** Filter to only a particular kind of pinnable item. */
  type?: { $enum: PinnableItemType } | null
}
export interface ProfileOwnerPinnableItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinnable items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface ProfileOwnerPinnedItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinned items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface ProjectColumnCardsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** A list of archived states to filter the cards by
   *
   * Default value: `[ARCHIVED, NOT_ARCHIVED]` */
  archivedStates?: ({ $enum: ProjectCardArchivedState } | null)[] | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectColumnsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectOwnerProjectArgs {
  /** The project number to find. */
  number: Int
}
export interface ProjectOwnerProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for projects returned from the connection */
  orderBy?: ProjectOrder | null
  /** Query to search projects by, currently only searching by name. */
  search?: string | null
  /** A list of states to filter the projects by. */
  states?: { $enum: ProjectState }[] | null
}
export interface ProjectPendingCardsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** A list of archived states to filter the cards by
   *
   * Default value: `[ARCHIVED, NOT_ARCHIVED]` */
  archivedStates?: ({ $enum: ProjectCardArchivedState } | null)[] | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2FieldArgs {
  /** The name of the field */
  name: string
}
export interface ProjectV2FieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for project v2 fields returned from the connection
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ItemFieldLabelValueLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2ItemFieldPullRequestValuePullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: PullRequestOrder | null
}
export interface ProjectV2ItemFieldReviewerValueReviewersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2ItemFieldUserValueUsersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2ItemFieldValueByNameArgs {
  /** The name of the field to return the field value of */
  name: string
}
export interface ProjectV2ItemFieldValuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for project v2 item field values returned from the connection
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2ItemFieldValueOrder | null
}
export interface ProjectV2ItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for project v2 items returned from the connection
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2ItemOrder | null
}
export interface ProjectV2OwnerProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for under the the owner. */
  query?: string | null
}
export interface ProjectV2OwnerProjectV2Args {
  /** The project number. */
  number: Int
}
export interface ProjectV2RecentRecentProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2RepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: RepositoryOrder | null
}
export interface ProjectV2SingleSelectFieldOptionsArgs {
  /** Filter returned options to only those matching these names, case insensitive. */
  names?: string[] | null
}
export interface ProjectV2StatusUpdatesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: ProjectV2StatusOrder | null
}
export interface ProjectV2TeamsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for teams returned from this connection.
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: TeamOrder | null
}
export interface ProjectV2ViewArgs {
  /** The number of a view belonging to the project */
  number: Int
}
export interface ProjectV2ViewFieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ViewGroupByArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ViewGroupByFieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ViewsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for project v2 views returned from the connection
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2ViewOrder | null
}
export interface ProjectV2ViewSortByArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2ViewSortByFieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ProjectV2ViewVerticalGroupByArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ViewVerticalGroupByFieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2ViewVisibleFieldsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the project v2 fields returned from the connection.
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: ProjectV2FieldOrder | null
}
export interface ProjectV2WorkflowArgs {
  /** The number of a workflow belonging to the project */
  number: Int
}
export interface ProjectV2WorkflowsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for project v2 workflows returned from the connection
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: ProjectV2WorkflowOrder | null
}
export interface PullRequestAssigneesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestClosingIssuesReferencesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issues returned from the connection */
  orderBy?: IssueOrder | null
  /** Return only manually linked Issues
   *
   * Default value: `false` */
  userLinkedOnly?: boolean | null
}
export interface PullRequestCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issue comments returned from the connection. */
  orderBy?: IssueCommentOrder | null
}
export interface PullRequestCommitCommentThreadCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestCommitsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestContributionsByRepositoryContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface PullRequestFilesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestHovercardArgs {
  /** Whether or not to include notification contexts
   *
   * Default value: `true` */
  includeNotificationContexts?: boolean | null
}
export interface PullRequestLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
}
export interface PullRequestLatestOpinionatedReviewsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Only return reviews from user who have write access to the repository
   *
   * Default value: `false` */
  writersOnly?: boolean | null
}
export interface PullRequestLatestReviewsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestParticipantsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestProjectCardsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** A list of archived states to filter the cards by
   *
   * Default value: `[ARCHIVED, NOT_ARCHIVED]` */
  archivedStates?: ({ $enum: ProjectCardArchivedState } | null)[] | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestProjectItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Include archived items.
   *
   * Default value: `true` */
  includeArchived?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for under the the owner. */
  query?: string | null
}
export interface PullRequestProjectV2Args {
  /** The project number. */
  number: Int
}
export interface PullRequestReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface PullRequestReviewCommentReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface PullRequestReviewCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestReviewCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestReviewContributionsByRepositoryContributionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for contributions returned from the connection.
   *
   * Default value: `{direction: DESC}` */
  orderBy?: ContributionOrder | null
}
export interface PullRequestReviewOnBehalfOfArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestReviewReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface PullRequestReviewRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestReviewsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Filter by author of the review. */
  author?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** A list of states to filter the reviews. */
  states?: { $enum: PullRequestReviewState }[] | null
}
export interface PullRequestReviewThreadCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Skips the first _n_ elements in the list. */
  skip?: Int | null
}
export interface PullRequestReviewThreadsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestReviewUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestThreadCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Skips the first _n_ elements in the list. */
  skip?: Int | null
}
export interface PullRequestTimelineArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows filtering timeline events by a `since` timestamp. */
  since?: DateTime | null
}
export interface PullRequestTimelineItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Filter timeline items by type. */
  itemTypes?: { $enum: PullRequestTimelineItemsItemType }[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter timeline items by a `since` timestamp. */
  since?: DateTime | null
  /** Skips the first _n_ elements in the list. */
  skip?: Int | null
}
export interface PullRequestUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface PullRequestViewerMergeBodyTextArgs {
  /** The merge method for the message. */
  mergeType?: { $enum: PullRequestMergeMethod } | null
}
export interface PullRequestViewerMergeHeadlineTextArgs {
  /** The merge method for the message. */
  mergeType?: { $enum: PullRequestMergeMethod } | null
}
export interface QueryCodeOfConductArgs {
  /** The code of conduct's key */
  key: string
}
export interface QueryEnterpriseAdministratorInvitationArgs {
  /** The slug of the enterprise the user was invited to join. */
  enterpriseSlug: string
  /** The role for the enterprise member invitation. */
  role: { $enum: EnterpriseAdministratorRole }
  /** The login of the user invited to join the enterprise. */
  userLogin: string
}
export interface QueryEnterpriseAdministratorInvitationByTokenArgs {
  /** The invitation token sent with the invitation email. */
  invitationToken: string
}
export interface QueryEnterpriseArgs {
  /** The enterprise invitation token. */
  invitationToken?: string | null
  /** The enterprise URL slug. */
  slug: string
}
export interface QueryEnterpriseMemberInvitationArgs {
  /** The slug of the enterprise the user was invited to join. */
  enterpriseSlug: string
  /** The login of the user invited to join the enterprise. */
  userLogin: string
}
export interface QueryEnterpriseMemberInvitationByTokenArgs {
  /** The invitation token sent with the invitation email. */
  invitationToken: string
}
export interface QueryLicenseArgs {
  /** The license's downcased SPDX ID */
  key: string
}
export interface QueryMarketplaceCategoriesArgs {
  /** Exclude categories with no listings. */
  excludeEmpty?: boolean | null
  /** Returns top level categories only, excluding any subcategories. */
  excludeSubcategories?: boolean | null
  /** Return only the specified categories. */
  includeCategories?: string[] | null
}
export interface QueryMarketplaceCategoryArgs {
  /** The URL slug of the category. */
  slug: string
  /** Also check topic aliases for the category slug */
  useTopicAliases?: boolean | null
}
export interface QueryMarketplaceListingArgs {
  /** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
  slug: string
}
export interface QueryMarketplaceListingsArgs {
  /** Select listings that can be administered by the specified user. */
  adminId?: ID | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Select listings visible to the viewer even if they are not approved. If omitted or
   * false, only approved listings will be returned. */
  allStates?: boolean | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Select only listings with the given category. */
  categorySlug?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Select listings for products owned by the specified organization. */
  organizationId?: ID | null
  /** Select only listings where the primary category matches the given category slug.
   *
   * Default value: `false` */
  primaryCategoryOnly?: boolean | null
  /** Select the listings with these slugs, if they are visible to the viewer. */
  slugs?: (string | null)[] | null
  /** Also check topic aliases for the category slug */
  useTopicAliases?: boolean | null
  /** Select listings to which user has admin access. If omitted, listings visible to the
   * viewer are returned. */
  viewerCanAdmin?: boolean | null
  /** Select only listings that offer a free trial.
   *
   * Default value: `false` */
  withFreeTrialsOnly?: boolean | null
}
export interface QueryNodeArgs {
  /** ID of the object. */
  id: ID
}
export interface QueryNodesArgs {
  /** The list of node IDs. */
  ids: ID[]
}
export interface QueryOrganizationArgs {
  /** The organization's login. */
  login: string
}
export interface QueryRateLimitArgs {
  /** If true, calculate the cost for the query without evaluating it
   *
   * Default value: `false` */
  dryRun?: boolean | null
}
export interface QueryRepositoryArgs {
  /** Follow repository renames. If disabled, a repository referenced by its old name will return an error.
   *
   * Default value: `true` */
  followRenames?: boolean | null
  /** The name of the repository */
  name: string
  /** The login field of a user or organization */
  owner: string
}
export interface QueryRepositoryOwnerArgs {
  /** The username to lookup the owner by. */
  login: string
}
export interface QueryResourceArgs {
  /** The URL. */
  url: URI
}
export interface QuerySearchArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The search string to look for. GitHub search syntax is supported. For more
   * information, see "[Searching on
   * GitHub](https://docs.github.com/search-github/searching-on-github),"
   * "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
   * and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)." */
  query: string
  /** The types of search items to search within. */
  type: { $enum: SearchType }
}
export interface QuerySecurityAdvisoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** A list of classifications to filter advisories by. */
  classifications?: { $enum: SecurityAdvisoryClassification }[] | null
  /** The EPSS percentage to filter advisories by. */
  epssPercentage?: Float | null
  /** The EPSS percentile to filter advisories by. */
  epssPercentile?: Float | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Filter advisories by identifier, e.g. GHSA or CVE. */
  identifier?: SecurityAdvisoryIdentifierFilter | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the returned topics.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: SecurityAdvisoryOrder | null
  /** Filter advisories to those published since a time in the past. */
  publishedSince?: DateTime | null
  /** Filter advisories to those updated since a time in the past. */
  updatedSince?: DateTime | null
}
export interface QuerySecurityAdvisoryArgs {
  /** GitHub Security Advisory ID. */
  ghsaId: string
}
export interface QuerySecurityVulnerabilitiesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** A list of advisory classifications to filter vulnerabilities by. */
  classifications?: { $enum: SecurityAdvisoryClassification }[] | null
  /** An ecosystem to filter vulnerabilities by. */
  ecosystem?: { $enum: SecurityAdvisoryEcosystem } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the returned topics.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: SecurityVulnerabilityOrder | null
  /** A package name to filter vulnerabilities by. */
  package?: string | null
  /** A list of severities to filter vulnerabilities by. */
  severities?: { $enum: SecurityAdvisorySeverity }[] | null
}
export interface QuerySponsorablesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Optional filter for which dependencies should be checked for sponsorable
   * owners. Only sponsorable owners of dependencies in this ecosystem will be
   * included. Used when onlyDependencies = true.
   *
   * **Upcoming Change on 2022-07-01 UTC**
   * **Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
   * **Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem. */
  dependencyEcosystem?: { $enum: SecurityAdvisoryEcosystem } | null
  /** Optional filter for which dependencies should be checked for sponsorable
   * owners. Only sponsorable owners of dependencies in this ecosystem will be
   * included. Used when onlyDependencies = true. */
  ecosystem?: { $enum: DependencyGraphEcosystem } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Whether only sponsorables who own the viewer's dependencies will be
   * returned. Must be authenticated to use. Can check an organization instead
   * for their dependencies owned by sponsorables by passing
   * orgLoginForDependencies.
   *
   * Default value: `false` */
  onlyDependencies?: boolean | null
  /** Ordering options for users and organizations returned from the connection.
   *
   * Default value: `{direction: ASC, field: LOGIN}` */
  orderBy?: SponsorableOrder | null
  /** Optional organization username for whose dependencies should be checked.
   * Used when onlyDependencies = true. Omit to check your own dependencies. If
   * you are not an administrator of the organization, only dependencies from its
   * public repositories will be considered. */
  orgLoginForDependencies?: string | null
}
export interface QueryTopicArgs {
  /** The topic's name. */
  name: string
}
export interface QueryUserArgs {
  /** The user's login. */
  login: string
}
export interface ReactableReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface ReactionGroupReactorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ReactionGroupUsersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RefAssociatedPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface RefCompareArgs {
  /** The head ref to compare against. */
  headRef: string
}
export interface RefRulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repository rules.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: RepositoryRuleOrder | null
}
export interface ReleaseMentionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface ReleaseReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface ReleaseReleaseAssetsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** A name to filter the assets by. */
  name?: string | null
}
export interface ReleaseShortDescriptionHTMLArgs {
  /** How many characters to return.
   *
   * Default value: `200` */
  limit?: Int | null
}
export interface RepositoryAssignableUsersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filters users with query on user name and login. */
  query?: string | null
}
export interface RepositoryBranchProtectionRulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryCodeownersArgs {
  /** The ref name used to return the associated `CODEOWNERS` file. */
  refName?: string | null
}
export interface RepositoryCollaboratorsArgs {
  /** Collaborators affiliation level with a repository. */
  affiliation?: { $enum: CollaboratorAffiliation } | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The login of one specific collaborator. */
  login?: string | null
  /** Filters users with query on user name and login */
  query?: string | null
}
export interface RepositoryCommitCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryDependencyGraphManifestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Cursor to paginate dependencies */
  dependenciesAfter?: string | null
  /** Number of dependencies to fetch */
  dependenciesFirst?: Int | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Flag to scope to only manifests with dependencies */
  withDependencies?: boolean | null
}
export interface RepositoryDeployKeysArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryDeploymentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Environments to list deployments for */
  environments?: string[] | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for deployments returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: DeploymentOrder | null
}
export interface RepositoryDiscussionArgs {
  /** The number for the discussion to be returned. */
  number: Int
}
export interface RepositoryDiscussionAuthorRepositoryDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   *
   * Default value: `null` */
  answered?: boolean | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for discussions returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: DiscussionOrder | null
  /** Filter discussions to only those in a specific repository. */
  repositoryId?: ID | null
  /** A list of states to filter the discussions by.
   *
   * Default value: `[]` */
  states?: { $enum: DiscussionState }[] | null
}
export interface RepositoryDiscussionCategoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filter by categories that are assignable by the viewer.
   *
   * Default value: `false` */
  filterByAssignable?: boolean | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryDiscussionCategoryArgs {
  /** The slug of the discussion category to be returned. */
  slug: string
}
export interface RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter discussion comments to only those that were marked as the answer
   *
   * Default value: `false` */
  onlyAnswers?: boolean | null
  /** Filter discussion comments to only those in a specific repository. */
  repositoryId?: ID | null
}
export interface RepositoryDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Only show answered or unanswered discussions
   *
   * Default value: `null` */
  answered?: boolean | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Only include discussions that belong to the category with this ID.
   *
   * Default value: `null` */
  categoryId?: ID | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for discussions returned from the connection.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: DiscussionOrder | null
  /** A list of states to filter the discussions by.
   *
   * Default value: `[]` */
  states?: { $enum: DiscussionState }[] | null
}
export interface RepositoryEnvironmentArgs {
  /** The name of the environment to be returned. */
  name: string
}
export interface RepositoryEnvironmentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The names of the environments to be returned.
   *
   * Default value: `[]` */
  names?: string[] | null
  /** Ordering options for the environments
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: Environments | null
  /** Filter to control pinned environments return
   *
   * Default value: `ALL` */
  pinnedEnvironmentFilter?: { $enum: EnvironmentPinnedFilterField } | null
}
export interface RepositoryForksArgs {
  /** Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface RepositoryInfoShortDescriptionHTMLArgs {
  /** How many characters to return.
   *
   * Default value: `200` */
  limit?: Int | null
}
export interface RepositoryIssueArgs {
  /** The number for the issue to be returned. */
  number: Int
}
export interface RepositoryIssueOrPullRequestArgs {
  /** The number for the issue to be returned. */
  number: Int
}
export interface RepositoryIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filtering options for issues returned from the connection. */
  filterBy?: IssueFilters | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issues returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the issues by. */
  states?: { $enum: IssueState }[] | null
}
export interface RepositoryLabelArgs {
  /** Label name */
  name: string
}
export interface RepositoryLabelsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for labels returned from the connection.
   *
   * Default value: `{direction: ASC, field: CREATED_AT}` */
  orderBy?: LabelOrder | null
  /** If provided, searches labels by name and description. */
  query?: string | null
}
export interface RepositoryLanguagesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: LanguageOrder | null
}
export interface RepositoryMentionableUsersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filters users with query on user name and login */
  query?: string | null
}
export interface RepositoryMergeQueueArgs {
  /** The name of the branch to get the merge queue for. Case sensitive. */
  branch?: string | null
}
export interface RepositoryMilestoneArgs {
  /** The number for the milestone to be returned. */
  number: Int
}
export interface RepositoryMilestonesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for milestones. */
  orderBy?: MilestoneOrder | null
  /** Filters milestones with a query on the title */
  query?: string | null
  /** Filter by the state of the milestones. */
  states?: { $enum: MilestoneState }[] | null
}
export interface RepositoryObjectArgs {
  /** A Git revision expression suitable for rev-parse */
  expression?: string | null
  /** The Git object ID */
  oid?: GitObjectID | null
}
export interface RepositoryOwnerAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface RepositoryOwnerRepositoriesArgs {
  /** Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they are archived and not maintained */
  isArchived?: boolean | null
  /** If non-null, filters repositories according to whether they are forks of another repository */
  isFork?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface RepositoryOwnerRepositoryArgs {
  /** Follow repository renames. If disabled, a repository referenced by its old name will return an error.
   *
   * Default value: `true` */
  followRenames?: boolean | null
  /** Name of Repository to find. */
  name: string
}
export interface RepositoryPackagesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Find packages by their names. */
  names?: (string | null)[] | null
  /** Ordering of the returned packages.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: PackageOrder | null
  /** Filter registry package by type. */
  packageType?: { $enum: PackageType } | null
  /** Find packages in a repository by ID. */
  repositoryId?: ID | null
}
export interface RepositoryPinnedDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryPinnedEnvironmentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the environments
   *
   * Default value: `{direction: ASC, field: POSITION}` */
  orderBy?: PinnedEnvironmentOrder | null
}
export interface RepositoryPinnedIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryProjectArgs {
  /** The project number to find. */
  number: Int
}
export interface RepositoryProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for projects returned from the connection */
  orderBy?: ProjectOrder | null
  /** Query to search projects by, currently only searching by name. */
  search?: string | null
  /** A list of states to filter the projects by. */
  states?: { $enum: ProjectState }[] | null
}
export interface RepositoryProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for linked to the repo. */
  query?: string | null
}
export interface RepositoryProjectV2Args {
  /** The Project number. */
  number: Int
}
export interface RepositoryPullRequestArgs {
  /** The number for the pull request to be returned. */
  number: Int
}
export interface RepositoryPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface RepositoryRecentProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryRefArgs {
  /** The ref to retrieve. Fully qualified matches are checked in order
   * (`refs/heads/master`) before falling back onto checks for short name matches (`master`). */
  qualifiedName: string
}
export interface RepositoryRefsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** DEPRECATED: use orderBy. The ordering direction. */
  direction?: { $enum: OrderDirection } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for refs returned from the connection. */
  orderBy?: RefOrder | null
  /** Filters refs with query on name */
  query?: string | null
  /** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
  refPrefix: string
}
export interface RepositoryReleaseArgs {
  /** The name of the Tag the Release was created from */
  tagName: string
}
export interface RepositoryReleasesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: ReleaseOrder | null
}
export interface RepositoryRepositoryTopicsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryRulesetArgs {
  /** The ID of the ruleset to be returned. */
  databaseId: Int
  /** Include rulesets configured at higher levels that apply to this repository
   *
   * Default value: `true` */
  includeParents?: boolean | null
}
export interface RepositoryRulesetBypassActorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryRulesetRulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The type of rule. */
  type?: { $enum: RepositoryRuleType } | null
}
export interface RepositoryRulesetsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Return rulesets configured at higher levels that apply to this repository
   *
   * Default value: `true` */
  includeParents?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Return rulesets that apply to the specified target
   *
   * Default value: `null` */
  targets?: { $enum: RepositoryRulesetTarget }[] | null
}
export interface RepositoryShortDescriptionHTMLArgs {
  /** How many characters to return.
   *
   * Default value: `200` */
  limit?: Int | null
}
export interface RepositoryStargazersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: StarOrder | null
}
export interface RepositorySubmodulesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RepositoryVulnerabilityAlertArgs {
  /** The number for the vulnerability alert to be returned. */
  number: Int
}
export interface RepositoryVulnerabilityAlertsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filter by the scope of the alert's dependency */
  dependencyScopes?: { $enum: RepositoryVulnerabilityAlertDependencyScope }[] | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter by the state of the alert */
  states?: { $enum: RepositoryVulnerabilityAlertState }[] | null
}
export interface RepositoryWatchersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface RequirableByPullRequestIsRequiredArgs {
  /** The id of the pull request this is required for */
  pullRequestId?: ID | null
  /** The number of the pull request this is required for */
  pullRequestNumber?: Int | null
}
export interface RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface SecurityAdvisoryCwesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface SecurityAdvisoryVulnerabilitiesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** A list of advisory classifications to filter vulnerabilities by. */
  classifications?: { $enum: SecurityAdvisoryClassification }[] | null
  /** An ecosystem to filter vulnerabilities by. */
  ecosystem?: { $enum: SecurityAdvisoryEcosystem } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the returned topics.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: SecurityVulnerabilityOrder | null
  /** A package name to filter vulnerabilities by. */
  package?: string | null
  /** A list of severities to filter vulnerabilities by. */
  severities?: { $enum: SecurityAdvisorySeverity }[] | null
}
export interface SponsorableIsSponsoredByArgs {
  /** The target account's login. */
  accountLogin: string
}
export interface SponsorableLifetimeReceivedSponsorshipValuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for results returned from the connection.
   *
   * Default value: `{direction: ASC, field: SPONSOR_LOGIN}` */
  orderBy?: SponsorAndLifetimeValueOrder | null
}
export interface SponsorableSponsoringArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the users and organizations returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
}
export interface SponsorableSponsorsActivitiesArgs {
  /** Filter activities to only the specified actions.
   *
   * Default value: `[]` */
  actions?: { $enum: SponsorsActivityAction }[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether to include those events where this sponsorable acted as the sponsor.
   * Defaults to only including events where this sponsorable was the recipient
   * of a sponsorship.
   *
   * Default value: `false` */
  includeAsSponsor?: boolean | null
  /** Whether or not to include private activities in the result set. Defaults to including public and private activities.
   *
   * Default value: `true` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for activity returned from the connection.
   *
   * Default value: `{direction: DESC, field: TIMESTAMP}` */
  orderBy?: SponsorsActivityOrder | null
  /** Filter activities returned to only those that occurred in the most recent
   * specified time period. Set to ALL to avoid filtering by when the activity
   * occurred. Will be ignored if `since` or `until` is given.
   *
   * Default value: `MONTH` */
  period?: { $enum: SponsorsActivityPeriod } | null
  /** Filter activities to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter activities to those that occurred before this time. */
  until?: DateTime | null
}
export interface SponsorableSponsorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsors returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
  /** If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see. */
  tierId?: ID | null
}
export interface SponsorableSponsorshipForViewerAsSponsorableArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface SponsorableSponsorshipForViewerAsSponsorArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the viewer's sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface SponsorableSponsorshipNewslettersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorship updates returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: SponsorshipNewsletterOrder | null
}
export interface SponsorableSponsorshipsAsMaintainerArgs {
  /** Whether to include only sponsorships that are active right now, versus all
   * sponsorships this maintainer has ever received.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether or not to include private sponsorships in the result set
   *
   * Default value: `false` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface SponsorableSponsorshipsAsSponsorArgs {
  /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter sponsorships returned to those for the specified maintainers. That
   * is, the recipient of the sponsorship is a user or organization with one of
   * the given logins. */
  maintainerLogins?: string[] | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface SponsorableTotalSponsorshipAmountAsSponsorInCentsArgs {
  /** Filter payments to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter payments to those made to the users or organizations with the specified usernames.
   *
   * Default value: `[]` */
  sponsorableLogins?: string[] | null
  /** Filter payments to those that occurred before this time. */
  until?: DateTime | null
}
export interface SponsorsListingFeaturedItemsArgs {
  /** The types of featured items to return.
   *
   * Default value: `[REPOSITORY, USER]` */
  featureableTypes?: { $enum: SponsorsListingFeaturedItemFeatureableType }[] | null
}
export interface SponsorsListingTiersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether to include tiers that aren't published. Only admins of the Sponsors
   * listing can see draft tiers. Only admins of the Sponsors listing and viewers
   * who are currently sponsoring on a retired tier can see those retired tiers.
   * Defaults to including only published tiers, which are visible to anyone who
   * can see the GitHub Sponsors profile.
   *
   * Default value: `false` */
  includeUnpublished?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for Sponsors tiers returned from the connection.
   *
   * Default value: `{direction: ASC, field: MONTHLY_PRICE_IN_CENTS}` */
  orderBy?: SponsorsTierOrder | null
}
export interface SponsorsTierAdminInfoSponsorshipsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether or not to return private sponsorships using this tier. Defaults to
   * only returning public sponsorships on this tier.
   *
   * Default value: `false` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface StarrableStargazersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: StarOrder | null
}
export interface StatusCheckRollupContextsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface StatusCombinedContextsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface StatusContextArgs {
  /** The context name. */
  name: string
}
export interface StatusContextAvatarUrlArgs {
  /** The size of the resulting square image.
   *
   * Default value: `40` */
  size?: Int | null
}
export interface StatusContextIsRequiredArgs {
  /** The id of the pull request this is required for */
  pullRequestId?: ID | null
  /** The number of the pull request this is required for */
  pullRequestNumber?: Int | null
}
export interface TeamAncestorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface TeamAvatarUrlArgs {
  /** The size in pixels of the resulting square image.
   *
   * Default value: `400` */
  size?: Int | null
}
export interface TeamChildTeamsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether to list immediate child teams or all descendant child teams.
   *
   * Default value: `true` */
  immediateOnly?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: TeamOrder | null
  /** User logins to filter by */
  userLogins?: string[] | null
}
export interface TeamDiscussionArgs {
  /** The sequence number of the discussion to find. */
  number: Int
}
export interface TeamDiscussionCommentReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface TeamDiscussionCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** When provided, filters the connection such that results begin with the comment with this number. */
  fromComment?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: TeamDiscussionCommentOrder | null
}
export interface TeamDiscussionCommentUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface TeamDiscussionReactionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Allows filtering Reactions by emoji. */
  content?: { $enum: ReactionContent } | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Allows specifying the order in which reactions are returned. */
  orderBy?: ReactionOrder | null
}
export interface TeamDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If provided, filters discussions according to whether or not they are pinned. */
  isPinned?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: TeamDiscussionOrder | null
}
export interface TeamDiscussionUserContentEditsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface TeamInvitationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface TeamMembersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter by membership type
   *
   * Default value: `ALL` */
  membership?: { $enum: TeamMembershipType } | null
  /** Order for the connection. */
  orderBy?: TeamMemberOrder | null
  /** The search string to look for. */
  query?: string | null
  /** Filter by team member role */
  role?: { $enum: TeamMemberRole } | null
}
export interface TeamMemberStatusesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for user statuses returned from the connection.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: UserStatusOrder | null
}
export interface TeamProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filtering options for projects returned from this connection
   *
   * Default value: `{}` */
  filterBy?: ProjectV2Filters | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** The query to search projects by.
   *
   * Default value: `""` */
  query?: string | null
}
export interface TeamProjectV2Args {
  /** The Project number. */
  number: Int
}
export interface TeamRepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for the connection. */
  orderBy?: TeamRepositoryOrder | null
  /** The search string to look for. Repositories will be returned where the name contains your search string. */
  query?: string | null
}
export interface TopicRelatedTopicsArgs {
  /** How many topics to return.
   *
   * Default value: `3` */
  first?: Int | null
}
export interface TopicRepositoriesArgs {
  /** Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
   *
   * Default value: `false` */
  sponsorableOnly?: boolean | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface TopicStargazersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: StarOrder | null
}
export interface UpdateProjectV2CollaboratorsPayloadCollaboratorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UpdateProjectV2ItemPositionPayloadItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserAnyPinnableItemsArgs {
  /** Filter to only a particular kind of pinnable item. */
  type?: { $enum: PinnableItemType } | null
}
export interface UserAvatarUrlArgs {
  /** The size of the resulting square image. */
  size?: Int | null
}
export interface UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs {
  /** The login of the organization to check. */
  login: string
}
export interface UserCommitCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserContributionsCollectionArgs {
  /** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
  from?: DateTime | null
  /** The ID of the organization used to filter contributions. */
  organizationID?: ID | null
  /** Only contributions made before and up to (including) this time will be
   * counted. If omitted, defaults to the current time or one year from the
   * provided from argument. */
  to?: DateTime | null
}
export interface UserEnterprisesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter enterprises returned based on the user's membership type.
   *
   * Default value: `ALL` */
  membershipType?: { $enum: EnterpriseMembershipType } | null
  /** Ordering options for the User's enterprises.
   *
   * Default value: `{direction: ASC, field: NAME}` */
  orderBy?: EnterpriseOrder | null
}
export interface UserFollowersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserFollowingArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserGistArgs {
  /** The gist name to find. */
  name: string
}
export interface UserGistCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserGistsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for gists returned from the connection */
  orderBy?: GistOrder | null
  /** Filters Gists according to privacy. */
  privacy?: { $enum: GistPrivacy } | null
}
export interface UserHovercardArgs {
  /** The ID of the subject to get the hovercard in the context of */
  primarySubjectId?: ID | null
}
export interface UserIsSponsoredByArgs {
  /** The target account's login. */
  accountLogin: string
}
export interface UserIssueCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issue comments returned from the connection. */
  orderBy?: IssueCommentOrder | null
}
export interface UserIssuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Filtering options for issues returned from the connection. */
  filterBy?: IssueFilters | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for issues returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the issues by. */
  states?: { $enum: IssueState }[] | null
}
export interface UserLifetimeReceivedSponsorshipValuesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for results returned from the connection.
   *
   * Default value: `{direction: ASC, field: SPONSOR_LOGIN}` */
  orderBy?: SponsorAndLifetimeValueOrder | null
}
export interface UserListItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserListsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserOrganizationArgs {
  /** The login of the organization to find. */
  login: string
}
export interface UserOrganizationsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the User's organizations.
   *
   * Default value: `null` */
  orderBy?: OrganizationOrder | null
}
export interface UserOrganizationVerifiedDomainEmailsArgs {
  /** The login of the organization to match verified domains from. */
  login: string
}
export interface UserPackagesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Find packages by their names. */
  names?: (string | null)[] | null
  /** Ordering of the returned packages.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: PackageOrder | null
  /** Filter registry package by type. */
  packageType?: { $enum: PackageType } | null
  /** Find packages in a repository by ID. */
  repositoryId?: ID | null
}
export interface UserPinnableItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinnable items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface UserPinnedItemsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter the types of pinned items that are returned. */
  types?: { $enum: PinnableItemType }[] | null
}
export interface UserProjectArgs {
  /** The project number to find. */
  number: Int
}
export interface UserProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for projects returned from the connection */
  orderBy?: ProjectOrder | null
  /** Query to search projects by, currently only searching by name. */
  search?: string | null
  /** A list of states to filter the projects by. */
  states?: { $enum: ProjectState }[] | null
}
export interface UserProjectsV2Args {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter projects based on user role.
   *
   * Default value: `READ` */
  minPermissionLevel?: { $enum: ProjectV2PermissionLevel } | null
  /** How to order the returned projects.
   *
   * Default value: `{direction: DESC, field: NUMBER}` */
  orderBy?: ProjectV2Order | null
  /** A project to search for under the the owner. */
  query?: string | null
}
export interface UserProjectV2Args {
  /** The project number. */
  number: Int
}
export interface UserPublicKeysArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserPullRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** The base ref name to filter the pull requests by. */
  baseRefName?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** The head ref name to filter the pull requests by. */
  headRefName?: string | null
  /** A list of label names to filter the pull requests by. */
  labels?: string[] | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for pull requests returned from the connection. */
  orderBy?: IssueOrder | null
  /** A list of states to filter the pull requests by. */
  states?: { $enum: PullRequestState }[] | null
}
export interface UserRecentProjectsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserRepositoriesArgs {
  /** Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they are archived and not maintained */
  isArchived?: boolean | null
  /** If non-null, filters repositories according to whether they are forks of another repository */
  isFork?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface UserRepositoriesContributedToArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** If non-null, include only the specified types of contributions. The
   * GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY] */
  contributionTypes?: ({ $enum: RepositoryContributionType } | null)[] | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssues?: boolean | null
  /** If true, include user repositories */
  includeUserRepositories?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** If non-null, filters repositories according to privacy */
  privacy?: { $enum: RepositoryPrivacy } | null
}
export interface UserRepositoryArgs {
  /** Follow repository renames. If disabled, a repository referenced by its old name will return an error.
   *
   * Default value: `true` */
  followRenames?: boolean | null
  /** Name of Repository to find. */
  name: string
}
export interface UserRepositoryDiscussionCommentsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter discussion comments to only those that were marked as the answer
   *
   * Default value: `false` */
  onlyAnswers?: boolean | null
  /** Filter discussion comments to only those in a specific repository. */
  repositoryId?: ID | null
}
export interface UserRepositoryDiscussionsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   *
   * Default value: `null` */
  answered?: boolean | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for discussions returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: DiscussionOrder | null
  /** Filter discussions to only those in a specific repository. */
  repositoryId?: ID | null
  /** A list of states to filter the discussions by.
   *
   * Default value: `[]` */
  states?: { $enum: DiscussionState }[] | null
}
export interface UserSavedRepliesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** The field to order saved replies by.
   *
   * Default value: `{direction: DESC, field: UPDATED_AT}` */
  orderBy?: SavedReplyOrder | null
}
export interface UserSocialAccountsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface UserSponsoringArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the users and organizations returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
}
export interface UserSponsorsActivitiesArgs {
  /** Filter activities to only the specified actions.
   *
   * Default value: `[]` */
  actions?: { $enum: SponsorsActivityAction }[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether to include those events where this sponsorable acted as the sponsor.
   * Defaults to only including events where this sponsorable was the recipient
   * of a sponsorship.
   *
   * Default value: `false` */
  includeAsSponsor?: boolean | null
  /** Whether or not to include private activities in the result set. Defaults to including public and private activities.
   *
   * Default value: `true` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for activity returned from the connection.
   *
   * Default value: `{direction: DESC, field: TIMESTAMP}` */
  orderBy?: SponsorsActivityOrder | null
  /** Filter activities returned to only those that occurred in the most recent
   * specified time period. Set to ALL to avoid filtering by when the activity
   * occurred. Will be ignored if `since` or `until` is given.
   *
   * Default value: `MONTH` */
  period?: { $enum: SponsorsActivityPeriod } | null
  /** Filter activities to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter activities to those that occurred before this time. */
  until?: DateTime | null
}
export interface UserSponsorsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsors returned from the connection.
   *
   * Default value: `{direction: DESC, field: RELEVANCE}` */
  orderBy?: SponsorOrder | null
  /** If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see. */
  tierId?: ID | null
}
export interface UserSponsorshipForViewerAsSponsorableArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface UserSponsorshipForViewerAsSponsorArgs {
  /** Whether to return the sponsorship only if it's still active. Pass false to
   * get the viewer's sponsorship back even if it has been cancelled.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
}
export interface UserSponsorshipNewslettersArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorship updates returned from the connection.
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: SponsorshipNewsletterOrder | null
}
export interface UserSponsorshipsAsMaintainerArgs {
  /** Whether to include only sponsorships that are active right now, versus all
   * sponsorships this maintainer has ever received.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Whether or not to include private sponsorships in the result set
   *
   * Default value: `false` */
  includePrivate?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface UserSponsorshipsAsSponsorArgs {
  /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
   *
   * Default value: `true` */
  activeOnly?: boolean | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Filter sponsorships returned to those for the specified maintainers. That
   * is, the recipient of the sponsorship is a user or organization with one of
   * the given logins. */
  maintainerLogins?: string[] | null
  /** Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer. */
  orderBy?: SponsorshipOrder | null
}
export interface UserStarredRepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Order for connection */
  orderBy?: StarOrder | null
  /** Filters starred repositories to only return repositories owned by the viewer. */
  ownedByViewer?: boolean | null
}
export interface UserTopRepositoriesArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy: RepositoryOrder
  /** How far back in time to fetch contributed repositories */
  since?: DateTime | null
}
export interface UserTotalSponsorshipAmountAsSponsorInCentsArgs {
  /** Filter payments to those that occurred on or after this time. */
  since?: DateTime | null
  /** Filter payments to those made to the users or organizations with the specified usernames.
   *
   * Default value: `[]` */
  sponsorableLogins?: string[] | null
  /** Filter payments to those that occurred before this time. */
  until?: DateTime | null
}
export interface UserWatchingArgs {
  /** Affiliation options for repositories returned from the connection. If none
   * specified, the results will include repositories for which the current
   * viewer is an owner or collaborator, or member. */
  affiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** If non-null, filters repositories according to whether they have issues enabled */
  hasIssuesEnabled?: boolean | null
  /** If non-null, filters repositories according to whether they have been locked */
  isLocked?: boolean | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for repositories returned from the connection */
  orderBy?: RepositoryOrder | null
  /** Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   *
   * Default value: `[OWNER, COLLABORATOR]` */
  ownerAffiliations?: ({ $enum: RepositoryAffiliation } | null)[] | null
  /** If non-null, filters repositories according to privacy. Internal
   * repositories are considered private; consider using the visibility argument
   * if only internal repositories are needed. Cannot be combined with the
   * visibility argument. */
  privacy?: { $enum: RepositoryPrivacy } | null
  /** If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument. */
  visibility?: { $enum: RepositoryVisibility } | null
}
export interface WorkflowRunDeploymentReviewsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface WorkflowRunPendingDeploymentRequestsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
}
export interface WorkflowRunsArgs {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: string | null
  /** Returns the elements in the list that come before the specified cursor. */
  before?: string | null
  /** Returns the first _n_ elements from the list. */
  first?: Int | null
  /** Returns the last _n_ elements from the list. */
  last?: Int | null
  /** Ordering options for the connection
   *
   * Default value: `{direction: DESC, field: CREATED_AT}` */
  orderBy?: WorkflowRunOrder | null
}
export interface ActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    EnterpriseUserAccount?: $<EnterpriseUserAccountFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface AssignablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface AssigneePossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface AuditEntryActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface BranchActorAllowanceActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface BypassActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Team?: $<TeamFields & $Directives>
  }
}
export interface ClaimablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Mannequin?: $<MannequinFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ClosablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Discussion?: $<DiscussionFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    Milestone?: $<MilestoneFields & $Directives>
    Project?: $<ProjectFields & $Directives>
    ProjectV2?: $<ProjectV2Fields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface CloserPossibleTypes {
  __typename?: $Pick
  $on?: {
    Commit?: $<CommitFields & $Directives>
    ProjectV2?: $<ProjectV2Fields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface CreatedIssueOrRestrictedContributionPossibleTypes {
  __typename?: $Pick
  $on?: {
    CreatedIssueContribution?: $<CreatedIssueContributionFields & $Directives>
    RestrictedContribution?: $<RestrictedContributionFields & $Directives>
  }
}
export interface CreatedPullRequestOrRestrictedContributionPossibleTypes {
  __typename?: $Pick
  $on?: {
    CreatedPullRequestContribution?: $<CreatedPullRequestContributionFields & $Directives>
    RestrictedContribution?: $<RestrictedContributionFields & $Directives>
  }
}
export interface CreatedRepositoryOrRestrictedContributionPossibleTypes {
  __typename?: $Pick
  $on?: {
    CreatedRepositoryContribution?: $<CreatedRepositoryContributionFields & $Directives>
    RestrictedContribution?: $<RestrictedContributionFields & $Directives>
  }
}
export interface DeploymentReviewerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface EnterpriseMemberPossibleTypes {
  __typename?: $Pick
  $on?: {
    EnterpriseUserAccount?: $<EnterpriseUserAccountFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface GitObjectPossibleTypes {
  __typename?: $Pick
  $on?: {
    Blob?: $<BlobFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    Tag?: $<TagFields & $Directives>
    Tree?: $<TreeFields & $Directives>
  }
}
export interface GitObjectPossibleTypes {
  __typename?: $Pick
  $on?: {
    Blob?: $<BlobFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    Tag?: $<TagFields & $Directives>
    Tree?: $<TreeFields & $Directives>
  }
}
export interface GitSignaturePossibleTypes {
  __typename?: $Pick
  $on?: {
    GpgSignature?: $<GpgSignatureFields & $Directives>
    SmimeSignature?: $<SmimeSignatureFields & $Directives>
    SshSignature?: $<SshSignatureFields & $Directives>
    UnknownSignature?: $<UnknownSignatureFields & $Directives>
  }
}
export interface HovercardContextPossibleTypes {
  __typename?: $Pick
  $on?: {
    GenericHovercardContext?: $<GenericHovercardContextFields & $Directives>
    OrganizationTeamsHovercardContext?: $<OrganizationTeamsHovercardContextFields & $Directives>
    OrganizationsHovercardContext?: $<OrganizationsHovercardContextFields & $Directives>
    ReviewStatusHovercardContext?: $<ReviewStatusHovercardContextFields & $Directives>
    ViewerHovercardContext?: $<ViewerHovercardContextFields & $Directives>
  }
}
export interface IpAllowListOwnerPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Enterprise?: $<EnterpriseFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
  }
}
export interface IssueOrPullRequestPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface IssueTimelineItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    AssignedEvent?: $<AssignedEventFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    DemilestonedEvent?: $<DemilestonedEventFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    LabeledEvent?: $<LabeledEventFields & $Directives>
    LockedEvent?: $<LockedEventFields & $Directives>
    MilestonedEvent?: $<MilestonedEventFields & $Directives>
    ReferencedEvent?: $<ReferencedEventFields & $Directives>
    RenamedTitleEvent?: $<RenamedTitleEventFields & $Directives>
    ReopenedEvent?: $<ReopenedEventFields & $Directives>
    SubscribedEvent?: $<SubscribedEventFields & $Directives>
    TransferredEvent?: $<TransferredEventFields & $Directives>
    UnassignedEvent?: $<UnassignedEventFields & $Directives>
    UnlabeledEvent?: $<UnlabeledEventFields & $Directives>
    UnlockedEvent?: $<UnlockedEventFields & $Directives>
    UnsubscribedEvent?: $<UnsubscribedEventFields & $Directives>
    UserBlockedEvent?: $<UserBlockedEventFields & $Directives>
  }
}
export interface IssueTimelineItemsPossibleTypes {
  __typename?: $Pick
  $on?: {
    AddedToProjectEvent?: $<AddedToProjectEventFields & $Directives>
    AssignedEvent?: $<AssignedEventFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    CommentDeletedEvent?: $<CommentDeletedEventFields & $Directives>
    ConnectedEvent?: $<ConnectedEventFields & $Directives>
    ConvertedNoteToIssueEvent?: $<ConvertedNoteToIssueEventFields & $Directives>
    ConvertedToDiscussionEvent?: $<ConvertedToDiscussionEventFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    DemilestonedEvent?: $<DemilestonedEventFields & $Directives>
    DisconnectedEvent?: $<DisconnectedEventFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    LabeledEvent?: $<LabeledEventFields & $Directives>
    LockedEvent?: $<LockedEventFields & $Directives>
    MarkedAsDuplicateEvent?: $<MarkedAsDuplicateEventFields & $Directives>
    MentionedEvent?: $<MentionedEventFields & $Directives>
    MilestonedEvent?: $<MilestonedEventFields & $Directives>
    MovedColumnsInProjectEvent?: $<MovedColumnsInProjectEventFields & $Directives>
    ParentIssueAddedEvent?: $<ParentIssueAddedEventFields & $Directives>
    ParentIssueRemovedEvent?: $<ParentIssueRemovedEventFields & $Directives>
    PinnedEvent?: $<PinnedEventFields & $Directives>
    ReferencedEvent?: $<ReferencedEventFields & $Directives>
    RemovedFromProjectEvent?: $<RemovedFromProjectEventFields & $Directives>
    RenamedTitleEvent?: $<RenamedTitleEventFields & $Directives>
    ReopenedEvent?: $<ReopenedEventFields & $Directives>
    SubIssueAddedEvent?: $<SubIssueAddedEventFields & $Directives>
    SubIssueRemovedEvent?: $<SubIssueRemovedEventFields & $Directives>
    SubscribedEvent?: $<SubscribedEventFields & $Directives>
    TransferredEvent?: $<TransferredEventFields & $Directives>
    UnassignedEvent?: $<UnassignedEventFields & $Directives>
    UnlabeledEvent?: $<UnlabeledEventFields & $Directives>
    UnlockedEvent?: $<UnlockedEventFields & $Directives>
    UnmarkedAsDuplicateEvent?: $<UnmarkedAsDuplicateEventFields & $Directives>
    UnpinnedEvent?: $<UnpinnedEventFields & $Directives>
    UnsubscribedEvent?: $<UnsubscribedEventFields & $Directives>
    UserBlockedEvent?: $<UserBlockedEventFields & $Directives>
  }
}
export interface LabelablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Discussion?: $<DiscussionFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface LockablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Discussion?: $<DiscussionFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface MilestoneItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface MinimizablePossibleTypes {
  __typename?: $Pick
  $on?: {
    CommitComment?: $<CommitCommentFields & $Directives>
    DiscussionComment?: $<DiscussionCommentFields & $Directives>
    GistComment?: $<GistCommentFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewComment?: $<PullRequestReviewCommentFields & $Directives>
  }
}
export interface NodePossibleTypes {
  __typename?: $Pick
  $on?: {
    AddedToMergeQueueEvent?: $<AddedToMergeQueueEventFields & $Directives>
    AddedToProjectEvent?: $<AddedToProjectEventFields & $Directives>
    App?: $<AppFields & $Directives>
    AssignedEvent?: $<AssignedEventFields & $Directives>
    AutoMergeDisabledEvent?: $<AutoMergeDisabledEventFields & $Directives>
    AutoMergeEnabledEvent?: $<AutoMergeEnabledEventFields & $Directives>
    AutoRebaseEnabledEvent?: $<AutoRebaseEnabledEventFields & $Directives>
    AutoSquashEnabledEvent?: $<AutoSquashEnabledEventFields & $Directives>
    AutomaticBaseChangeFailedEvent?: $<AutomaticBaseChangeFailedEventFields & $Directives>
    AutomaticBaseChangeSucceededEvent?: $<AutomaticBaseChangeSucceededEventFields & $Directives>
    BaseRefChangedEvent?: $<BaseRefChangedEventFields & $Directives>
    BaseRefDeletedEvent?: $<BaseRefDeletedEventFields & $Directives>
    BaseRefForcePushedEvent?: $<BaseRefForcePushedEventFields & $Directives>
    Blob?: $<BlobFields & $Directives>
    Bot?: $<BotFields & $Directives>
    BranchProtectionRule?: $<BranchProtectionRuleFields & $Directives>
    BypassForcePushAllowance?: $<BypassForcePushAllowanceFields & $Directives>
    BypassPullRequestAllowance?: $<BypassPullRequestAllowanceFields & $Directives>
    CWE?: $<CWEFields & $Directives>
    CheckRun?: $<CheckRunFields & $Directives>
    CheckSuite?: $<CheckSuiteFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    CodeOfConduct?: $<CodeOfConductFields & $Directives>
    CommentDeletedEvent?: $<CommentDeletedEventFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    CommitComment?: $<CommitCommentFields & $Directives>
    CommitCommentThread?: $<CommitCommentThreadFields & $Directives>
    Comparison?: $<ComparisonFields & $Directives>
    ConnectedEvent?: $<ConnectedEventFields & $Directives>
    ConvertToDraftEvent?: $<ConvertToDraftEventFields & $Directives>
    ConvertedNoteToIssueEvent?: $<ConvertedNoteToIssueEventFields & $Directives>
    ConvertedToDiscussionEvent?: $<ConvertedToDiscussionEventFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    DemilestonedEvent?: $<DemilestonedEventFields & $Directives>
    DependencyGraphManifest?: $<DependencyGraphManifestFields & $Directives>
    DeployKey?: $<DeployKeyFields & $Directives>
    DeployedEvent?: $<DeployedEventFields & $Directives>
    Deployment?: $<DeploymentFields & $Directives>
    DeploymentEnvironmentChangedEvent?: $<DeploymentEnvironmentChangedEventFields & $Directives>
    DeploymentReview?: $<DeploymentReviewFields & $Directives>
    DeploymentStatus?: $<DeploymentStatusFields & $Directives>
    DisconnectedEvent?: $<DisconnectedEventFields & $Directives>
    Discussion?: $<DiscussionFields & $Directives>
    DiscussionCategory?: $<DiscussionCategoryFields & $Directives>
    DiscussionComment?: $<DiscussionCommentFields & $Directives>
    DiscussionPoll?: $<DiscussionPollFields & $Directives>
    DiscussionPollOption?: $<DiscussionPollOptionFields & $Directives>
    DraftIssue?: $<DraftIssueFields & $Directives>
    Enterprise?: $<EnterpriseFields & $Directives>
    EnterpriseAdministratorInvitation?: $<EnterpriseAdministratorInvitationFields & $Directives>
    EnterpriseIdentityProvider?: $<EnterpriseIdentityProviderFields & $Directives>
    EnterpriseMemberInvitation?: $<EnterpriseMemberInvitationFields & $Directives>
    EnterpriseRepositoryInfo?: $<EnterpriseRepositoryInfoFields & $Directives>
    EnterpriseServerInstallation?: $<EnterpriseServerInstallationFields & $Directives>
    EnterpriseServerUserAccount?: $<EnterpriseServerUserAccountFields & $Directives>
    EnterpriseServerUserAccountEmail?: $<EnterpriseServerUserAccountEmailFields & $Directives>
    EnterpriseServerUserAccountsUpload?: $<EnterpriseServerUserAccountsUploadFields & $Directives>
    EnterpriseUserAccount?: $<EnterpriseUserAccountFields & $Directives>
    Environment?: $<EnvironmentFields & $Directives>
    ExternalIdentity?: $<ExternalIdentityFields & $Directives>
    Gist?: $<GistFields & $Directives>
    GistComment?: $<GistCommentFields & $Directives>
    HeadRefDeletedEvent?: $<HeadRefDeletedEventFields & $Directives>
    HeadRefForcePushedEvent?: $<HeadRefForcePushedEventFields & $Directives>
    HeadRefRestoredEvent?: $<HeadRefRestoredEventFields & $Directives>
    IpAllowListEntry?: $<IpAllowListEntryFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    Label?: $<LabelFields & $Directives>
    LabeledEvent?: $<LabeledEventFields & $Directives>
    Language?: $<LanguageFields & $Directives>
    License?: $<LicenseFields & $Directives>
    LinkedBranch?: $<LinkedBranchFields & $Directives>
    LockedEvent?: $<LockedEventFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    MarkedAsDuplicateEvent?: $<MarkedAsDuplicateEventFields & $Directives>
    MarketplaceCategory?: $<MarketplaceCategoryFields & $Directives>
    MarketplaceListing?: $<MarketplaceListingFields & $Directives>
    MemberFeatureRequestNotification?: $<MemberFeatureRequestNotificationFields & $Directives>
    MembersCanDeleteReposClearAuditEntry?: $<MembersCanDeleteReposClearAuditEntryFields & $Directives>
    MembersCanDeleteReposDisableAuditEntry?: $<MembersCanDeleteReposDisableAuditEntryFields & $Directives>
    MembersCanDeleteReposEnableAuditEntry?: $<MembersCanDeleteReposEnableAuditEntryFields & $Directives>
    MentionedEvent?: $<MentionedEventFields & $Directives>
    MergeQueue?: $<MergeQueueFields & $Directives>
    MergeQueueEntry?: $<MergeQueueEntryFields & $Directives>
    MergedEvent?: $<MergedEventFields & $Directives>
    MigrationSource?: $<MigrationSourceFields & $Directives>
    Milestone?: $<MilestoneFields & $Directives>
    MilestonedEvent?: $<MilestonedEventFields & $Directives>
    MovedColumnsInProjectEvent?: $<MovedColumnsInProjectEventFields & $Directives>
    OIDCProvider?: $<OIDCProviderFields & $Directives>
    OauthApplicationCreateAuditEntry?: $<OauthApplicationCreateAuditEntryFields & $Directives>
    OrgAddBillingManagerAuditEntry?: $<OrgAddBillingManagerAuditEntryFields & $Directives>
    OrgAddMemberAuditEntry?: $<OrgAddMemberAuditEntryFields & $Directives>
    OrgBlockUserAuditEntry?: $<OrgBlockUserAuditEntryFields & $Directives>
    OrgConfigDisableCollaboratorsOnlyAuditEntry?: $<OrgConfigDisableCollaboratorsOnlyAuditEntryFields & $Directives>
    OrgConfigEnableCollaboratorsOnlyAuditEntry?: $<OrgConfigEnableCollaboratorsOnlyAuditEntryFields & $Directives>
    OrgCreateAuditEntry?: $<OrgCreateAuditEntryFields & $Directives>
    OrgDisableOauthAppRestrictionsAuditEntry?: $<OrgDisableOauthAppRestrictionsAuditEntryFields & $Directives>
    OrgDisableSamlAuditEntry?: $<OrgDisableSamlAuditEntryFields & $Directives>
    OrgDisableTwoFactorRequirementAuditEntry?: $<OrgDisableTwoFactorRequirementAuditEntryFields & $Directives>
    OrgEnableOauthAppRestrictionsAuditEntry?: $<OrgEnableOauthAppRestrictionsAuditEntryFields & $Directives>
    OrgEnableSamlAuditEntry?: $<OrgEnableSamlAuditEntryFields & $Directives>
    OrgEnableTwoFactorRequirementAuditEntry?: $<OrgEnableTwoFactorRequirementAuditEntryFields & $Directives>
    OrgInviteMemberAuditEntry?: $<OrgInviteMemberAuditEntryFields & $Directives>
    OrgInviteToBusinessAuditEntry?: $<OrgInviteToBusinessAuditEntryFields & $Directives>
    OrgOauthAppAccessApprovedAuditEntry?: $<OrgOauthAppAccessApprovedAuditEntryFields & $Directives>
    OrgOauthAppAccessBlockedAuditEntry?: $<OrgOauthAppAccessBlockedAuditEntryFields & $Directives>
    OrgOauthAppAccessDeniedAuditEntry?: $<OrgOauthAppAccessDeniedAuditEntryFields & $Directives>
    OrgOauthAppAccessRequestedAuditEntry?: $<OrgOauthAppAccessRequestedAuditEntryFields & $Directives>
    OrgOauthAppAccessUnblockedAuditEntry?: $<OrgOauthAppAccessUnblockedAuditEntryFields & $Directives>
    OrgRemoveBillingManagerAuditEntry?: $<OrgRemoveBillingManagerAuditEntryFields & $Directives>
    OrgRemoveMemberAuditEntry?: $<OrgRemoveMemberAuditEntryFields & $Directives>
    OrgRemoveOutsideCollaboratorAuditEntry?: $<OrgRemoveOutsideCollaboratorAuditEntryFields & $Directives>
    OrgRestoreMemberAuditEntry?: $<OrgRestoreMemberAuditEntryFields & $Directives>
    OrgUnblockUserAuditEntry?: $<OrgUnblockUserAuditEntryFields & $Directives>
    OrgUpdateDefaultRepositoryPermissionAuditEntry?: $<OrgUpdateDefaultRepositoryPermissionAuditEntryFields & $Directives>
    OrgUpdateMemberAuditEntry?: $<OrgUpdateMemberAuditEntryFields & $Directives>
    OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: $<OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields & $Directives>
    OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: $<OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    OrganizationIdentityProvider?: $<OrganizationIdentityProviderFields & $Directives>
    OrganizationInvitation?: $<OrganizationInvitationFields & $Directives>
    OrganizationMigration?: $<OrganizationMigrationFields & $Directives>
    Package?: $<PackageFields & $Directives>
    PackageFile?: $<PackageFileFields & $Directives>
    PackageTag?: $<PackageTagFields & $Directives>
    PackageVersion?: $<PackageVersionFields & $Directives>
    ParentIssueAddedEvent?: $<ParentIssueAddedEventFields & $Directives>
    ParentIssueRemovedEvent?: $<ParentIssueRemovedEventFields & $Directives>
    PinnedDiscussion?: $<PinnedDiscussionFields & $Directives>
    PinnedEnvironment?: $<PinnedEnvironmentFields & $Directives>
    PinnedEvent?: $<PinnedEventFields & $Directives>
    PinnedIssue?: $<PinnedIssueFields & $Directives>
    PrivateRepositoryForkingDisableAuditEntry?: $<PrivateRepositoryForkingDisableAuditEntryFields & $Directives>
    PrivateRepositoryForkingEnableAuditEntry?: $<PrivateRepositoryForkingEnableAuditEntryFields & $Directives>
    Project?: $<ProjectFields & $Directives>
    ProjectCard?: $<ProjectCardFields & $Directives>
    ProjectColumn?: $<ProjectColumnFields & $Directives>
    ProjectV2?: $<ProjectV2Fields & $Directives>
    ProjectV2Field?: $<ProjectV2FieldFields & $Directives>
    ProjectV2Item?: $<ProjectV2ItemFields & $Directives>
    ProjectV2ItemFieldDateValue?: $<ProjectV2ItemFieldDateValueFields & $Directives>
    ProjectV2ItemFieldIterationValue?: $<ProjectV2ItemFieldIterationValueFields & $Directives>
    ProjectV2ItemFieldNumberValue?: $<ProjectV2ItemFieldNumberValueFields & $Directives>
    ProjectV2ItemFieldSingleSelectValue?: $<ProjectV2ItemFieldSingleSelectValueFields & $Directives>
    ProjectV2ItemFieldTextValue?: $<ProjectV2ItemFieldTextValueFields & $Directives>
    ProjectV2IterationField?: $<ProjectV2IterationFieldFields & $Directives>
    ProjectV2SingleSelectField?: $<ProjectV2SingleSelectFieldFields & $Directives>
    ProjectV2StatusUpdate?: $<ProjectV2StatusUpdateFields & $Directives>
    ProjectV2View?: $<ProjectV2ViewFields & $Directives>
    ProjectV2Workflow?: $<ProjectV2WorkflowFields & $Directives>
    PublicKey?: $<PublicKeyFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    PullRequestCommit?: $<PullRequestCommitFields & $Directives>
    PullRequestCommitCommentThread?: $<PullRequestCommitCommentThreadFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewComment?: $<PullRequestReviewCommentFields & $Directives>
    PullRequestReviewThread?: $<PullRequestReviewThreadFields & $Directives>
    PullRequestThread?: $<PullRequestThreadFields & $Directives>
    Push?: $<PushFields & $Directives>
    PushAllowance?: $<PushAllowanceFields & $Directives>
    Query?: $<QueryFields & $Directives>
    Reaction?: $<ReactionFields & $Directives>
    ReadyForReviewEvent?: $<ReadyForReviewEventFields & $Directives>
    Ref?: $<RefFields & $Directives>
    ReferencedEvent?: $<ReferencedEventFields & $Directives>
    Release?: $<ReleaseFields & $Directives>
    ReleaseAsset?: $<ReleaseAssetFields & $Directives>
    RemovedFromMergeQueueEvent?: $<RemovedFromMergeQueueEventFields & $Directives>
    RemovedFromProjectEvent?: $<RemovedFromProjectEventFields & $Directives>
    RenamedTitleEvent?: $<RenamedTitleEventFields & $Directives>
    ReopenedEvent?: $<ReopenedEventFields & $Directives>
    RepoAccessAuditEntry?: $<RepoAccessAuditEntryFields & $Directives>
    RepoAddMemberAuditEntry?: $<RepoAddMemberAuditEntryFields & $Directives>
    RepoAddTopicAuditEntry?: $<RepoAddTopicAuditEntryFields & $Directives>
    RepoArchivedAuditEntry?: $<RepoArchivedAuditEntryFields & $Directives>
    RepoChangeMergeSettingAuditEntry?: $<RepoChangeMergeSettingAuditEntryFields & $Directives>
    RepoConfigDisableAnonymousGitAccessAuditEntry?: $<RepoConfigDisableAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigDisableCollaboratorsOnlyAuditEntry?: $<RepoConfigDisableCollaboratorsOnlyAuditEntryFields & $Directives>
    RepoConfigDisableContributorsOnlyAuditEntry?: $<RepoConfigDisableContributorsOnlyAuditEntryFields & $Directives>
    RepoConfigDisableSockpuppetDisallowedAuditEntry?: $<RepoConfigDisableSockpuppetDisallowedAuditEntryFields & $Directives>
    RepoConfigEnableAnonymousGitAccessAuditEntry?: $<RepoConfigEnableAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigEnableCollaboratorsOnlyAuditEntry?: $<RepoConfigEnableCollaboratorsOnlyAuditEntryFields & $Directives>
    RepoConfigEnableContributorsOnlyAuditEntry?: $<RepoConfigEnableContributorsOnlyAuditEntryFields & $Directives>
    RepoConfigEnableSockpuppetDisallowedAuditEntry?: $<RepoConfigEnableSockpuppetDisallowedAuditEntryFields & $Directives>
    RepoConfigLockAnonymousGitAccessAuditEntry?: $<RepoConfigLockAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigUnlockAnonymousGitAccessAuditEntry?: $<RepoConfigUnlockAnonymousGitAccessAuditEntryFields & $Directives>
    RepoCreateAuditEntry?: $<RepoCreateAuditEntryFields & $Directives>
    RepoDestroyAuditEntry?: $<RepoDestroyAuditEntryFields & $Directives>
    RepoRemoveMemberAuditEntry?: $<RepoRemoveMemberAuditEntryFields & $Directives>
    RepoRemoveTopicAuditEntry?: $<RepoRemoveTopicAuditEntryFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    RepositoryInvitation?: $<RepositoryInvitationFields & $Directives>
    RepositoryMigration?: $<RepositoryMigrationFields & $Directives>
    RepositoryRule?: $<RepositoryRuleFields & $Directives>
    RepositoryRuleset?: $<RepositoryRulesetFields & $Directives>
    RepositoryRulesetBypassActor?: $<RepositoryRulesetBypassActorFields & $Directives>
    RepositoryTopic?: $<RepositoryTopicFields & $Directives>
    RepositoryVisibilityChangeDisableAuditEntry?: $<RepositoryVisibilityChangeDisableAuditEntryFields & $Directives>
    RepositoryVisibilityChangeEnableAuditEntry?: $<RepositoryVisibilityChangeEnableAuditEntryFields & $Directives>
    RepositoryVulnerabilityAlert?: $<RepositoryVulnerabilityAlertFields & $Directives>
    ReviewDismissalAllowance?: $<ReviewDismissalAllowanceFields & $Directives>
    ReviewDismissedEvent?: $<ReviewDismissedEventFields & $Directives>
    ReviewRequest?: $<ReviewRequestFields & $Directives>
    ReviewRequestRemovedEvent?: $<ReviewRequestRemovedEventFields & $Directives>
    ReviewRequestedEvent?: $<ReviewRequestedEventFields & $Directives>
    SavedReply?: $<SavedReplyFields & $Directives>
    SecurityAdvisory?: $<SecurityAdvisoryFields & $Directives>
    SponsorsActivity?: $<SponsorsActivityFields & $Directives>
    SponsorsListing?: $<SponsorsListingFields & $Directives>
    SponsorsListingFeaturedItem?: $<SponsorsListingFeaturedItemFields & $Directives>
    SponsorsTier?: $<SponsorsTierFields & $Directives>
    Sponsorship?: $<SponsorshipFields & $Directives>
    SponsorshipNewsletter?: $<SponsorshipNewsletterFields & $Directives>
    Status?: $<StatusFields & $Directives>
    StatusCheckRollup?: $<StatusCheckRollupFields & $Directives>
    StatusContext?: $<StatusContextFields & $Directives>
    SubIssueAddedEvent?: $<SubIssueAddedEventFields & $Directives>
    SubIssueRemovedEvent?: $<SubIssueRemovedEventFields & $Directives>
    SubscribedEvent?: $<SubscribedEventFields & $Directives>
    Tag?: $<TagFields & $Directives>
    Team?: $<TeamFields & $Directives>
    TeamAddMemberAuditEntry?: $<TeamAddMemberAuditEntryFields & $Directives>
    TeamAddRepositoryAuditEntry?: $<TeamAddRepositoryAuditEntryFields & $Directives>
    TeamChangeParentTeamAuditEntry?: $<TeamChangeParentTeamAuditEntryFields & $Directives>
    TeamDiscussion?: $<TeamDiscussionFields & $Directives>
    TeamDiscussionComment?: $<TeamDiscussionCommentFields & $Directives>
    TeamRemoveMemberAuditEntry?: $<TeamRemoveMemberAuditEntryFields & $Directives>
    TeamRemoveRepositoryAuditEntry?: $<TeamRemoveRepositoryAuditEntryFields & $Directives>
    Topic?: $<TopicFields & $Directives>
    TransferredEvent?: $<TransferredEventFields & $Directives>
    Tree?: $<TreeFields & $Directives>
    UnassignedEvent?: $<UnassignedEventFields & $Directives>
    UnlabeledEvent?: $<UnlabeledEventFields & $Directives>
    UnlockedEvent?: $<UnlockedEventFields & $Directives>
    UnmarkedAsDuplicateEvent?: $<UnmarkedAsDuplicateEventFields & $Directives>
    UnpinnedEvent?: $<UnpinnedEventFields & $Directives>
    UnsubscribedEvent?: $<UnsubscribedEventFields & $Directives>
    User?: $<UserFields & $Directives>
    UserBlockedEvent?: $<UserBlockedEventFields & $Directives>
    UserContentEdit?: $<UserContentEditFields & $Directives>
    UserList?: $<UserListFields & $Directives>
    UserNamespaceRepository?: $<UserNamespaceRepositoryFields & $Directives>
    UserStatus?: $<UserStatusFields & $Directives>
    VerifiableDomain?: $<VerifiableDomainFields & $Directives>
    Workflow?: $<WorkflowFields & $Directives>
    WorkflowRun?: $<WorkflowRunFields & $Directives>
    WorkflowRunFile?: $<WorkflowRunFileFields & $Directives>
  }
}
export interface OrganizationAuditEntryPossibleTypes {
  __typename?: $Pick
  $on?: {
    MembersCanDeleteReposClearAuditEntry?: $<MembersCanDeleteReposClearAuditEntryFields & $Directives>
    MembersCanDeleteReposDisableAuditEntry?: $<MembersCanDeleteReposDisableAuditEntryFields & $Directives>
    MembersCanDeleteReposEnableAuditEntry?: $<MembersCanDeleteReposEnableAuditEntryFields & $Directives>
    OauthApplicationCreateAuditEntry?: $<OauthApplicationCreateAuditEntryFields & $Directives>
    OrgAddBillingManagerAuditEntry?: $<OrgAddBillingManagerAuditEntryFields & $Directives>
    OrgAddMemberAuditEntry?: $<OrgAddMemberAuditEntryFields & $Directives>
    OrgBlockUserAuditEntry?: $<OrgBlockUserAuditEntryFields & $Directives>
    OrgConfigDisableCollaboratorsOnlyAuditEntry?: $<OrgConfigDisableCollaboratorsOnlyAuditEntryFields & $Directives>
    OrgConfigEnableCollaboratorsOnlyAuditEntry?: $<OrgConfigEnableCollaboratorsOnlyAuditEntryFields & $Directives>
    OrgCreateAuditEntry?: $<OrgCreateAuditEntryFields & $Directives>
    OrgDisableOauthAppRestrictionsAuditEntry?: $<OrgDisableOauthAppRestrictionsAuditEntryFields & $Directives>
    OrgDisableSamlAuditEntry?: $<OrgDisableSamlAuditEntryFields & $Directives>
    OrgDisableTwoFactorRequirementAuditEntry?: $<OrgDisableTwoFactorRequirementAuditEntryFields & $Directives>
    OrgEnableOauthAppRestrictionsAuditEntry?: $<OrgEnableOauthAppRestrictionsAuditEntryFields & $Directives>
    OrgEnableSamlAuditEntry?: $<OrgEnableSamlAuditEntryFields & $Directives>
    OrgEnableTwoFactorRequirementAuditEntry?: $<OrgEnableTwoFactorRequirementAuditEntryFields & $Directives>
    OrgInviteMemberAuditEntry?: $<OrgInviteMemberAuditEntryFields & $Directives>
    OrgInviteToBusinessAuditEntry?: $<OrgInviteToBusinessAuditEntryFields & $Directives>
    OrgOauthAppAccessApprovedAuditEntry?: $<OrgOauthAppAccessApprovedAuditEntryFields & $Directives>
    OrgOauthAppAccessBlockedAuditEntry?: $<OrgOauthAppAccessBlockedAuditEntryFields & $Directives>
    OrgOauthAppAccessDeniedAuditEntry?: $<OrgOauthAppAccessDeniedAuditEntryFields & $Directives>
    OrgOauthAppAccessRequestedAuditEntry?: $<OrgOauthAppAccessRequestedAuditEntryFields & $Directives>
    OrgOauthAppAccessUnblockedAuditEntry?: $<OrgOauthAppAccessUnblockedAuditEntryFields & $Directives>
    OrgRemoveBillingManagerAuditEntry?: $<OrgRemoveBillingManagerAuditEntryFields & $Directives>
    OrgRemoveMemberAuditEntry?: $<OrgRemoveMemberAuditEntryFields & $Directives>
    OrgRemoveOutsideCollaboratorAuditEntry?: $<OrgRemoveOutsideCollaboratorAuditEntryFields & $Directives>
    OrgRestoreMemberAuditEntry?: $<OrgRestoreMemberAuditEntryFields & $Directives>
    OrgUnblockUserAuditEntry?: $<OrgUnblockUserAuditEntryFields & $Directives>
    OrgUpdateDefaultRepositoryPermissionAuditEntry?: $<OrgUpdateDefaultRepositoryPermissionAuditEntryFields & $Directives>
    OrgUpdateMemberAuditEntry?: $<OrgUpdateMemberAuditEntryFields & $Directives>
    OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: $<OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields & $Directives>
    OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: $<OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields & $Directives>
    PrivateRepositoryForkingDisableAuditEntry?: $<PrivateRepositoryForkingDisableAuditEntryFields & $Directives>
    PrivateRepositoryForkingEnableAuditEntry?: $<PrivateRepositoryForkingEnableAuditEntryFields & $Directives>
    RepoAccessAuditEntry?: $<RepoAccessAuditEntryFields & $Directives>
    RepoAddMemberAuditEntry?: $<RepoAddMemberAuditEntryFields & $Directives>
    RepoAddTopicAuditEntry?: $<RepoAddTopicAuditEntryFields & $Directives>
    RepoArchivedAuditEntry?: $<RepoArchivedAuditEntryFields & $Directives>
    RepoChangeMergeSettingAuditEntry?: $<RepoChangeMergeSettingAuditEntryFields & $Directives>
    RepoConfigDisableAnonymousGitAccessAuditEntry?: $<RepoConfigDisableAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigDisableCollaboratorsOnlyAuditEntry?: $<RepoConfigDisableCollaboratorsOnlyAuditEntryFields & $Directives>
    RepoConfigDisableContributorsOnlyAuditEntry?: $<RepoConfigDisableContributorsOnlyAuditEntryFields & $Directives>
    RepoConfigDisableSockpuppetDisallowedAuditEntry?: $<RepoConfigDisableSockpuppetDisallowedAuditEntryFields & $Directives>
    RepoConfigEnableAnonymousGitAccessAuditEntry?: $<RepoConfigEnableAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigEnableCollaboratorsOnlyAuditEntry?: $<RepoConfigEnableCollaboratorsOnlyAuditEntryFields & $Directives>
    RepoConfigEnableContributorsOnlyAuditEntry?: $<RepoConfigEnableContributorsOnlyAuditEntryFields & $Directives>
    RepoConfigEnableSockpuppetDisallowedAuditEntry?: $<RepoConfigEnableSockpuppetDisallowedAuditEntryFields & $Directives>
    RepoConfigLockAnonymousGitAccessAuditEntry?: $<RepoConfigLockAnonymousGitAccessAuditEntryFields & $Directives>
    RepoConfigUnlockAnonymousGitAccessAuditEntry?: $<RepoConfigUnlockAnonymousGitAccessAuditEntryFields & $Directives>
    RepoCreateAuditEntry?: $<RepoCreateAuditEntryFields & $Directives>
    RepoDestroyAuditEntry?: $<RepoDestroyAuditEntryFields & $Directives>
    RepoRemoveMemberAuditEntry?: $<RepoRemoveMemberAuditEntryFields & $Directives>
    RepoRemoveTopicAuditEntry?: $<RepoRemoveTopicAuditEntryFields & $Directives>
    RepositoryVisibilityChangeDisableAuditEntry?: $<RepositoryVisibilityChangeDisableAuditEntryFields & $Directives>
    RepositoryVisibilityChangeEnableAuditEntry?: $<RepositoryVisibilityChangeEnableAuditEntryFields & $Directives>
    TeamAddMemberAuditEntry?: $<TeamAddMemberAuditEntryFields & $Directives>
    TeamAddRepositoryAuditEntry?: $<TeamAddRepositoryAuditEntryFields & $Directives>
    TeamChangeParentTeamAuditEntry?: $<TeamChangeParentTeamAuditEntryFields & $Directives>
    TeamRemoveMemberAuditEntry?: $<TeamRemoveMemberAuditEntryFields & $Directives>
    TeamRemoveRepositoryAuditEntry?: $<TeamRemoveRepositoryAuditEntryFields & $Directives>
  }
}
export interface OrgRestoreMemberAuditEntryMembershipPossibleTypes {
  __typename?: $Pick
  $on?: {
    OrgRestoreMemberMembershipOrganizationAuditEntryData?: $<OrgRestoreMemberMembershipOrganizationAuditEntryDataFields & $Directives>
    OrgRestoreMemberMembershipRepositoryAuditEntryData?: $<OrgRestoreMemberMembershipRepositoryAuditEntryDataFields & $Directives>
    OrgRestoreMemberMembershipTeamAuditEntryData?: $<OrgRestoreMemberMembershipTeamAuditEntryDataFields & $Directives>
  }
}
export interface PermissionGranterPossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    Team?: $<TeamFields & $Directives>
  }
}
export interface PinnableItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    Gist?: $<GistFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
  }
}
export interface ProjectCardItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface ProjectOwnerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ProjectV2ActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ProjectV2FieldConfigurationPossibleTypes {
  __typename?: $Pick
  $on?: {
    ProjectV2Field?: $<ProjectV2FieldFields & $Directives>
    ProjectV2IterationField?: $<ProjectV2IterationFieldFields & $Directives>
    ProjectV2SingleSelectField?: $<ProjectV2SingleSelectFieldFields & $Directives>
  }
}
export interface ProjectV2ItemContentPossibleTypes {
  __typename?: $Pick
  $on?: {
    DraftIssue?: $<DraftIssueFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface ProjectV2ItemFieldValuePossibleTypes {
  __typename?: $Pick
  $on?: {
    ProjectV2ItemFieldDateValue?: $<ProjectV2ItemFieldDateValueFields & $Directives>
    ProjectV2ItemFieldIterationValue?: $<ProjectV2ItemFieldIterationValueFields & $Directives>
    ProjectV2ItemFieldLabelValue?: $<ProjectV2ItemFieldLabelValueFields & $Directives>
    ProjectV2ItemFieldMilestoneValue?: $<ProjectV2ItemFieldMilestoneValueFields & $Directives>
    ProjectV2ItemFieldNumberValue?: $<ProjectV2ItemFieldNumberValueFields & $Directives>
    ProjectV2ItemFieldPullRequestValue?: $<ProjectV2ItemFieldPullRequestValueFields & $Directives>
    ProjectV2ItemFieldRepositoryValue?: $<ProjectV2ItemFieldRepositoryValueFields & $Directives>
    ProjectV2ItemFieldReviewerValue?: $<ProjectV2ItemFieldReviewerValueFields & $Directives>
    ProjectV2ItemFieldSingleSelectValue?: $<ProjectV2ItemFieldSingleSelectValueFields & $Directives>
    ProjectV2ItemFieldTextValue?: $<ProjectV2ItemFieldTextValueFields & $Directives>
    ProjectV2ItemFieldUserValue?: $<ProjectV2ItemFieldUserValueFields & $Directives>
  }
}
export interface ProjectV2OwnerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface PullRequestTimelineItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    AssignedEvent?: $<AssignedEventFields & $Directives>
    BaseRefDeletedEvent?: $<BaseRefDeletedEventFields & $Directives>
    BaseRefForcePushedEvent?: $<BaseRefForcePushedEventFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    CommitCommentThread?: $<CommitCommentThreadFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    DemilestonedEvent?: $<DemilestonedEventFields & $Directives>
    DeployedEvent?: $<DeployedEventFields & $Directives>
    DeploymentEnvironmentChangedEvent?: $<DeploymentEnvironmentChangedEventFields & $Directives>
    HeadRefDeletedEvent?: $<HeadRefDeletedEventFields & $Directives>
    HeadRefForcePushedEvent?: $<HeadRefForcePushedEventFields & $Directives>
    HeadRefRestoredEvent?: $<HeadRefRestoredEventFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    LabeledEvent?: $<LabeledEventFields & $Directives>
    LockedEvent?: $<LockedEventFields & $Directives>
    MergedEvent?: $<MergedEventFields & $Directives>
    MilestonedEvent?: $<MilestonedEventFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewComment?: $<PullRequestReviewCommentFields & $Directives>
    PullRequestReviewThread?: $<PullRequestReviewThreadFields & $Directives>
    ReferencedEvent?: $<ReferencedEventFields & $Directives>
    RenamedTitleEvent?: $<RenamedTitleEventFields & $Directives>
    ReopenedEvent?: $<ReopenedEventFields & $Directives>
    ReviewDismissedEvent?: $<ReviewDismissedEventFields & $Directives>
    ReviewRequestRemovedEvent?: $<ReviewRequestRemovedEventFields & $Directives>
    ReviewRequestedEvent?: $<ReviewRequestedEventFields & $Directives>
    SubscribedEvent?: $<SubscribedEventFields & $Directives>
    UnassignedEvent?: $<UnassignedEventFields & $Directives>
    UnlabeledEvent?: $<UnlabeledEventFields & $Directives>
    UnlockedEvent?: $<UnlockedEventFields & $Directives>
    UnsubscribedEvent?: $<UnsubscribedEventFields & $Directives>
    UserBlockedEvent?: $<UserBlockedEventFields & $Directives>
  }
}
export interface PullRequestTimelineItemsPossibleTypes {
  __typename?: $Pick
  $on?: {
    AddedToMergeQueueEvent?: $<AddedToMergeQueueEventFields & $Directives>
    AddedToProjectEvent?: $<AddedToProjectEventFields & $Directives>
    AssignedEvent?: $<AssignedEventFields & $Directives>
    AutoMergeDisabledEvent?: $<AutoMergeDisabledEventFields & $Directives>
    AutoMergeEnabledEvent?: $<AutoMergeEnabledEventFields & $Directives>
    AutoRebaseEnabledEvent?: $<AutoRebaseEnabledEventFields & $Directives>
    AutoSquashEnabledEvent?: $<AutoSquashEnabledEventFields & $Directives>
    AutomaticBaseChangeFailedEvent?: $<AutomaticBaseChangeFailedEventFields & $Directives>
    AutomaticBaseChangeSucceededEvent?: $<AutomaticBaseChangeSucceededEventFields & $Directives>
    BaseRefChangedEvent?: $<BaseRefChangedEventFields & $Directives>
    BaseRefDeletedEvent?: $<BaseRefDeletedEventFields & $Directives>
    BaseRefForcePushedEvent?: $<BaseRefForcePushedEventFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    CommentDeletedEvent?: $<CommentDeletedEventFields & $Directives>
    ConnectedEvent?: $<ConnectedEventFields & $Directives>
    ConvertToDraftEvent?: $<ConvertToDraftEventFields & $Directives>
    ConvertedNoteToIssueEvent?: $<ConvertedNoteToIssueEventFields & $Directives>
    ConvertedToDiscussionEvent?: $<ConvertedToDiscussionEventFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    DemilestonedEvent?: $<DemilestonedEventFields & $Directives>
    DeployedEvent?: $<DeployedEventFields & $Directives>
    DeploymentEnvironmentChangedEvent?: $<DeploymentEnvironmentChangedEventFields & $Directives>
    DisconnectedEvent?: $<DisconnectedEventFields & $Directives>
    HeadRefDeletedEvent?: $<HeadRefDeletedEventFields & $Directives>
    HeadRefForcePushedEvent?: $<HeadRefForcePushedEventFields & $Directives>
    HeadRefRestoredEvent?: $<HeadRefRestoredEventFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    LabeledEvent?: $<LabeledEventFields & $Directives>
    LockedEvent?: $<LockedEventFields & $Directives>
    MarkedAsDuplicateEvent?: $<MarkedAsDuplicateEventFields & $Directives>
    MentionedEvent?: $<MentionedEventFields & $Directives>
    MergedEvent?: $<MergedEventFields & $Directives>
    MilestonedEvent?: $<MilestonedEventFields & $Directives>
    MovedColumnsInProjectEvent?: $<MovedColumnsInProjectEventFields & $Directives>
    ParentIssueAddedEvent?: $<ParentIssueAddedEventFields & $Directives>
    ParentIssueRemovedEvent?: $<ParentIssueRemovedEventFields & $Directives>
    PinnedEvent?: $<PinnedEventFields & $Directives>
    PullRequestCommit?: $<PullRequestCommitFields & $Directives>
    PullRequestCommitCommentThread?: $<PullRequestCommitCommentThreadFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewThread?: $<PullRequestReviewThreadFields & $Directives>
    PullRequestRevisionMarker?: $<PullRequestRevisionMarkerFields & $Directives>
    ReadyForReviewEvent?: $<ReadyForReviewEventFields & $Directives>
    ReferencedEvent?: $<ReferencedEventFields & $Directives>
    RemovedFromMergeQueueEvent?: $<RemovedFromMergeQueueEventFields & $Directives>
    RemovedFromProjectEvent?: $<RemovedFromProjectEventFields & $Directives>
    RenamedTitleEvent?: $<RenamedTitleEventFields & $Directives>
    ReopenedEvent?: $<ReopenedEventFields & $Directives>
    ReviewDismissedEvent?: $<ReviewDismissedEventFields & $Directives>
    ReviewRequestRemovedEvent?: $<ReviewRequestRemovedEventFields & $Directives>
    ReviewRequestedEvent?: $<ReviewRequestedEventFields & $Directives>
    SubIssueAddedEvent?: $<SubIssueAddedEventFields & $Directives>
    SubIssueRemovedEvent?: $<SubIssueRemovedEventFields & $Directives>
    SubscribedEvent?: $<SubscribedEventFields & $Directives>
    TransferredEvent?: $<TransferredEventFields & $Directives>
    UnassignedEvent?: $<UnassignedEventFields & $Directives>
    UnlabeledEvent?: $<UnlabeledEventFields & $Directives>
    UnlockedEvent?: $<UnlockedEventFields & $Directives>
    UnmarkedAsDuplicateEvent?: $<UnmarkedAsDuplicateEventFields & $Directives>
    UnpinnedEvent?: $<UnpinnedEventFields & $Directives>
    UnsubscribedEvent?: $<UnsubscribedEventFields & $Directives>
    UserBlockedEvent?: $<UserBlockedEventFields & $Directives>
  }
}
export interface PushAllowanceActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ReactablePossibleTypes {
  __typename?: $Pick
  $on?: {
    CommitComment?: $<CommitCommentFields & $Directives>
    Discussion?: $<DiscussionFields & $Directives>
    DiscussionComment?: $<DiscussionCommentFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewComment?: $<PullRequestReviewCommentFields & $Directives>
    Release?: $<ReleaseFields & $Directives>
    TeamDiscussion?: $<TeamDiscussionFields & $Directives>
    TeamDiscussionComment?: $<TeamDiscussionCommentFields & $Directives>
  }
}
export interface ReactablePossibleTypes {
  __typename?: $Pick
  $on?: {
    CommitComment?: $<CommitCommentFields & $Directives>
    Discussion?: $<DiscussionFields & $Directives>
    DiscussionComment?: $<DiscussionCommentFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    IssueComment?: $<IssueCommentFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    PullRequestReview?: $<PullRequestReviewFields & $Directives>
    PullRequestReviewComment?: $<PullRequestReviewCommentFields & $Directives>
    Release?: $<ReleaseFields & $Directives>
    TeamDiscussion?: $<TeamDiscussionFields & $Directives>
    TeamDiscussionComment?: $<TeamDiscussionCommentFields & $Directives>
  }
}
export interface ReactorPossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ReferencedSubjectPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface RenamedTitleSubjectPossibleTypes {
  __typename?: $Pick
  $on?: {
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
  }
}
export interface RepositoryInfoPossibleTypes {
  __typename?: $Pick
  $on?: {
    Repository?: $<RepositoryFields & $Directives>
  }
}
export interface RepositoryOwnerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface RequestedReviewerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface ReviewDismissalAllowanceActorPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Team?: $<TeamFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface RuleParametersPossibleTypes {
  __typename?: $Pick
  $on?: {
    BranchNamePatternParameters?: $<BranchNamePatternParametersFields & $Directives>
    CodeScanningParameters?: $<CodeScanningParametersFields & $Directives>
    CommitAuthorEmailPatternParameters?: $<CommitAuthorEmailPatternParametersFields & $Directives>
    CommitMessagePatternParameters?: $<CommitMessagePatternParametersFields & $Directives>
    CommitterEmailPatternParameters?: $<CommitterEmailPatternParametersFields & $Directives>
    FileExtensionRestrictionParameters?: $<FileExtensionRestrictionParametersFields & $Directives>
    FilePathRestrictionParameters?: $<FilePathRestrictionParametersFields & $Directives>
    MaxFilePathLengthParameters?: $<MaxFilePathLengthParametersFields & $Directives>
    MaxFileSizeParameters?: $<MaxFileSizeParametersFields & $Directives>
    MergeQueueParameters?: $<MergeQueueParametersFields & $Directives>
    PullRequestParameters?: $<PullRequestParametersFields & $Directives>
    RequiredDeploymentsParameters?: $<RequiredDeploymentsParametersFields & $Directives>
    RequiredStatusChecksParameters?: $<RequiredStatusChecksParametersFields & $Directives>
    TagNamePatternParameters?: $<TagNamePatternParametersFields & $Directives>
    UpdateParameters?: $<UpdateParametersFields & $Directives>
    WorkflowsParameters?: $<WorkflowsParametersFields & $Directives>
  }
}
export interface RuleSourcePossibleTypes {
  __typename?: $Pick
  $on?: {
    Enterprise?: $<EnterpriseFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
  }
}
export interface SearchResultItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    App?: $<AppFields & $Directives>
    Discussion?: $<DiscussionFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    MarketplaceListing?: $<MarketplaceListingFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface SponsorableItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface SponsorablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface SponsorPossibleTypes {
  __typename?: $Pick
  $on?: {
    Organization?: $<OrganizationFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface SponsorsListingFeatureableItemPossibleTypes {
  __typename?: $Pick
  $on?: {
    Repository?: $<RepositoryFields & $Directives>
    User?: $<UserFields & $Directives>
  }
}
export interface StarrablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Gist?: $<GistFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    Topic?: $<TopicFields & $Directives>
  }
}
export interface StatusCheckRollupContextPossibleTypes {
  __typename?: $Pick
  $on?: {
    CheckRun?: $<CheckRunFields & $Directives>
    StatusContext?: $<StatusContextFields & $Directives>
  }
}
export interface SubscribablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Commit?: $<CommitFields & $Directives>
    Discussion?: $<DiscussionFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    Team?: $<TeamFields & $Directives>
    TeamDiscussion?: $<TeamDiscussionFields & $Directives>
  }
}
export interface UniformResourceLocatablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Bot?: $<BotFields & $Directives>
    CheckRun?: $<CheckRunFields & $Directives>
    ClosedEvent?: $<ClosedEventFields & $Directives>
    Commit?: $<CommitFields & $Directives>
    ConvertToDraftEvent?: $<ConvertToDraftEventFields & $Directives>
    CrossReferencedEvent?: $<CrossReferencedEventFields & $Directives>
    Gist?: $<GistFields & $Directives>
    Issue?: $<IssueFields & $Directives>
    Mannequin?: $<MannequinFields & $Directives>
    MergedEvent?: $<MergedEventFields & $Directives>
    Milestone?: $<MilestoneFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
    PullRequest?: $<PullRequestFields & $Directives>
    PullRequestCommit?: $<PullRequestCommitFields & $Directives>
    ReadyForReviewEvent?: $<ReadyForReviewEventFields & $Directives>
    Release?: $<ReleaseFields & $Directives>
    Repository?: $<RepositoryFields & $Directives>
    RepositoryTopic?: $<RepositoryTopicFields & $Directives>
    ReviewDismissedEvent?: $<ReviewDismissedEventFields & $Directives>
    TeamDiscussion?: $<TeamDiscussionFields & $Directives>
    TeamDiscussionComment?: $<TeamDiscussionCommentFields & $Directives>
    User?: $<UserFields & $Directives>
    Workflow?: $<WorkflowFields & $Directives>
    WorkflowRun?: $<WorkflowRunFields & $Directives>
    WorkflowRunFile?: $<WorkflowRunFileFields & $Directives>
  }
}
export interface UserListItemsPossibleTypes {
  __typename?: $Pick
  $on?: {
    Repository?: $<RepositoryFields & $Directives>
  }
}
export interface VerifiableDomainOwnerPossibleTypes {
  __typename?: $Pick
  $on?: {
    Enterprise?: $<EnterpriseFields & $Directives>
    Organization?: $<OrganizationFields & $Directives>
  }
}
export interface VotablePossibleTypes {
  __typename?: $Pick
  $on?: {
    Discussion?: $<DiscussionFields & $Directives>
    DiscussionComment?: $<DiscussionCommentFields & $Directives>
  }
}
export interface AbortQueuedMigrationsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Did the operation succeed? */
  success?: $Pick
}
export interface AbortRepositoryMigrationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Did the operation succeed? */
  success?: $Pick
}
export interface AcceptEnterpriseAdministratorInvitationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The invitation that was accepted. */
  invitation?: $<EnterpriseAdministratorInvitationFields & $Options>
  /** A message confirming the result of accepting an administrator invitation. */
  message?: $Pick
}
export interface AcceptEnterpriseMemberInvitationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The invitation that was accepted. */
  invitation?: $<EnterpriseMemberInvitationFields & $Options>
  /** A message confirming the result of accepting an unaffiliated member invitation. */
  message?: $Pick
}
export interface AcceptTopicSuggestionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The accepted topic.
   *
   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC. */
  topic?: $<TopicFields & $Options>
}
export interface AccessUserNamespaceRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The time that repository access expires at */
  expiresAt?: $Pick
  /** The repository that is temporarily accessible. */
  repository?: $<RepositoryFields & $Options>
}
export interface ActorFields {
  __typename?: $Pick
  /** A URL pointing to the actor's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: ActorAvatarUrlArgs }>
  /** The username of the actor. */
  login?: $Pick
  /** The HTTP path for this actor. */
  resourcePath?: $Pick
  /** The HTTP URL for this actor. */
  url?: $Pick
}
export interface ActorLocationFields {
  __typename?: $Pick
  /** City */
  city?: $Pick
  /** Country name */
  country?: $Pick
  /** Country code */
  countryCode?: $Pick
  /** Region name */
  region?: $Pick
  /** Region or state code */
  regionCode?: $Pick
}
export interface AddAssigneesToAssignablePayloadFields {
  __typename?: $Pick
  /** The item that was assigned. */
  assignable?: $<AssignableFields & AssignablePossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface AddCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The edge from the subject's comment connection. */
  commentEdge?: $<IssueCommentEdgeFields & $Options>
  /** The subject */
  subject?: $<NodeFields & NodePossibleTypes & $Options>
  /** The edge from the subject's timeline connection. */
  timelineEdge?: $<IssueTimelineItemEdgeFields & $Options>
}
export interface AddDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created discussion comment. */
  comment?: $<DiscussionCommentFields & $Options>
}
export interface AddDiscussionPollVotePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The poll option that a vote was added to. */
  pollOption?: $<DiscussionPollOptionFields & $Options>
}
export interface AddedToMergeQueueEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who added this Pull Request to the merge queue */
  enqueuer?: $<UserFields & $Options>
  /** The Node ID of the AddedToMergeQueueEvent object */
  id?: $Pick
  /** The merge queue where this pull request was added to. */
  mergeQueue?: $<MergeQueueFields & $Options>
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AddedToProjectEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the AddedToProjectEvent object */
  id?: $Pick
  /** Project referenced by event. */
  project?: $<ProjectFields & $Options>
  /** Project card referenced by this project event. */
  projectCard?: $<ProjectCardFields & $Options>
  /** Column name referenced by this project event. */
  projectColumnName?: $Pick
}
export interface AddEnterpriseOrganizationMemberPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The users who were added to the organization. */
  users?: $<UserFields & $Options>
}
export interface AddEnterpriseSupportEntitlementPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of adding the support entitlement. */
  message?: $Pick
}
export interface AddLabelsToLabelablePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item that was labeled. */
  labelable?: $<LabelableFields & LabelablePossibleTypes & $Options>
}
export interface AddProjectCardPayloadFields {
  __typename?: $Pick
  /** The edge from the ProjectColumn's card connection. */
  cardEdge?: $<ProjectCardEdgeFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The ProjectColumn */
  projectColumn?: $<ProjectColumnFields & $Options>
}
export interface AddProjectColumnPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The edge from the project's column connection. */
  columnEdge?: $<ProjectColumnEdgeFields & $Options>
  /** The project */
  project?: $<ProjectFields & $Options>
}
export interface AddProjectV2DraftIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The draft issue added to the project. */
  projectItem?: $<ProjectV2ItemFields & $Options>
}
export interface AddProjectV2ItemByIdPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item added to the project. */
  item?: $<ProjectV2ItemFields & $Options>
}
export interface AddPullRequestReviewCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created comment. */
  comment?: $<PullRequestReviewCommentFields & $Options>
  /** The edge from the review's comment connection. */
  commentEdge?: $<PullRequestReviewCommentEdgeFields & $Options>
}
export interface AddPullRequestReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created pull request review. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
  /** The edge from the pull request's review connection. */
  reviewEdge?: $<PullRequestReviewEdgeFields & $Options>
}
export interface AddPullRequestReviewThreadPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created thread. */
  thread?: $<PullRequestReviewThreadFields & $Options>
}
export interface AddPullRequestReviewThreadReplyPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created reply. */
  comment?: $<PullRequestReviewCommentFields & $Options>
}
export interface AddReactionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The reaction object. */
  reaction?: $<ReactionFields & $Options>
  /** The reaction groups for the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** The reactable subject. */
  subject?: $<ReactableFields & ReactablePossibleTypes & $Options>
}
export interface AddStarPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The starrable. */
  starrable?: $<StarrableFields & StarrablePossibleTypes & $Options>
}
export interface AddSubIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The parent issue that the sub-issue was added to. */
  issue?: $<IssueFields & $Options>
  /** The sub-issue of the parent. */
  subIssue?: $<IssueFields & $Options>
}
export interface AddUpvotePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The votable subject. */
  subject?: $<VotableFields & VotablePossibleTypes & $Options>
}
export interface AddVerifiableDomainPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The verifiable domain that was added. */
  domain?: $<VerifiableDomainFields & $Options>
}
export interface AnnouncementBannerFields {
  __typename?: $Pick
  /** The date the announcement was created */
  createdAt?: $Pick
  /** The expiration date of the announcement, if any */
  expiresAt?: $Pick
  /** Whether the announcement can be dismissed by the user */
  isUserDismissible?: $Pick
  /** The text of the announcement */
  message?: $Pick
}
export interface AnnouncementBannerIFields {
  __typename?: $Pick
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: $Pick
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: $Pick
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: $Pick
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: $Pick
}
export interface AppFields {
  __typename?: $Pick
  /** The client ID of the app. */
  clientId?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The description of the app. */
  description?: $Pick
  /** The Node ID of the App object */
  id?: $Pick
  /** The IP addresses of the app. */
  ipAllowListEntries?: $<IpAllowListEntryConnectionFields & { $args?: AppIpAllowListEntriesArgs } & $Options>
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor?: $Pick
  /** A URL pointing to the app's logo. */
  logoUrl?: $Scalar | $<$Options & { $args?: AppLogoUrlArgs }>
  /** The name of the app. */
  name?: $Pick
  /** A slug based on the name of the app for use in URLs. */
  slug?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The URL to the app's homepage. */
  url?: $Pick
}
export interface ApproveDeploymentsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The affected deployments. */
  deployments?: $<DeploymentFields & $Options>
}
export interface ApproveVerifiableDomainPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The verifiable domain that was approved. */
  domain?: $<VerifiableDomainFields & $Options>
}
export interface ArchiveProjectV2ItemPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item archived from the project. */
  item?: $<ProjectV2ItemFields & $Options>
}
export interface ArchiveRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository that was marked as archived. */
  repository?: $<RepositoryFields & $Options>
}
export interface AssignableFields {
  __typename?: $Pick
  /** A list of Users assigned to this object. */
  assignees?: $<UserConnectionFields & { $args?: AssignableAssigneesArgs } & $Options>
}
export interface AssignedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the assignable associated with the event. */
  assignable?: $<AssignableFields & AssignablePossibleTypes & $Options>
  /** Identifies the user or mannequin that was assigned. */
  assignee?: $<AssigneePossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the AssignedEvent object */
  id?: $Pick
  /** Identifies the user who was assigned.
   *
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC. */
  user?: $<UserFields & $Options>
}
export interface AuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface AutomaticBaseChangeFailedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the AutomaticBaseChangeFailedEvent object */
  id?: $Pick
  /** The new base for this PR */
  newBase?: $Pick
  /** The old base for this PR */
  oldBase?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AutomaticBaseChangeSucceededEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the AutomaticBaseChangeSucceededEvent object */
  id?: $Pick
  /** The new base for this PR */
  newBase?: $Pick
  /** The old base for this PR */
  oldBase?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AutoMergeDisabledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who disabled auto-merge for this Pull Request */
  disabler?: $<UserFields & $Options>
  /** The Node ID of the AutoMergeDisabledEvent object */
  id?: $Pick
  /** PullRequest referenced by event */
  pullRequest?: $<PullRequestFields & $Options>
  /** The reason auto-merge was disabled */
  reason?: $Pick
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode?: $Pick
}
export interface AutoMergeEnabledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who enabled auto-merge for this Pull Request */
  enabler?: $<UserFields & $Options>
  /** The Node ID of the AutoMergeEnabledEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AutoMergeRequestFields {
  __typename?: $Pick
  /** The email address of the author of this auto-merge request. */
  authorEmail?: $Pick
  /** The commit message of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging. */
  commitBody?: $Pick
  /** The commit title of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging */
  commitHeadline?: $Pick
  /** When was this auto-merge request was enabled. */
  enabledAt?: $Pick
  /** The actor who created the auto-merge request. */
  enabledBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The merge method of the auto-merge request. If a merge queue is required by
   * the base branch, this value will be set by the merge queue when merging. */
  mergeMethod?: $Pick
  /** The pull request that this auto-merge request is set against. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AutoRebaseEnabledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler?: $<UserFields & $Options>
  /** The Node ID of the AutoRebaseEnabledEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface AutoSquashEnabledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler?: $<UserFields & $Options>
  /** The Node ID of the AutoSquashEnabledEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface BaseRefChangedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the BaseRefChangedEvent object */
  id?: $Pick
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface BaseRefDeletedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the BaseRefDeletedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface BaseRefForcePushedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit?: $<CommitFields & $Options>
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the BaseRefForcePushedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref?: $<RefFields & $Options>
}
export interface BlameFields {
  __typename?: $Pick
  /** The list of ranges from a Git blame. */
  ranges?: $<BlameRangeFields & $Options>
}
export interface BlameRangeFields {
  __typename?: $Pick
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is
   * calculated as a 2-quantile and determines the length of distance between the
   * median age of all the changes in the file and the recency of the current
   * range's change. */
  age?: $Pick
  /** Identifies the line author */
  commit?: $<CommitFields & $Options>
  /** The ending line for the range */
  endingLine?: $Pick
  /** The starting line for the range */
  startingLine?: $Pick
}
export interface BlobFields {
  __typename?: $Pick
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: $Pick
  /** Byte size of Blob object */
  byteSize?: $Pick
  /** The HTTP path for this Git object */
  commitResourcePath?: $Pick
  /** The HTTP URL for this Git object */
  commitUrl?: $Pick
  /** The Node ID of the Blob object */
  id?: $Pick
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  isBinary?: $Pick
  /** Indicates whether the contents is truncated */
  isTruncated?: $Pick
  /** The Git object ID */
  oid?: $Pick
  /** The Repository the Git object belongs to */
  repository?: $<RepositoryFields & $Options>
  /** UTF8 text data or null if the Blob is binary */
  text?: $Pick
}
export interface BotFields {
  __typename?: $Pick
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: BotAvatarUrlArgs }>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Bot object */
  id?: $Pick
  /** The username of the actor. */
  login?: $Pick
  /** The HTTP path for this bot */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this bot */
  url?: $Pick
}
export interface BranchNamePatternParametersFields {
  __typename?: $Pick
  /** How this rule will appear to users. */
  name?: $Pick
  /** If true, the rule will fail if the pattern matches. */
  negate?: $Pick
  /** The operator to use for matching. */
  operator?: $Pick
  /** The pattern to match with. */
  pattern?: $Pick
}
export interface BranchProtectionRuleConflictConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<BranchProtectionRuleConflictEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<BranchProtectionRuleConflictFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface BranchProtectionRuleConflictEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<BranchProtectionRuleConflictFields & $Options>
}
export interface BranchProtectionRuleConflictFields {
  __typename?: $Pick
  /** Identifies the branch protection rule. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** Identifies the branch ref that has conflicting rules */
  ref?: $<RefFields & $Options>
}
export interface BranchProtectionRuleConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<BranchProtectionRuleEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<BranchProtectionRuleFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface BranchProtectionRuleEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<BranchProtectionRuleFields & $Options>
}
export interface BranchProtectionRuleFields {
  __typename?: $Pick
  /** Can this branch be deleted. */
  allowsDeletions?: $Pick
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: $Pick
  /** Is branch creation a protected operation. */
  blocksCreations?: $Pick
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts?: $<BranchProtectionRuleConflictConnectionFields & { $args?: BranchProtectionRuleBranchProtectionRuleConflictsArgs } & $Options>
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances?: $<BypassForcePushAllowanceConnectionFields & { $args?: BranchProtectionRuleBypassForcePushAllowancesArgs } & $Options>
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances?: $<BypassPullRequestAllowanceConnectionFields & { $args?: BranchProtectionRuleBypassPullRequestAllowancesArgs } & $Options>
  /** The actor who created this branch protection rule. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: $Pick
  /** The Node ID of the BranchProtectionRule object */
  id?: $Pick
  /** Can admins override branch protection. */
  isAdminEnforced?: $Pick
  /** Whether users can pull changes from upstream when the branch is locked. Set to
   * `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: $Pick
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: $Pick
  /** Repository refs that are protected by this rule */
  matchingRefs?: $<RefConnectionFields & { $args?: BranchProtectionRuleMatchingRefsArgs } & $Options>
  /** Identifies the protection rule pattern. */
  pattern?: $Pick
  /** A list push allowances for this branch protection rule. */
  pushAllowances?: $<PushAllowanceConnectionFields & { $args?: BranchProtectionRulePushAllowancesArgs } & $Options>
  /** The repository associated with this branch protection rule. */
  repository?: $<RepositoryFields & $Options>
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: $Pick
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: $Pick
  /** List of required deployment environments that must be deployed successfully to update matching branches */
  requiredDeploymentEnvironments?: $Pick
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: $Pick
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks?: $<RequiredStatusCheckDescriptionFields & $Options>
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: $Pick
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: $Pick
  /** Are commits required to be signed. */
  requiresCommitSignatures?: $Pick
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: $Pick
  /** Does this branch require deployment to specific environments before merging */
  requiresDeployments?: $Pick
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: $Pick
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: $Pick
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: $Pick
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: $Pick
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: $Pick
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances?: $<ReviewDismissalAllowanceConnectionFields & { $args?: BranchProtectionRuleReviewDismissalAllowancesArgs } & $Options>
}
export interface BypassForcePushAllowanceConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<BypassForcePushAllowanceEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<BypassForcePushAllowanceFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface BypassForcePushAllowanceEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<BypassForcePushAllowanceFields & $Options>
}
export interface BypassForcePushAllowanceFields {
  __typename?: $Pick
  /** The actor that can force push. */
  actor?: $<BranchActorAllowanceActorPossibleTypes & $Options>
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** The Node ID of the BypassForcePushAllowance object */
  id?: $Pick
}
export interface BypassPullRequestAllowanceConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<BypassPullRequestAllowanceEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<BypassPullRequestAllowanceFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface BypassPullRequestAllowanceEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<BypassPullRequestAllowanceFields & $Options>
}
export interface BypassPullRequestAllowanceFields {
  __typename?: $Pick
  /** The actor that can bypass. */
  actor?: $<BranchActorAllowanceActorPossibleTypes & $Options>
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** The Node ID of the BypassPullRequestAllowance object */
  id?: $Pick
}
export interface CancelEnterpriseAdminInvitationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The invitation that was canceled. */
  invitation?: $<EnterpriseAdministratorInvitationFields & $Options>
  /** A message confirming the result of canceling an administrator invitation. */
  message?: $Pick
}
export interface CancelEnterpriseMemberInvitationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The invitation that was canceled. */
  invitation?: $<EnterpriseMemberInvitationFields & $Options>
  /** A message confirming the result of canceling an member invitation. */
  message?: $Pick
}
export interface CancelSponsorshipPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier?: $<SponsorsTierFields & $Options>
}
export interface ChangeUserStatusPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Your updated status. */
  status?: $<UserStatusFields & $Options>
}
export interface CheckAnnotationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CheckAnnotationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CheckAnnotationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CheckAnnotationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CheckAnnotationFields & $Options>
}
export interface CheckAnnotationFields {
  __typename?: $Pick
  /** The annotation's severity level. */
  annotationLevel?: $Pick
  /** The path to the file that this annotation was made on. */
  blobUrl?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The position of this annotation. */
  location?: $<CheckAnnotationSpanFields & $Options>
  /** The annotation's message. */
  message?: $Pick
  /** The path that this annotation was made on. */
  path?: $Pick
  /** Additional information about the annotation. */
  rawDetails?: $Pick
  /** The annotation's title */
  title?: $Pick
}
export interface CheckAnnotationPositionFields {
  __typename?: $Pick
  /** Column number (1 indexed). */
  column?: $Pick
  /** Line number (1 indexed). */
  line?: $Pick
}
export interface CheckAnnotationSpanFields {
  __typename?: $Pick
  /** End position (inclusive). */
  end?: $<CheckAnnotationPositionFields & $Options>
  /** Start position (inclusive). */
  start?: $<CheckAnnotationPositionFields & $Options>
}
export interface CheckRunConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CheckRunEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CheckRunFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CheckRunEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CheckRunFields & $Options>
}
export interface CheckRunFields {
  __typename?: $Pick
  /** The check run's annotations */
  annotations?: $<CheckAnnotationConnectionFields & { $args?: CheckRunAnnotationsArgs } & $Options>
  /** The check suite that this run is a part of. */
  checkSuite?: $<CheckSuiteFields & $Options>
  /** Identifies the date and time when the check run was completed. */
  completedAt?: $Pick
  /** The conclusion of the check run. */
  conclusion?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The corresponding deployment for this job, if any */
  deployment?: $<DeploymentFields & $Options>
  /** The URL from which to find full details of the check run on the integrator's site. */
  detailsUrl?: $Pick
  /** A reference for the check run on the integrator's system. */
  externalId?: $Pick
  /** The Node ID of the CheckRun object */
  id?: $Pick
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?: $Scalar | $<$Options & { $args?: CheckRunIsRequiredArgs }>
  /** The name of the check for this check run. */
  name?: $Pick
  /** Information about a pending deployment, if any, in this check run */
  pendingDeploymentRequest?: $<DeploymentRequestFields & $Options>
  /** The permalink to the check run summary. */
  permalink?: $Pick
  /** The repository associated with this check run. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this check run. */
  resourcePath?: $Pick
  /** Identifies the date and time when the check run was started. */
  startedAt?: $Pick
  /** The current status of the check run. */
  status?: $Pick
  /** The check run's steps */
  steps?: $<CheckStepConnectionFields & { $args?: CheckRunStepsArgs } & $Options>
  /** A string representing the check run's summary */
  summary?: $Pick
  /** A string representing the check run's text */
  text?: $Pick
  /** A string representing the check run */
  title?: $Pick
  /** The HTTP URL for this check run. */
  url?: $Pick
}
export interface CheckRunStateCountFields {
  __typename?: $Pick
  /** The number of check runs with this state. */
  count?: $Pick
  /** The state of a check run. */
  state?: $Pick
}
export interface CheckStepConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CheckStepEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CheckStepFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CheckStepEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CheckStepFields & $Options>
}
export interface CheckStepFields {
  __typename?: $Pick
  /** Identifies the date and time when the check step was completed. */
  completedAt?: $Pick
  /** The conclusion of the check step. */
  conclusion?: $Pick
  /** A reference for the check step on the integrator's system. */
  externalId?: $Pick
  /** The step's name. */
  name?: $Pick
  /** The index of the step in the list of steps of the parent check run. */
  number?: $Pick
  /** Number of seconds to completion. */
  secondsToCompletion?: $Pick
  /** Identifies the date and time when the check step was started. */
  startedAt?: $Pick
  /** The current status of the check step. */
  status?: $Pick
}
export interface CheckSuiteConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CheckSuiteEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CheckSuiteFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CheckSuiteEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CheckSuiteFields & $Options>
}
export interface CheckSuiteFields {
  __typename?: $Pick
  /** The GitHub App which created this check suite. */
  app?: $<AppFields & $Options>
  /** The name of the branch for this check suite. */
  branch?: $<RefFields & $Options>
  /** The check runs associated with a check suite. */
  checkRuns?: $<CheckRunConnectionFields & { $args?: CheckSuiteCheckRunsArgs } & $Options>
  /** The commit for this check suite */
  commit?: $<CommitFields & $Options>
  /** The conclusion of this check suite. */
  conclusion?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who triggered the check suite. */
  creator?: $<UserFields & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the CheckSuite object */
  id?: $Pick
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests?: $<PullRequestConnectionFields & { $args?: CheckSuiteMatchingPullRequestsArgs } & $Options>
  /** The push that triggered this check suite. */
  push?: $<PushFields & $Options>
  /** The repository associated with this check suite. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this check suite */
  resourcePath?: $Pick
  /** The status of this check suite. */
  status?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this check suite */
  url?: $Pick
  /** The workflow run associated with this check suite. */
  workflowRun?: $<WorkflowRunFields & $Options>
}
export interface ClearLabelsFromLabelablePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item that was unlabeled. */
  labelable?: $<LabelableFields & LabelablePossibleTypes & $Options>
}
export interface ClearProjectV2ItemFieldValuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated item. */
  projectV2Item?: $<ProjectV2ItemFields & $Options>
}
export interface CloneProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId?: $Pick
  /** The new cloned project. */
  project?: $<ProjectFields & $Options>
}
export interface CloneTemplateRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface ClosableFields {
  __typename?: $Pick
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
}
export interface ClosedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Object that was closed. */
  closable?: $<ClosableFields & ClosablePossibleTypes & $Options>
  /** Object which triggered the creation of this event. */
  closer?: $<CloserPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ClosedEvent object */
  id?: $Pick
  /** The HTTP path for this closed event. */
  resourcePath?: $Pick
  /** The reason the issue state was changed to closed. */
  stateReason?: $Pick
  /** The HTTP URL for this closed event. */
  url?: $Pick
}
export interface CloseDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that was closed. */
  discussion?: $<DiscussionFields & $Options>
}
export interface CloseIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue that was closed. */
  issue?: $<IssueFields & $Options>
}
export interface ClosePullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that was closed. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface CodeOfConductFields {
  __typename?: $Pick
  /** The body of the Code of Conduct */
  body?: $Pick
  /** The Node ID of the CodeOfConduct object */
  id?: $Pick
  /** The key for the Code of Conduct */
  key?: $Pick
  /** The formal name of the Code of Conduct */
  name?: $Pick
  /** The HTTP path for this Code of Conduct */
  resourcePath?: $Pick
  /** The HTTP URL for this Code of Conduct */
  url?: $Pick
}
export interface CodeScanningParametersFields {
  __typename?: $Pick
  /** Tools that must provide code scanning results for this rule to pass. */
  codeScanningTools?: $<CodeScanningToolFields & $Options>
}
export interface CodeScanningToolFields {
  __typename?: $Pick
  /** The severity level at which code scanning results that raise alerts block a
   * reference update. For more information on alert severity levels, see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  alertsThreshold?: $Pick
  /** The severity level at which code scanning results that raise security alerts
   * block a reference update. For more information on security severity levels,
   * see "[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  securityAlertsThreshold?: $Pick
  /** The name of a code scanning tool */
  tool?: $Pick
}
export interface CommentDeletedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The user who authored the deleted comment. */
  deletedCommentAuthor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the CommentDeletedEvent object */
  id?: $Pick
}
export interface CommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the Comment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: CommentUserContentEditsArgs } & $Options>
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface CommitAuthorEmailPatternParametersFields {
  __typename?: $Pick
  /** How this rule will appear to users. */
  name?: $Pick
  /** If true, the rule will fail if the pattern matches. */
  negate?: $Pick
  /** The operator to use for matching. */
  operator?: $Pick
  /** The pattern to match with. */
  pattern?: $Pick
}
export interface CommitCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CommitCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CommitCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CommitCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CommitCommentFields & $Options>
}
export interface CommitCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** Identifies the comment body. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the commit associated with the comment, if the commit exists. */
  commit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the CommitComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Identifies the file path associated with the comment. */
  path?: $Pick
  /** Identifies the line position associated with the comment. */
  position?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: CommitCommentReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path permalink for this commit comment. */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL permalink for this commit comment. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: CommitCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface CommitCommentThreadFields {
  __typename?: $Pick
  /** The comments that exist in this thread. */
  comments?: $<CommitCommentConnectionFields & { $args?: CommitCommentThreadCommentsArgs } & $Options>
  /** The commit the comments were made on. */
  commit?: $<CommitFields & $Options>
  /** The Node ID of the CommitCommentThread object */
  id?: $Pick
  /** The file the comments were made on. */
  path?: $Pick
  /** The position in the diff for the commit that the comment was made on. */
  position?: $Pick
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
}
export interface CommitConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CommitEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CommitFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CommitContributionsByRepositoryFields {
  __typename?: $Pick
  /** The commit contributions, each representing a day. */
  contributions?: $<CreatedCommitContributionConnectionFields & { $args?: CommitContributionsByRepositoryContributionsArgs } & $Options>
  /** The repository in which the commits were made. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath?: $Pick
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url?: $Pick
}
export interface CommitEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CommitFields & $Options>
}
export interface CommitFields {
  __typename?: $Pick
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: $Pick
  /** The number of additions in this commit. */
  additions?: $Pick
  /** The merged Pull Request that introduced the commit to the repository. If the
   * commit is not present in the default branch, additionally returns open Pull
   * Requests associated with the commit */
  associatedPullRequests?: $<PullRequestConnectionFields & { $args?: CommitAssociatedPullRequestsArgs } & $Options>
  /** Authorship details of the commit. */
  author?: $<GitActorFields & $Options>
  /** Check if the committer and the author match. */
  authoredByCommitter?: $Pick
  /** The datetime when this commit was authored. */
  authoredDate?: $Pick
  /** The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first. */
  authors?: $<GitActorConnectionFields & { $args?: CommitAuthorsArgs } & $Options>
  /** Fetches `git blame` information. */
  blame?: $<BlameFields & { $args: CommitBlameArgs } & $Options>
  /** We recommend using the `changedFilesIfAvailable` field instead of
   * `changedFiles`, as `changedFiles` will cause your request to return an error
   * if GitHub is unable to calculate the number of changed files.
   *
   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC. */
  changedFiles?: $Pick
  /** The number of changed files in this commit. If GitHub is unable to calculate
   * the number of changed files (for example due to a timeout), this will return
   * `null`. We recommend using this field instead of `changedFiles`. */
  changedFilesIfAvailable?: $Pick
  /** The check suites associated with a commit. */
  checkSuites?: $<CheckSuiteConnectionFields & { $args?: CommitCheckSuitesArgs } & $Options>
  /** Comments made on the commit. */
  comments?: $<CommitCommentConnectionFields & { $args?: CommitCommentsArgs } & $Options>
  /** The HTTP path for this Git object */
  commitResourcePath?: $Pick
  /** The HTTP URL for this Git object */
  commitUrl?: $Pick
  /** The datetime when this commit was committed. */
  committedDate?: $Pick
  /** Check if committed via GitHub web UI. */
  committedViaWeb?: $Pick
  /** Committer details of the commit. */
  committer?: $<GitActorFields & $Options>
  /** The number of deletions in this commit. */
  deletions?: $Pick
  /** The deployments associated with a commit. */
  deployments?: $<DeploymentConnectionFields & { $args?: CommitDeploymentsArgs } & $Options>
  /** The tree entry representing the file located at the given path. */
  file?: $<TreeEntryFields & { $args: CommitFileArgs } & $Options>
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  history?: $<CommitHistoryConnectionFields & { $args?: CommitHistoryArgs } & $Options>
  /** The Node ID of the Commit object */
  id?: $Pick
  /** The Git commit message */
  message?: $Pick
  /** The Git commit message body */
  messageBody?: $Pick
  /** The commit message body rendered to HTML. */
  messageBodyHTML?: $Pick
  /** The Git commit message headline */
  messageHeadline?: $Pick
  /** The commit message headline rendered to HTML. */
  messageHeadlineHTML?: $Pick
  /** The Git object ID */
  oid?: $Pick
  /** The organization this commit was made on behalf of. */
  onBehalfOf?: $<OrganizationFields & $Options>
  /** The parents of a commit. */
  parents?: $<CommitConnectionFields & { $args?: CommitParentsArgs } & $Options>
  /** The datetime when this commit was pushed.
   *
   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC. */
  pushedDate?: $Pick
  /** The Repository this commit belongs to */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this commit */
  resourcePath?: $Pick
  /** Commit signing information, if present. */
  signature?: $<GitSignatureFields & GitSignaturePossibleTypes & $Options>
  /** Status information for this commit */
  status?: $<StatusFields & $Options>
  /** Check and Status rollup information for this commit. */
  statusCheckRollup?: $<StatusCheckRollupFields & $Options>
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  submodules?: $<SubmoduleConnectionFields & { $args?: CommitSubmodulesArgs } & $Options>
  /** Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes. */
  tarballUrl?: $Pick
  /** Commit's root Tree */
  tree?: $<TreeFields & $Options>
  /** The HTTP path for the tree of this commit */
  treeResourcePath?: $Pick
  /** The HTTP URL for the tree of this commit */
  treeUrl?: $Pick
  /** The HTTP URL for this commit */
  url?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
  /** Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes. */
  zipballUrl?: $Pick
}
export interface CommitHistoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CommitEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CommitFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CommitMessagePatternParametersFields {
  __typename?: $Pick
  /** How this rule will appear to users. */
  name?: $Pick
  /** If true, the rule will fail if the pattern matches. */
  negate?: $Pick
  /** The operator to use for matching. */
  operator?: $Pick
  /** The pattern to match with. */
  pattern?: $Pick
}
export interface CommitterEmailPatternParametersFields {
  __typename?: $Pick
  /** How this rule will appear to users. */
  name?: $Pick
  /** If true, the rule will fail if the pattern matches. */
  negate?: $Pick
  /** The operator to use for matching. */
  operator?: $Pick
  /** The pattern to match with. */
  pattern?: $Pick
}
export interface ComparisonCommitConnectionFields {
  __typename?: $Pick
  /** The total count of authors and co-authors across all commits. */
  authorCount?: $Pick
  /** A list of edges. */
  edges?: $<CommitEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CommitFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ComparisonFields {
  __typename?: $Pick
  /** The number of commits ahead of the base branch. */
  aheadBy?: $Pick
  /** The base revision of this comparison. */
  baseTarget?: $<GitObjectFields & GitObjectPossibleTypes & $Options>
  /** The number of commits behind the base branch. */
  behindBy?: $Pick
  /** The commits which compose this comparison. */
  commits?: $<ComparisonCommitConnectionFields & { $args?: ComparisonCommitsArgs } & $Options>
  /** The head revision of this comparison. */
  headTarget?: $<GitObjectFields & GitObjectPossibleTypes & $Options>
  /** The Node ID of the Comparison object */
  id?: $Pick
  /** The status of this comparison. */
  status?: $Pick
}
export interface ConnectedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ConnectedEvent object */
  id?: $Pick
  /** Reference originated in a different repository. */
  isCrossRepository?: $Pick
  /** Issue or pull request that made the reference. */
  source?: $<ReferencedSubjectPossibleTypes & $Options>
  /** Issue or pull request which was connected. */
  subject?: $<ReferencedSubjectPossibleTypes & $Options>
}
export interface ContributingGuidelinesFields {
  __typename?: $Pick
  /** The body of the Contributing Guidelines. */
  body?: $Pick
  /** The HTTP path for the Contributing Guidelines. */
  resourcePath?: $Pick
  /** The HTTP URL for the Contributing Guidelines. */
  url?: $Pick
}
export interface ContributionCalendarDayFields {
  __typename?: $Pick
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color?: $Pick
  /** How many contributions were made by the user on this day. */
  contributionCount?: $Pick
  /** Indication of contributions, relative to other days. Can be used to indicate
   * which color to represent this day on a calendar. */
  contributionLevel?: $Pick
  /** The day this square represents. */
  date?: $Pick
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday?: $Pick
}
export interface ContributionCalendarFields {
  __typename?: $Pick
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors?: $Pick
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween?: $Pick
  /** A list of the months of contributions in this calendar. */
  months?: $<ContributionCalendarMonthFields & $Options>
  /** The count of total contributions in the calendar. */
  totalContributions?: $Pick
  /** A list of the weeks of contributions in this calendar. */
  weeks?: $<ContributionCalendarWeekFields & $Options>
}
export interface ContributionCalendarMonthFields {
  __typename?: $Pick
  /** The date of the first day of this month. */
  firstDay?: $Pick
  /** The name of the month. */
  name?: $Pick
  /** How many weeks started in this month. */
  totalWeeks?: $Pick
  /** The year the month occurred in. */
  year?: $Pick
}
export interface ContributionCalendarWeekFields {
  __typename?: $Pick
  /** The days of contributions in this week. */
  contributionDays?: $<ContributionCalendarDayFields & $Options>
  /** The date of the earliest square in this week. */
  firstDay?: $Pick
}
export interface ContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface ContributionsCollectionFields {
  __typename?: $Pick
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository?: $<CommitContributionsByRepositoryFields & { $args?: ContributionsCollectionCommitContributionsByRepositoryArgs } & $Options>
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar?: $<ContributionCalendarFields & $Options>
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears?: $Pick
  /** Determine if this collection's time span ends in the current month. */
  doesEndInCurrentMonth?: $Pick
  /** The date of the first restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate?: $Pick
  /** The ending date and time of this collection. */
  endedAt?: $Pick
  /** The first issue the user opened on GitHub. This will be null if that issue was
   * opened outside the collection's time range and ignoreTimeRange is false. If
   * the issue is not visible but the user has opted to show private contributions,
   * a RestrictedContribution will be returned. */
  firstIssueContribution?: $<CreatedIssueOrRestrictedContributionPossibleTypes & $Options>
  /** The first pull request the user opened on GitHub. This will be null if that
   * pull request was opened outside the collection's time range and
   * ignoreTimeRange is not true. If the pull request is not visible but the user
   * has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution?: $<CreatedPullRequestOrRestrictedContributionPossibleTypes & $Options>
  /** The first repository the user created on GitHub. This will be null if that
   * first repository was created outside the collection's time range and
   * ignoreTimeRange is false. If the repository is not visible, then a
   * RestrictedContribution is returned. */
  firstRepositoryContribution?: $<CreatedRepositoryOrRestrictedContributionPossibleTypes & $Options>
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast?: $Pick
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions?: $Pick
  /** Determine if the user made any contributions in this time frame whose details
   * are not visible because they were made in a private repository. Can only be
   * true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions?: $Pick
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay?: $Pick
  /** A list of issues the user opened. */
  issueContributions?: $<CreatedIssueContributionConnectionFields & { $args?: ContributionsCollectionIssueContributionsArgs } & $Options>
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository?: $<IssueContributionsByRepositoryFields & { $args?: ContributionsCollectionIssueContributionsByRepositoryArgs } & $Options>
  /** When the user signed up for GitHub. This will be null if that sign up date
   * falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution?: $<JoinedGitHubContributionFields & $Options>
  /** The date of the most recent restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate?: $Pick
  /** When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity. */
  mostRecentCollectionWithActivity?: $<ContributionsCollectionFields & $Options>
  /** Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions. */
  mostRecentCollectionWithoutActivity?: $<ContributionsCollectionFields & $Options>
  /** The issue the user opened on GitHub that received the most comments in the specified
   * time frame. */
  popularIssueContribution?: $<CreatedIssueContributionFields & $Options>
  /** The pull request the user opened on GitHub that received the most comments in the
   * specified time frame. */
  popularPullRequestContribution?: $<CreatedPullRequestContributionFields & $Options>
  /** Pull request contributions made by the user. */
  pullRequestContributions?: $<CreatedPullRequestContributionConnectionFields & { $args?: ContributionsCollectionPullRequestContributionsArgs } & $Options>
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository?: $<PullRequestContributionsByRepositoryFields & { $args?: ContributionsCollectionPullRequestContributionsByRepositoryArgs } & $Options>
  /** Pull request review contributions made by the user. Returns the most recently
   * submitted review for each PR reviewed by the user. */
  pullRequestReviewContributions?: $<CreatedPullRequestReviewContributionConnectionFields & { $args?: ContributionsCollectionPullRequestReviewContributionsArgs } & $Options>
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository?: $<PullRequestReviewContributionsByRepositoryFields & { $args?: ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs } & $Options>
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions?: $<CreatedRepositoryContributionConnectionFields & { $args?: ContributionsCollectionRepositoryContributionsArgs } & $Options>
  /** A count of contributions made by the user that the viewer cannot access. Only
   * non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount?: $Pick
  /** The beginning date and time of this collection. */
  startedAt?: $Pick
  /** How many commits were made by the user in this time span. */
  totalCommitContributions?: $Pick
  /** How many issues the user opened. */
  totalIssueContributions?: $Scalar | $<$Options & { $args?: ContributionsCollectionTotalIssueContributionsArgs }>
  /** How many pull requests the user opened. */
  totalPullRequestContributions?: $Scalar | $<$Options & { $args?: ContributionsCollectionTotalPullRequestContributionsArgs }>
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions?: $Pick
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits?: $Pick
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues?: $Scalar | $<$Options & { $args?: ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs }>
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews?: $Pick
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests?: $Scalar | $<$Options & { $args?: ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs }>
  /** How many repositories the user created. */
  totalRepositoryContributions?: $Scalar | $<$Options & { $args?: ContributionsCollectionTotalRepositoryContributionsArgs }>
  /** The user who made the contributions in this collection. */
  user?: $<UserFields & $Options>
}
export interface ConvertedNoteToIssueEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ConvertedNoteToIssueEvent object */
  id?: $Pick
  /** Project referenced by event. */
  project?: $<ProjectFields & $Options>
  /** Project card referenced by this project event. */
  projectCard?: $<ProjectCardFields & $Options>
  /** Column name referenced by this project event. */
  projectColumnName?: $Pick
}
export interface ConvertedToDiscussionEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The discussion that the issue was converted into. */
  discussion?: $<DiscussionFields & $Options>
  /** The Node ID of the ConvertedToDiscussionEvent object */
  id?: $Pick
}
export interface ConvertProjectCardNoteToIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated ProjectCard. */
  projectCard?: $<ProjectCardFields & $Options>
}
export interface ConvertProjectV2DraftIssueItemToIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated project item. */
  item?: $<ProjectV2ItemFields & $Options>
}
export interface ConvertPullRequestToDraftPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that is now a draft. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface ConvertToDraftEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ConvertToDraftEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The HTTP path for this convert to draft event. */
  resourcePath?: $Pick
  /** The HTTP URL for this convert to draft event. */
  url?: $Pick
}
export interface CopilotEndpointsFields {
  __typename?: $Pick
  /** Copilot API endpoint */
  api?: $Pick
  /** Copilot origin tracker endpoint */
  originTracker?: $Pick
  /** Copilot proxy endpoint */
  proxy?: $Pick
  /** Copilot telemetry endpoint */
  telemetry?: $Pick
}
export interface CopyProjectV2PayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The copied project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface CreateAttributionInvitationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The owner scoping the reattributable data. */
  owner?: $<OrganizationFields & $Options>
  /** The account owning the data to reattribute. */
  source?: $<ClaimablePossibleTypes & $Options>
  /** The account which may claim the data. */
  target?: $<ClaimablePossibleTypes & $Options>
}
export interface CreateBranchProtectionRulePayloadFields {
  __typename?: $Pick
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface CreateCheckRunPayloadFields {
  __typename?: $Pick
  /** The newly created check run. */
  checkRun?: $<CheckRunFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface CreateCheckSuitePayloadFields {
  __typename?: $Pick
  /** The newly created check suite. */
  checkSuite?: $<CheckSuiteFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface CreateCommitOnBranchPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new commit. */
  commit?: $<CommitFields & $Options>
  /** The ref which has been updated to point to the new commit. */
  ref?: $<RefFields & $Options>
}
export interface CreatedCommitContributionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CreatedCommitContributionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CreatedCommitContributionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of commits across days and repositories in the connection. */
  totalCount?: $Pick
}
export interface CreatedCommitContributionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CreatedCommitContributionFields & $Options>
}
export interface CreatedCommitContributionFields {
  __typename?: $Pick
  /** How many commits were made on this day to this repository by the user. */
  commitCount?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The repository the user made a commit in. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface CreateDeploymentPayloadFields {
  __typename?: $Pick
  /** True if the default branch has been auto-merged into the deployment ref. */
  autoMerged?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new deployment. */
  deployment?: $<DeploymentFields & $Options>
}
export interface CreateDeploymentStatusPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new deployment status. */
  deploymentStatus?: $<DeploymentStatusFields & $Options>
}
export interface CreateDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that was just created. */
  discussion?: $<DiscussionFields & $Options>
}
export interface CreatedIssueContributionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CreatedIssueContributionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CreatedIssueContributionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CreatedIssueContributionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CreatedIssueContributionFields & $Options>
}
export interface CreatedIssueContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** The issue that was opened. */
  issue?: $<IssueFields & $Options>
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface CreatedPullRequestContributionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CreatedPullRequestContributionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CreatedPullRequestContributionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CreatedPullRequestContributionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CreatedPullRequestContributionFields & $Options>
}
export interface CreatedPullRequestContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The pull request that was opened. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface CreatedPullRequestReviewContributionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CreatedPullRequestReviewContributionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CreatedPullRequestReviewContributionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CreatedPullRequestReviewContributionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CreatedPullRequestReviewContributionFields & $Options>
}
export interface CreatedPullRequestReviewContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The pull request the user reviewed. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The review the user left on the pull request. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
  /** The repository containing the pull request that the user reviewed. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface CreatedRepositoryContributionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CreatedRepositoryContributionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CreatedRepositoryContributionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CreatedRepositoryContributionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CreatedRepositoryContributionFields & $Options>
}
export interface CreatedRepositoryContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The repository that was created. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface CreateEnterpriseOrganizationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise that owns the created organization. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The organization that was created. */
  organization?: $<OrganizationFields & $Options>
}
export interface CreateEnvironmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new or existing environment. */
  environment?: $<EnvironmentFields & $Options>
}
export interface CreateIpAllowListEntryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The IP allow list entry that was created. */
  ipAllowListEntry?: $<IpAllowListEntryFields & $Options>
}
export interface CreateIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new issue. */
  issue?: $<IssueFields & $Options>
}
export interface CreateLabelPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new label. */
  label?: $<LabelFields & $Options>
}
export interface CreateLinkedBranchPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue that was linked to. */
  issue?: $<IssueFields & $Options>
  /** The new branch issue reference. */
  linkedBranch?: $<LinkedBranchFields & $Options>
}
export interface CreateMigrationSourcePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The created migration source. */
  migrationSource?: $<MigrationSourceFields & $Options>
}
export interface CreateProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new project. */
  project?: $<ProjectFields & $Options>
}
export interface CreateProjectV2FieldPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new field. */
  projectV2Field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
}
export interface CreateProjectV2PayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface CreateProjectV2StatusUpdatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The status update updated in the project. */
  statusUpdate?: $<ProjectV2StatusUpdateFields & $Options>
}
export interface CreatePullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new pull request. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface CreateRefPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created ref. */
  ref?: $<RefFields & $Options>
}
export interface CreateRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface CreateRepositoryRulesetPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created Ruleset. */
  ruleset?: $<RepositoryRulesetFields & $Options>
}
export interface CreateSponsorshipPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The sponsorship that was started. */
  sponsorship?: $<SponsorshipFields & $Options>
}
export interface CreateSponsorshipsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The users and organizations who received a sponsorship. */
  sponsorables?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
}
export interface CreateSponsorsListingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new GitHub Sponsors profile. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
}
export interface CreateSponsorsTierPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new tier. */
  sponsorsTier?: $<SponsorsTierFields & $Options>
}
export interface CreateTeamDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new comment.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  teamDiscussionComment?: $<TeamDiscussionCommentFields & $Options>
}
export interface CreateTeamDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  teamDiscussion?: $<TeamDiscussionFields & $Options>
}
export interface CreateUserListPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The list that was just created */
  list?: $<UserListFields & $Options>
  /** The user who created the list */
  viewer?: $<UserFields & $Options>
}
export interface CrossReferencedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the CrossReferencedEvent object */
  id?: $Pick
  /** Reference originated in a different repository. */
  isCrossRepository?: $Pick
  /** Identifies when the reference was made. */
  referencedAt?: $Pick
  /** The HTTP path for this pull request. */
  resourcePath?: $Pick
  /** Issue or pull request that made the reference. */
  source?: $<ReferencedSubjectPossibleTypes & $Options>
  /** Issue or pull request to which the reference was made. */
  target?: $<ReferencedSubjectPossibleTypes & $Options>
  /** The HTTP URL for this pull request. */
  url?: $Pick
  /** Checks if the target will be closed when the source is merged. */
  willCloseTarget?: $Pick
}
export interface CVSSFields {
  __typename?: $Pick
  /** The CVSS score associated with this advisory */
  score?: $Pick
  /** The CVSS vector string associated with this advisory */
  vectorString?: $Pick
}
export interface CvssSeveritiesFields {
  __typename?: $Pick
  /** The CVSS v3 severity associated with this advisory */
  cvssV3?: $<CVSSFields & $Options>
  /** The CVSS v4 severity associated with this advisory */
  cvssV4?: $<CVSSFields & $Options>
}
export interface CWEConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<CWEEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<CWEFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface CWEEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<CWEFields & $Options>
}
export interface CWEFields {
  __typename?: $Pick
  /** The id of the CWE */
  cweId?: $Pick
  /** A detailed description of this CWE */
  description?: $Pick
  /** The Node ID of the CWE object */
  id?: $Pick
  /** The name of this CWE */
  name?: $Pick
}
export interface DeclineTopicSuggestionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The declined topic.
   *
   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC. */
  topic?: $<TopicFields & $Options>
}
export interface DeletableFields {
  __typename?: $Pick
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
}
export interface DeleteBranchProtectionRulePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteDeploymentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion comment that was just deleted. */
  comment?: $<DiscussionCommentFields & $Options>
}
export interface DeleteDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that was just deleted. */
  discussion?: $<DiscussionFields & $Options>
}
export interface DeleteEnvironmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteIpAllowListEntryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry?: $<IpAllowListEntryFields & $Options>
}
export interface DeleteIssueCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository the issue belonged to */
  repository?: $<RepositoryFields & $Options>
}
export interface DeleteLabelPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteLinkedBranchPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue the linked branch was unlinked from. */
  issue?: $<IssueFields & $Options>
}
export interface DeletePackageVersionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Whether or not the operation succeeded. */
  success?: $Pick
}
export interface DeleteProjectCardPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The column the deleted card was in. */
  column?: $<ProjectColumnFields & $Options>
  /** The deleted card ID. */
  deletedCardId?: $Pick
}
export interface DeleteProjectColumnPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The deleted column ID. */
  deletedColumnId?: $Pick
  /** The project the deleted column was in. */
  project?: $<ProjectFields & $Options>
}
export interface DeleteProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository or organization the project was removed from. */
  owner?: $<ProjectOwnerFields & ProjectOwnerPossibleTypes & $Options>
}
export interface DeleteProjectV2FieldPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The deleted field. */
  projectV2Field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
}
export interface DeleteProjectV2ItemPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The ID of the deleted item. */
  deletedItemId?: $Pick
}
export interface DeleteProjectV2PayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The deleted Project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface DeleteProjectV2StatusUpdatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The ID of the deleted status update. */
  deletedStatusUpdateId?: $Pick
  /** The project the deleted status update was in. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface DeleteProjectV2WorkflowPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The ID of the deleted workflow. */
  deletedWorkflowId?: $Pick
  /** The project the deleted workflow was in. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface DeletePullRequestReviewCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
  /** The deleted pull request review comment. */
  pullRequestReviewComment?: $<PullRequestReviewCommentFields & $Options>
}
export interface DeletePullRequestReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The deleted pull request review. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
}
export interface DeleteRefPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteRepositoryRulesetPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteTeamDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteTeamDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface DeleteUserListPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The owner of the list that will be deleted */
  user?: $<UserFields & $Options>
}
export interface DeleteVerifiableDomainPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The owning account from which the domain was deleted. */
  owner?: $<VerifiableDomainOwnerPossibleTypes & $Options>
}
export interface DemilestonedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the DemilestonedEvent object */
  id?: $Pick
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle?: $Pick
  /** Object referenced by event. */
  subject?: $<MilestoneItemPossibleTypes & $Options>
}
export interface DependabotUpdateErrorFields {
  __typename?: $Pick
  /** The body of the error */
  body?: $Pick
  /** The error code */
  errorType?: $Pick
  /** The title of the error */
  title?: $Pick
}
export interface DependabotUpdateFields {
  __typename?: $Pick
  /** The error from a dependency update */
  error?: $<DependabotUpdateErrorFields & $Options>
  /** The associated pull request */
  pullRequest?: $<PullRequestFields & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
}
export interface DependencyGraphDependencyConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DependencyGraphDependencyEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DependencyGraphDependencyFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DependencyGraphDependencyEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DependencyGraphDependencyFields & $Options>
}
export interface DependencyGraphDependencyFields {
  __typename?: $Pick
  /** Does the dependency itself have dependencies? */
  hasDependencies?: $Pick
  /** The original name of the package, as it appears in the manifest.
   *
   * @deprecated `packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC. */
  packageLabel?: $Pick
  /** The dependency package manager */
  packageManager?: $Pick
  /** The name of the package in the canonical form used by the package manager. */
  packageName?: $Pick
  /** Public preview: The relationship of the dependency. Can be direct, transitive, or unknown */
  relationship?: $Pick
  /** The repository containing the package */
  repository?: $<RepositoryFields & $Options>
  /** The dependency version requirements */
  requirements?: $Pick
}
export interface DependencyGraphManifestConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DependencyGraphManifestEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DependencyGraphManifestFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DependencyGraphManifestEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DependencyGraphManifestFields & $Options>
}
export interface DependencyGraphManifestFields {
  __typename?: $Pick
  /** Path to view the manifest file blob */
  blobPath?: $Pick
  /** A list of manifest dependencies */
  dependencies?: $<DependencyGraphDependencyConnectionFields & { $args?: DependencyGraphManifestDependenciesArgs } & $Options>
  /** The number of dependencies listed in the manifest */
  dependenciesCount?: $Pick
  /** Is the manifest too big to parse? */
  exceedsMaxSize?: $Pick
  /** Fully qualified manifest filename */
  filename?: $Pick
  /** The Node ID of the DependencyGraphManifest object */
  id?: $Pick
  /** Were we able to parse the manifest? */
  parseable?: $Pick
  /** The repository containing the manifest */
  repository?: $<RepositoryFields & $Options>
}
export interface DeployedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The deployment associated with the 'deployed' event. */
  deployment?: $<DeploymentFields & $Options>
  /** The Node ID of the DeployedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The ref associated with the 'deployed' event. */
  ref?: $<RefFields & $Options>
}
export interface DeployKeyConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeployKeyEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeployKeyFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeployKeyEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeployKeyFields & $Options>
}
export interface DeployKeyFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Whether or not the deploy key is enabled by policy at the Enterprise or Organization level. */
  enabled?: $Pick
  /** The Node ID of the DeployKey object */
  id?: $Pick
  /** The deploy key. */
  key?: $Pick
  /** Whether or not the deploy key is read only. */
  readOnly?: $Pick
  /** The deploy key title. */
  title?: $Pick
  /** Whether or not the deploy key has been verified. */
  verified?: $Pick
}
export interface DeploymentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentFields & $Options>
}
export interface DeploymentEnvironmentChangedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The deployment status that updated the deployment environment. */
  deploymentStatus?: $<DeploymentStatusFields & $Options>
  /** The Node ID of the DeploymentEnvironmentChangedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface DeploymentFields {
  __typename?: $Pick
  /** Identifies the commit sha of the deployment. */
  commit?: $<CommitFields & $Options>
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the actor who triggered the deployment. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The deployment description. */
  description?: $Pick
  /** The latest environment to which this deployment was made. */
  environment?: $Pick
  /** The Node ID of the Deployment object */
  id?: $Pick
  /** The latest environment to which this deployment was made. */
  latestEnvironment?: $Pick
  /** The latest status of this deployment. */
  latestStatus?: $<DeploymentStatusFields & $Options>
  /** The original environment to which this deployment was made. */
  originalEnvironment?: $Pick
  /** Extra information that a deployment system might need. */
  payload?: $Pick
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref?: $<RefFields & $Options>
  /** Identifies the repository associated with the deployment. */
  repository?: $<RepositoryFields & $Options>
  /** The current state of the deployment. */
  state?: $Pick
  /** A list of statuses associated with the deployment. */
  statuses?: $<DeploymentStatusConnectionFields & { $args?: DeploymentStatusesArgs } & $Options>
  /** The deployment task. */
  task?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface DeploymentProtectionRuleConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentProtectionRuleEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentProtectionRuleFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentProtectionRuleEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentProtectionRuleFields & $Options>
}
export interface DeploymentProtectionRuleFields {
  __typename?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: $Pick
  /** The teams or users that can review the deployment */
  reviewers?: $<DeploymentReviewerConnectionFields & { $args?: DeploymentProtectionRuleReviewersArgs } & $Options>
  /** The timeout in minutes for this protection rule. */
  timeout?: $Pick
  /** The type of protection rule. */
  type?: $Pick
}
export interface DeploymentRequestConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentRequestEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentRequestFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentRequestEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentRequestFields & $Options>
}
export interface DeploymentRequestFields {
  __typename?: $Pick
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove?: $Pick
  /** The target environment of the deployment */
  environment?: $<EnvironmentFields & $Options>
  /** The teams or users that can review the deployment */
  reviewers?: $<DeploymentReviewerConnectionFields & { $args?: DeploymentRequestReviewersArgs } & $Options>
  /** The wait timer in minutes configured in the environment */
  waitTimer?: $Pick
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt?: $Pick
}
export interface DeploymentReviewConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentReviewEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentReviewFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentReviewEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentReviewFields & $Options>
}
export interface DeploymentReviewerConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentReviewerEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentReviewerPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentReviewerEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentReviewerPossibleTypes & $Options>
}
export interface DeploymentReviewFields {
  __typename?: $Pick
  /** The comment the user left. */
  comment?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The environments approved or rejected */
  environments?: $<EnvironmentConnectionFields & { $args?: DeploymentReviewEnvironmentsArgs } & $Options>
  /** The Node ID of the DeploymentReview object */
  id?: $Pick
  /** The decision of the user. */
  state?: $Pick
  /** The user that reviewed the deployment. */
  user?: $<UserFields & $Options>
}
export interface DeploymentStatusConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DeploymentStatusEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DeploymentStatusFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DeploymentStatusEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DeploymentStatusFields & $Options>
}
export interface DeploymentStatusFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the actor who triggered the deployment. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the deployment associated with status. */
  deployment?: $<DeploymentFields & $Options>
  /** Identifies the description of the deployment. */
  description?: $Pick
  /** Identifies the environment of the deployment at the time of this deployment status */
  environment?: $Pick
  /** Identifies the environment URL of the deployment. */
  environmentUrl?: $Pick
  /** The Node ID of the DeploymentStatus object */
  id?: $Pick
  /** Identifies the log URL of the deployment. */
  logUrl?: $Pick
  /** Identifies the current state of the deployment. */
  state?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface DequeuePullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The merge queue entry of the dequeued pull request. */
  mergeQueueEntry?: $<MergeQueueEntryFields & $Options>
}
export interface DisablePullRequestAutoMergePayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request auto merge was disabled on. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface DisconnectedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the DisconnectedEvent object */
  id?: $Pick
  /** Reference originated in a different repository. */
  isCrossRepository?: $Pick
  /** Issue or pull request from which the issue was disconnected. */
  source?: $<ReferencedSubjectPossibleTypes & $Options>
  /** Issue or pull request which was disconnected. */
  subject?: $<ReferencedSubjectPossibleTypes & $Options>
}
export interface DiscussionCategoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DiscussionCategoryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DiscussionCategoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DiscussionCategoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DiscussionCategoryFields & $Options>
}
export interface DiscussionCategoryFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** A description of this category. */
  description?: $Pick
  /** An emoji representing this category. */
  emoji?: $Pick
  /** This category's emoji rendered as HTML. */
  emojiHTML?: $Pick
  /** The Node ID of the DiscussionCategory object */
  id?: $Pick
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  isAnswerable?: $Pick
  /** The name of this category. */
  name?: $Pick
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The slug of this category. */
  slug?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface DiscussionCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DiscussionCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DiscussionCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DiscussionCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DiscussionCommentFields & $Options>
}
export interface DiscussionCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The time when this replied-to comment was deleted */
  deletedAt?: $Pick
  /** The discussion this comment was created in */
  discussion?: $<DiscussionFields & $Options>
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the DiscussionComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Has this comment been chosen as the answer of its discussion? */
  isAnswer?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: DiscussionCommentReactionsArgs } & $Options>
  /** The threaded replies to this comment. */
  replies?: $<DiscussionCommentConnectionFields & { $args?: DiscussionCommentRepliesArgs } & $Options>
  /** The discussion comment this comment is a reply to */
  replyTo?: $<DiscussionCommentFields & $Options>
  /** The path for this discussion comment. */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** Number of upvotes that this subject has received. */
  upvoteCount?: $Pick
  /** The URL for this discussion comment. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: DiscussionCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Can the current user mark this comment as an answer? */
  viewerCanMarkAsAnswer?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Can the current user unmark this comment as an answer? */
  viewerCanUnmarkAsAnswer?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: $Pick
}
export interface DiscussionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DiscussionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DiscussionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DiscussionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DiscussionFields & $Options>
}
export interface DiscussionFields {
  __typename?: $Pick
  /** Reason that the conversation was locked. */
  activeLockReason?: $Pick
  /** The comment chosen as this discussion's answer, if any. */
  answer?: $<DiscussionCommentFields & $Options>
  /** The time when a user chose this discussion's answer, if answered. */
  answerChosenAt?: $Pick
  /** The user who chose this discussion's answer, if answered. */
  answerChosenBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** The main text of the discussion post. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** The category for this discussion. */
  category?: $<DiscussionCategoryFields & $Options>
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** The replies to the discussion. */
  comments?: $<DiscussionCommentConnectionFields & { $args?: DiscussionCommentsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the Discussion object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Only return answered/unanswered discussions */
  isAnswered?: $Pick
  /** A list of labels associated with the object. */
  labels?: $<LabelConnectionFields & { $args?: DiscussionLabelsArgs } & $Options>
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** `true` if the object is locked */
  locked?: $Pick
  /** The number identifying this discussion within the repository. */
  number?: $Pick
  /** The poll associated with this discussion, if one exists. */
  poll?: $<DiscussionPollFields & $Options>
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: DiscussionReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The path for this discussion. */
  resourcePath?: $Pick
  /** Identifies the reason for the discussion's state. */
  stateReason?: $Pick
  /** The title of this discussion. */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** Number of upvotes that this subject has received. */
  upvoteCount?: $Pick
  /** The URL for this discussion. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: DiscussionUserContentEditsArgs } & $Options>
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
}
export interface DiscussionPollFields {
  __typename?: $Pick
  /** The discussion that this poll belongs to. */
  discussion?: $<DiscussionFields & $Options>
  /** The Node ID of the DiscussionPoll object */
  id?: $Pick
  /** The options for this poll. */
  options?: $<DiscussionPollOptionConnectionFields & { $args?: DiscussionPollOptionsArgs } & $Options>
  /** The question that is being asked by this poll. */
  question?: $Pick
  /** The total number of votes that have been cast for this poll. */
  totalVoteCount?: $Pick
  /** Indicates if the viewer has permission to vote in this poll. */
  viewerCanVote?: $Pick
  /** Indicates if the viewer has voted for any option in this poll. */
  viewerHasVoted?: $Pick
}
export interface DiscussionPollOptionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<DiscussionPollOptionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<DiscussionPollOptionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface DiscussionPollOptionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<DiscussionPollOptionFields & $Options>
}
export interface DiscussionPollOptionFields {
  __typename?: $Pick
  /** The Node ID of the DiscussionPollOption object */
  id?: $Pick
  /** The text for this option. */
  option?: $Pick
  /** The discussion poll that this option belongs to. */
  poll?: $<DiscussionPollFields & $Options>
  /** The total number of votes that have been cast for this option. */
  totalVoteCount?: $Pick
  /** Indicates if the viewer has voted for this option in the poll. */
  viewerHasVoted?: $Pick
}
export interface DismissPullRequestReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The dismissed pull request review. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
}
export interface DismissRepositoryVulnerabilityAlertPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert?: $<RepositoryVulnerabilityAlertFields & $Options>
}
export interface DraftIssueFields {
  __typename?: $Pick
  /** A list of users to assigned to this draft issue. */
  assignees?: $<UserConnectionFields & { $args?: DraftIssueAssigneesArgs } & $Options>
  /** The body of the draft issue. */
  body?: $Pick
  /** The body of the draft issue rendered to HTML. */
  bodyHTML?: $Pick
  /** The body of the draft issue rendered to text. */
  bodyText?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created this draft issue. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the DraftIssue object */
  id?: $Pick
  /** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
  projectV2Items?: $<ProjectV2ItemConnectionFields & { $args?: DraftIssueProjectV2ItemsArgs } & $Options>
  /** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: DraftIssueProjectsV2Args } & $Options>
  /** The title of the draft issue */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface EnablePullRequestAutoMergePayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request auto-merge was enabled on. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface EnqueuePullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The merge queue entry for the enqueued pull request. */
  mergeQueueEntry?: $<MergeQueueEntryFields & $Options>
}
export interface EnterpriseAdministratorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseAdministratorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseAdministratorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserFields & $Options>
  /** The role of the administrator. */
  role?: $Pick
}
export interface EnterpriseAdministratorInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseAdministratorInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseAdministratorInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseAdministratorInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseAdministratorInvitationFields & $Options>
}
export interface EnterpriseAdministratorInvitationFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The email of the person who was invited to the enterprise. */
  email?: $Pick
  /** The enterprise the invitation is for. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The Node ID of the EnterpriseAdministratorInvitation object */
  id?: $Pick
  /** The user who was invited to the enterprise. */
  invitee?: $<UserFields & $Options>
  /** The user who created the invitation. */
  inviter?: $<UserFields & $Options>
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role?: $Pick
}
export interface EnterpriseAuditEntryDataFields {
  __typename?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
}
export interface EnterpriseBillingInfoFields {
  __typename?: $Pick
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount?: $Pick
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks?: $Pick
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota?: $Pick
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage?: $Pick
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage?: $Pick
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota?: $Pick
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage?: $Pick
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage?: $Pick
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses?: $Pick
  /** The total number of licenses allocated. */
  totalLicenses?: $Pick
}
export interface EnterpriseConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseFields & $Options>
}
export interface EnterpriseFailedInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseFailedInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount?: $Pick
}
export interface EnterpriseFailedInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationInvitationFields & $Options>
}
export interface EnterpriseFields {
  __typename?: $Pick
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: $Pick
  /** The announcement banner set on this enterprise, if any. Only visible to members of the enterprise. */
  announcementBanner?: $<AnnouncementBannerFields & $Options>
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: $Pick
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: $Pick
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: $Pick
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: EnterpriseAvatarUrlArgs }>
  /** The enterprise's billing email. */
  billingEmail?: $Pick
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo?: $<EnterpriseBillingInfoFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The description of the enterprise. */
  description?: $Pick
  /** The description of the enterprise as HTML. */
  descriptionHTML?: $Pick
  /** The Node ID of the Enterprise object */
  id?: $Pick
  /** The location of the enterprise. */
  location?: $Pick
  /** A list of users who are members of this enterprise. */
  members?: $<EnterpriseMemberConnectionFields & { $args?: EnterpriseMembersArgs } & $Options>
  /** The name of the enterprise. */
  name?: $Pick
  /** A list of organizations that belong to this enterprise. */
  organizations?: $<OrganizationConnectionFields & { $args?: EnterpriseOrganizationsArgs } & $Options>
  /** Enterprise information visible to enterprise owners or enterprise owners'
   * personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
  ownerInfo?: $<EnterpriseOwnerInfoFields & $Options>
  /** The raw content of the enterprise README. */
  readme?: $Pick
  /** The content of the enterprise README as HTML. */
  readmeHTML?: $Pick
  /** The HTTP path for this enterprise. */
  resourcePath?: $Pick
  /** Returns a single ruleset from the current enterprise by ID. */
  ruleset?: $<RepositoryRulesetFields & { $args: EnterpriseRulesetArgs } & $Options>
  /** A list of rulesets for this enterprise. */
  rulesets?: $<RepositoryRulesetConnectionFields & { $args?: EnterpriseRulesetsArgs } & $Options>
  /** The URL-friendly identifier for the enterprise. */
  slug?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this enterprise. */
  url?: $Pick
  /** A list of repositories that belong to users. Only available for enterprises with Enterprise Managed Users. */
  userNamespaceRepositories?: $<UserNamespaceRepositoryConnectionFields & { $args?: EnterpriseUserNamespaceRepositoriesArgs } & $Options>
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin?: $Pick
  /** The URL of the enterprise website. */
  websiteUrl?: $Pick
}
export interface EnterpriseIdentityProviderFields {
  __typename?: $Pick
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod?: $Pick
  /** The enterprise this identity provider belongs to. */
  enterprise?: $<EnterpriseFields & $Options>
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities?: $<ExternalIdentityConnectionFields & { $args?: EnterpriseIdentityProviderExternalIdentitiesArgs } & $Options>
  /** The Node ID of the EnterpriseIdentityProvider object */
  id?: $Pick
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate?: $Pick
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer?: $Pick
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes?: $Pick
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod?: $Pick
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl?: $Pick
}
export interface EnterpriseMemberConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseMemberEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseMemberPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseMemberEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseMemberPossibleTypes & $Options>
}
export interface EnterpriseMemberInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseMemberInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseMemberInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseMemberInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseMemberInvitationFields & $Options>
}
export interface EnterpriseMemberInvitationFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The email of the person who was invited to the enterprise. */
  email?: $Pick
  /** The enterprise the invitation is for. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The Node ID of the EnterpriseMemberInvitation object */
  id?: $Pick
  /** The user who was invited to the enterprise. */
  invitee?: $<UserFields & $Options>
  /** The user who created the invitation. */
  inviter?: $<UserFields & $Options>
}
export interface EnterpriseOrganizationMembershipConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseOrganizationMembershipEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseOrganizationMembershipEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationFields & $Options>
  /** The role of the user in the enterprise membership. */
  role?: $Pick
}
export interface EnterpriseOutsideCollaboratorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseOutsideCollaboratorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseOutsideCollaboratorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserFields & $Options>
  /** The enterprise organization repositories this user is a member of. */
  repositories?: $<EnterpriseRepositoryInfoConnectionFields & { $args?: EnterpriseOutsideCollaboratorEdgeRepositoriesArgs } & $Options>
}
export interface EnterpriseOwnerInfoFields {
  __typename?: $Pick
  /** A list of all of the administrators for this enterprise. */
  admins?: $<EnterpriseAdministratorConnectionFields & { $args?: EnterpriseOwnerInfoAdminsArgs } & $Options>
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled?: $<UserConnectionFields & { $args?: EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs } & $Options>
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist?: $Pick
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting?: $Pick
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs } & $Options>
  /** The value for the allow private repository forking policy on the enterprise. */
  allowPrivateRepositoryForkingSettingPolicyValue?: $Pick
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting?: $Pick
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs } & $Options>
  /** A list of domains owned by the enterprise. Visible to enterprise owners or
   * enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  domains?: $<VerifiableDomainConnectionFields & { $args?: EnterpriseOwnerInfoDomainsArgs } & $Options>
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations?: $<EnterpriseServerInstallationConnectionFields & { $args?: EnterpriseOwnerInfoEnterpriseServerInstallationsArgs } & $Options>
  /** A list of failed invitations in the enterprise. */
  failedInvitations?: $<EnterpriseFailedInvitationConnectionFields & { $args?: EnterpriseOwnerInfoFailedInvitationsArgs } & $Options>
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting?: $Pick
  /** The IP addresses that are allowed to access resources owned by the enterprise.
   * Visible to enterprise owners or enterprise owners' personal access tokens
   * (classic) with admin:enterprise scope. */
  ipAllowListEntries?: $<IpAllowListEntryConnectionFields & { $args?: EnterpriseOwnerInfoIpAllowListEntriesArgs } & $Options>
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting?: $Pick
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission?: $Pick
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement?: $Pick
  /** The setting value for whether organization members with admin permissions on a
   * repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting?: $Pick
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs } & $Options>
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting?: $Pick
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting?: $Pick
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting?: $Pick
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting?: $Pick
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs } & $Options>
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting?: $Pick
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs } & $Options>
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting?: $Pick
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs } & $Options>
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting?: $Pick
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs } & $Options>
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting?: $Pick
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting?: $Pick
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs } & $Options>
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting?: $Pick
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs } & $Options>
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting?: $Pick
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider?: $<OIDCProviderFields & $Options>
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting?: $Pick
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs } & $Options>
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators?: $<EnterpriseOutsideCollaboratorConnectionFields & { $args?: EnterpriseOwnerInfoOutsideCollaboratorsArgs } & $Options>
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations?: $<EnterpriseAdministratorInvitationConnectionFields & { $args?: EnterpriseOwnerInfoPendingAdminInvitationsArgs } & $Options>
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations?: $<RepositoryInvitationConnectionFields & { $args?: EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs } & $Options>
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations?: $<EnterprisePendingMemberInvitationConnectionFields & { $args?: EnterpriseOwnerInfoPendingMemberInvitationsArgs } & $Options>
  /** A list of pending unaffiliated member invitations for the enterprise. */
  pendingUnaffiliatedMemberInvitations?: $<EnterpriseMemberInvitationConnectionFields & { $args?: EnterpriseOwnerInfoPendingUnaffiliatedMemberInvitationsArgs } & $Options>
  /** The setting value for whether deploy keys are enabled for repositories in organizations in this enterprise. */
  repositoryDeployKeySetting?: $Pick
  /** A list of enterprise organizations configured with the provided deploy keys setting value. */
  repositoryDeployKeySettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoRepositoryDeployKeySettingOrganizationsArgs } & $Options>
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting?: $Pick
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs } & $Options>
  /** The SAML Identity Provider for the enterprise. */
  samlIdentityProvider?: $<EnterpriseIdentityProviderFields & $Options>
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs } & $Options>
  /** A list of members with a support entitlement. */
  supportEntitlements?: $<EnterpriseMemberConnectionFields & { $args?: EnterpriseOwnerInfoSupportEntitlementsArgs } & $Options>
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting?: $Pick
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs } & $Options>
  /** The setting value for what methods of two-factor authentication the enterprise prevents its users from having. */
  twoFactorDisallowedMethodsSetting?: $Pick
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting?: $Pick
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations?: $<OrganizationConnectionFields & { $args: EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs } & $Options>
}
export interface EnterprisePendingMemberInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterprisePendingMemberInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount?: $Pick
}
export interface EnterprisePendingMemberInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationInvitationFields & $Options>
}
export interface EnterpriseRepositoryInfoConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseRepositoryInfoEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseRepositoryInfoFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseRepositoryInfoEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseRepositoryInfoFields & $Options>
}
export interface EnterpriseRepositoryInfoFields {
  __typename?: $Pick
  /** The Node ID of the EnterpriseRepositoryInfo object */
  id?: $Pick
  /** Identifies if the repository is private or internal. */
  isPrivate?: $Pick
  /** The repository's name. */
  name?: $Pick
  /** The repository's name with owner. */
  nameWithOwner?: $Pick
}
export interface EnterpriseServerInstallationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseServerInstallationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseServerInstallationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseServerInstallationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseServerInstallationFields & $Options>
}
export interface EnterpriseServerInstallationFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName?: $Pick
  /** The host name of the Enterprise Server installation. */
  hostName?: $Pick
  /** The Node ID of the EnterpriseServerInstallation object */
  id?: $Pick
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** User accounts on this Enterprise Server installation. */
  userAccounts?: $<EnterpriseServerUserAccountConnectionFields & { $args?: EnterpriseServerInstallationUserAccountsArgs } & $Options>
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads?: $<EnterpriseServerUserAccountsUploadConnectionFields & { $args?: EnterpriseServerInstallationUserAccountsUploadsArgs } & $Options>
}
export interface EnterpriseServerInstallationMembershipConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseServerInstallationMembershipEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseServerInstallationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseServerInstallationMembershipEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseServerInstallationFields & $Options>
  /** The role of the user in the enterprise membership. */
  role?: $Pick
}
export interface EnterpriseServerUserAccountConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseServerUserAccountEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseServerUserAccountFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseServerUserAccountEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseServerUserAccountFields & $Options>
}
export interface EnterpriseServerUserAccountEmailConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseServerUserAccountEmailEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseServerUserAccountEmailFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseServerUserAccountEmailEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseServerUserAccountEmailFields & $Options>
}
export interface EnterpriseServerUserAccountEmailFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The email address. */
  email?: $Pick
  /** The Node ID of the EnterpriseServerUserAccountEmail object */
  id?: $Pick
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The user account to which the email belongs. */
  userAccount?: $<EnterpriseServerUserAccountFields & $Options>
}
export interface EnterpriseServerUserAccountFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** User emails belonging to this user account. */
  emails?: $<EnterpriseServerUserAccountEmailConnectionFields & { $args?: EnterpriseServerUserAccountEmailsArgs } & $Options>
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation?: $<EnterpriseServerInstallationFields & $Options>
  /** The Node ID of the EnterpriseServerUserAccount object */
  id?: $Pick
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin?: $Pick
  /** The login of the user account on the Enterprise Server installation. */
  login?: $Pick
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName?: $Pick
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt?: $Pick
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface EnterpriseServerUserAccountsUploadConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnterpriseServerUserAccountsUploadEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnterpriseServerUserAccountsUploadFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnterpriseServerUserAccountsUploadEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnterpriseServerUserAccountsUploadFields & $Options>
}
export interface EnterpriseServerUserAccountsUploadFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The enterprise to which this upload belongs. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation?: $<EnterpriseServerInstallationFields & $Options>
  /** The Node ID of the EnterpriseServerUserAccountsUpload object */
  id?: $Pick
  /** The name of the file uploaded. */
  name?: $Pick
  /** The synchronization state of the upload */
  syncState?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface EnterpriseUserAccountFields {
  __typename?: $Pick
  /** A URL pointing to the enterprise user account's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: EnterpriseUserAccountAvatarUrlArgs }>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The enterprise in which this user account exists. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A list of Enterprise Server installations this user is a member of. */
  enterpriseInstallations?: $<EnterpriseServerInstallationMembershipConnectionFields & { $args?: EnterpriseUserAccountEnterpriseInstallationsArgs } & $Options>
  /** The Node ID of the EnterpriseUserAccount object */
  id?: $Pick
  /** An identifier for the enterprise user account, a login or email address */
  login?: $Pick
  /** The name of the enterprise user account */
  name?: $Pick
  /** A list of enterprise organizations this user is a member of. */
  organizations?: $<EnterpriseOrganizationMembershipConnectionFields & { $args?: EnterpriseUserAccountOrganizationsArgs } & $Options>
  /** The HTTP path for this user. */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this user. */
  url?: $Pick
  /** The user within the enterprise. */
  user?: $<UserFields & $Options>
}
export interface EnvironmentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<EnvironmentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<EnvironmentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface EnvironmentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<EnvironmentFields & $Options>
}
export interface EnvironmentFields {
  __typename?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Environment object */
  id?: $Pick
  /** Indicates whether or not this environment is currently pinned to the repository */
  isPinned?: $Pick
  /** The latest completed deployment with status success, failure, or error if it exists */
  latestCompletedDeployment?: $<DeploymentFields & $Options>
  /** The name of the environment */
  name?: $Pick
  /** The position of the environment if it is pinned, null if it is not pinned */
  pinnedPosition?: $Pick
  /** The protection rules defined for this environment */
  protectionRules?: $<DeploymentProtectionRuleConnectionFields & { $args?: EnvironmentProtectionRulesArgs } & $Options>
}
export interface EPSSFields {
  __typename?: $Pick
  /** The EPSS percentage represents the likelihood of a CVE being exploited. */
  percentage?: $Pick
  /** The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs. */
  percentile?: $Pick
}
export interface ExternalIdentityAttributeFields {
  __typename?: $Pick
  /** The attribute metadata as JSON */
  metadata?: $Pick
  /** The attribute name */
  name?: $Pick
  /** The attribute value */
  value?: $Pick
}
export interface ExternalIdentityConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ExternalIdentityEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ExternalIdentityFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ExternalIdentityEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ExternalIdentityFields & $Options>
}
export interface ExternalIdentityFields {
  __typename?: $Pick
  /** The GUID for this identity */
  guid?: $Pick
  /** The Node ID of the ExternalIdentity object */
  id?: $Pick
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation?: $<OrganizationInvitationFields & $Options>
  /** SAML Identity attributes */
  samlIdentity?: $<ExternalIdentitySamlAttributesFields & $Options>
  /** SCIM Identity attributes */
  scimIdentity?: $<ExternalIdentityScimAttributesFields & $Options>
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user?: $<UserFields & $Options>
}
export interface ExternalIdentitySamlAttributesFields {
  __typename?: $Pick
  /** SAML Identity attributes */
  attributes?: $<ExternalIdentityAttributeFields & $Options>
  /** The emails associated with the SAML identity */
  emails?: $<UserEmailMetadataFields & $Options>
  /** Family name of the SAML identity */
  familyName?: $Pick
  /** Given name of the SAML identity */
  givenName?: $Pick
  /** The groups linked to this identity in IDP */
  groups?: $Pick
  /** The NameID of the SAML identity */
  nameId?: $Pick
  /** The userName of the SAML identity */
  username?: $Pick
}
export interface ExternalIdentityScimAttributesFields {
  __typename?: $Pick
  /** The emails associated with the SCIM identity */
  emails?: $<UserEmailMetadataFields & $Options>
  /** Family name of the SCIM identity */
  familyName?: $Pick
  /** Given name of the SCIM identity */
  givenName?: $Pick
  /** The groups linked to this identity in IDP */
  groups?: $Pick
  /** The userName of the SCIM identity */
  username?: $Pick
}
export interface FileExtensionRestrictionParametersFields {
  __typename?: $Pick
  /** The file extensions that are restricted from being pushed to the commit graph. */
  restrictedFileExtensions?: $Pick
}
export interface FilePathRestrictionParametersFields {
  __typename?: $Pick
  /** The file paths that are restricted from being pushed to the commit graph. */
  restrictedFilePaths?: $Pick
}
export interface FollowerConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface FollowingConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface FollowOrganizationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organization that was followed. */
  organization?: $<OrganizationFields & $Options>
}
export interface FollowUserPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The user that was followed. */
  user?: $<UserFields & $Options>
}
export interface FundingLinkFields {
  __typename?: $Pick
  /** The funding platform this link is for. */
  platform?: $Pick
  /** The configured URL for this funding link. */
  url?: $Pick
}
export interface GenericHovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
}
export interface GistCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<GistCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<GistCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface GistCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<GistCommentFields & $Options>
}
export interface GistCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the gist. */
  authorAssociation?: $Pick
  /** Identifies the comment body. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The associated gist. */
  gist?: $<GistFields & $Options>
  /** The Node ID of the GistComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: GistCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface GistConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<GistEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<GistFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface GistEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<GistFields & $Options>
}
export interface GistFields {
  __typename?: $Pick
  /** A list of comments associated with the gist */
  comments?: $<GistCommentConnectionFields & { $args?: GistCommentsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The gist description. */
  description?: $Pick
  /** The files in this gist. */
  files?: $<GistFileFields & { $args?: GistFilesArgs } & $Options>
  /** A list of forks associated with the gist */
  forks?: $<GistConnectionFields & { $args?: GistForksArgs } & $Options>
  /** The Node ID of the Gist object */
  id?: $Pick
  /** Identifies if the gist is a fork. */
  isFork?: $Pick
  /** Whether the gist is public or not. */
  isPublic?: $Pick
  /** The gist name. */
  name?: $Pick
  /** The gist owner. */
  owner?: $<RepositoryOwnerFields & RepositoryOwnerPossibleTypes & $Options>
  /** Identifies when the gist was last pushed to. */
  pushedAt?: $Pick
  /** The HTML path to this resource. */
  resourcePath?: $Pick
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount?: $Pick
  /** A list of users who have starred this starrable. */
  stargazers?: $<StargazerConnectionFields & { $args?: GistStargazersArgs } & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this Gist. */
  url?: $Pick
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: $Pick
}
export interface GistFileFields {
  __typename?: $Pick
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName?: $Pick
  /** The gist file encoding. */
  encoding?: $Pick
  /** The file extension from the file name. */
  extension?: $Pick
  /** Indicates if this file is an image. */
  isImage?: $Pick
  /** Whether the file's contents were truncated. */
  isTruncated?: $Pick
  /** The programming language this file is written in. */
  language?: $<LanguageFields & $Options>
  /** The gist file name. */
  name?: $Pick
  /** The gist file size in bytes. */
  size?: $Pick
  /** UTF8 text data or null if the file is binary */
  text?: $Scalar | $<$Options & { $args?: GistFileTextArgs }>
}
export interface GitActorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<GitActorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<GitActorFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface GitActorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<GitActorFields & $Options>
}
export interface GitActorFields {
  __typename?: $Pick
  /** A URL pointing to the author's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: GitActorAvatarUrlArgs }>
  /** The timestamp of the Git action (authoring or committing). */
  date?: $Pick
  /** The email in the Git commit. */
  email?: $Pick
  /** The name in the Git commit. */
  name?: $Pick
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user?: $<UserFields & $Options>
}
export interface GitHubMetadataFields {
  __typename?: $Pick
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha?: $Pick
  /** IP addresses that users connect to for git operations */
  gitIpAddresses?: $Pick
  /** IP addresses that GitHub Enterprise Importer uses for outbound connections */
  githubEnterpriseImporterIpAddresses?: $Pick
  /** IP addresses that service hooks are sent from */
  hookIpAddresses?: $Pick
  /** IP addresses that the importer connects from */
  importerIpAddresses?: $Pick
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable?: $Pick
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses?: $Pick
}
export interface GitObjectFields {
  __typename?: $Pick
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: $Pick
  /** The HTTP path for this Git object */
  commitResourcePath?: $Pick
  /** The HTTP URL for this Git object */
  commitUrl?: $Pick
  /** The Node ID of the GitObject object */
  id?: $Pick
  /** The Git object ID */
  oid?: $Pick
  /** The Repository the Git object belongs to */
  repository?: $<RepositoryFields & $Options>
}
export interface GitSignatureFields {
  __typename?: $Pick
  /** Email used to sign this object. */
  email?: $Pick
  /** True if the signature is valid and verified by GitHub. */
  isValid?: $Pick
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: $Pick
  /** ASCII-armored signature header from object. */
  signature?: $Pick
  /** GitHub user corresponding to the email signing this commit. */
  signer?: $<UserFields & $Options>
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state?: $Pick
  /** The date the signature was verified, if valid */
  verifiedAt?: $Pick
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: $Pick
}
export interface GpgSignatureFields {
  __typename?: $Pick
  /** Email used to sign this object. */
  email?: $Pick
  /** True if the signature is valid and verified by GitHub. */
  isValid?: $Pick
  /** Hex-encoded ID of the key that signed this object. */
  keyId?: $Pick
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: $Pick
  /** ASCII-armored signature header from object. */
  signature?: $Pick
  /** GitHub user corresponding to the email signing this commit. */
  signer?: $<UserFields & $Options>
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state?: $Pick
  /** The date the signature was verified, if valid */
  verifiedAt?: $Pick
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: $Pick
}
export interface GrantEnterpriseOrganizationsMigratorRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organizations that had the migrator role applied to for the given user. */
  organizations?: $<OrganizationConnectionFields & { $args?: GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs } & $Options>
}
export interface GrantMigratorRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Did the operation succeed? */
  success?: $Pick
}
export interface HeadRefDeletedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef?: $<RefFields & $Options>
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName?: $Pick
  /** The Node ID of the HeadRefDeletedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface HeadRefForcePushedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit?: $<CommitFields & $Options>
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the HeadRefForcePushedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref?: $<RefFields & $Options>
}
export interface HeadRefRestoredEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the HeadRefRestoredEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface HovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
}
export interface HovercardFields {
  __typename?: $Pick
  /** Each of the contexts for this hovercard */
  contexts?: $<HovercardContextFields & HovercardContextPossibleTypes & $Options>
}
export interface ImportProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new Project! */
  project?: $<ProjectFields & $Options>
}
export interface InviteEnterpriseAdminPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The created enterprise administrator invitation. */
  invitation?: $<EnterpriseAdministratorInvitationFields & $Options>
}
export interface InviteEnterpriseMemberPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The created enterprise member invitation. */
  invitation?: $<EnterpriseMemberInvitationFields & $Options>
}
export interface IpAllowListEntryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<IpAllowListEntryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<IpAllowListEntryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface IpAllowListEntryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<IpAllowListEntryFields & $Options>
}
export interface IpAllowListEntryFields {
  __typename?: $Pick
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the IpAllowListEntry object */
  id?: $Pick
  /** Whether the entry is currently active. */
  isActive?: $Pick
  /** The name of the IP allow list entry. */
  name?: $Pick
  /** The owner of the IP allow list entry. */
  owner?: $<IpAllowListOwnerPossibleTypes & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface IssueCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<IssueCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<IssueCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface IssueCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<IssueCommentFields & $Options>
}
export interface IssueCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the IssueComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** Identifies the issue associated with the comment. */
  issue?: $<IssueFields & $Options>
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** Returns the pull request associated with the comment, if this comment was made on a
   * pull request. */
  pullRequest?: $<PullRequestFields & $Options>
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: IssueCommentReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this issue comment */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this issue comment */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: IssueCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface IssueConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<IssueEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<IssueFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface IssueContributionsByRepositoryFields {
  __typename?: $Pick
  /** The issue contributions. */
  contributions?: $<CreatedIssueContributionConnectionFields & { $args?: IssueContributionsByRepositoryContributionsArgs } & $Options>
  /** The repository in which the issues were opened. */
  repository?: $<RepositoryFields & $Options>
}
export interface IssueEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<IssueFields & $Options>
}
export interface IssueFields {
  __typename?: $Pick
  /** Reason that the conversation was locked. */
  activeLockReason?: $Pick
  /** A list of Users assigned to this object. */
  assignees?: $<UserConnectionFields & { $args?: IssueAssigneesArgs } & $Options>
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** Identifies the body of the issue. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The http path for this issue body */
  bodyResourcePath?: $Pick
  /** Identifies the body of the issue rendered to text. */
  bodyText?: $Pick
  /** The http URL for this issue body */
  bodyUrl?: $Pick
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** List of open pull requests referenced from this issue */
  closedByPullRequestsReferences?: $<PullRequestConnectionFields & { $args?: IssueClosedByPullRequestsReferencesArgs } & $Options>
  /** A list of comments associated with the Issue. */
  comments?: $<IssueCommentConnectionFields & { $args?: IssueCommentsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The hovercard information for this issue */
  hovercard?: $<HovercardFields & { $args?: IssueHovercardArgs } & $Options>
  /** The Node ID of the Issue object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  isPinned?: $Pick
  /** Is this issue read by the viewer */
  isReadByViewer?: $Pick
  /** A list of labels associated with the object. */
  labels?: $<LabelConnectionFields & { $args?: IssueLabelsArgs } & $Options>
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Branches linked to this issue. */
  linkedBranches?: $<LinkedBranchConnectionFields & { $args?: IssueLinkedBranchesArgs } & $Options>
  /** `true` if the object is locked */
  locked?: $Pick
  /** Identifies the milestone associated with the issue. */
  milestone?: $<MilestoneFields & $Options>
  /** Identifies the issue number. */
  number?: $Pick
  /** The parent entity of the issue. */
  parent?: $<IssueFields & $Options>
  /** A list of Users that are participating in the Issue conversation. */
  participants?: $<UserConnectionFields & { $args?: IssueParticipantsArgs } & $Options>
  /** List of project cards associated with this issue. */
  projectCards?: $<ProjectCardConnectionFields & { $args?: IssueProjectCardsArgs } & $Options>
  /** List of project items associated with this issue. */
  projectItems?: $<ProjectV2ItemConnectionFields & { $args?: IssueProjectItemsArgs } & $Options>
  /** Find a project by number. */
  projectV2?: $<ProjectV2Fields & { $args: IssueProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: IssueProjectsV2Args } & $Options>
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: IssueReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this issue */
  resourcePath?: $Pick
  /** Identifies the state of the issue. */
  state?: $Pick
  /** Identifies the reason for the issue state. */
  stateReason?: $Scalar | $<$Options & { $args?: IssueStateReasonArgs }>
  /** A list of sub-issues associated with the Issue. */
  subIssues?: $<IssueConnectionFields & { $args?: IssueSubIssuesArgs } & $Options>
  /** Summary of the state of an issue's sub-issues */
  subIssuesSummary?: $<SubIssuesSummaryFields & $Options>
  /** A list of events, comments, commits, etc. associated with the issue.
   *
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC. */
  timeline?: $<IssueTimelineConnectionFields & { $args?: IssueTimelineArgs } & $Options>
  /** A list of events, comments, commits, etc. associated with the issue. */
  timelineItems?: $<IssueTimelineItemsConnectionFields & { $args?: IssueTimelineItemsArgs } & $Options>
  /** Identifies the issue title. */
  title?: $Pick
  /** Identifies the issue title rendered to HTML. */
  titleHTML?: $Pick
  /** A list of issues that track this issue */
  trackedInIssues?: $<IssueConnectionFields & { $args?: IssueTrackedInIssuesArgs } & $Options>
  /** A list of issues tracked inside the current issue */
  trackedIssues?: $<IssueConnectionFields & { $args?: IssueTrackedIssuesArgs } & $Options>
  /** The number of tracked issues for this issue */
  trackedIssuesCount?: $Scalar | $<$Options & { $args?: IssueTrackedIssuesCountArgs }>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this issue */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: IssueUserContentEditsArgs } & $Options>
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: $Pick
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: $Pick
}
export interface IssueTemplateFields {
  __typename?: $Pick
  /** The template purpose. */
  about?: $Pick
  /** The suggested assignees. */
  assignees?: $<UserConnectionFields & { $args?: IssueTemplateAssigneesArgs } & $Options>
  /** The suggested issue body. */
  body?: $Pick
  /** The template filename. */
  filename?: $Pick
  /** The suggested issue labels */
  labels?: $<LabelConnectionFields & { $args?: IssueTemplateLabelsArgs } & $Options>
  /** The template name. */
  name?: $Pick
  /** The suggested issue title. */
  title?: $Pick
}
export interface IssueTimelineConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<IssueTimelineItemEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<IssueTimelineItemPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface IssueTimelineItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<IssueTimelineItemPossibleTypes & $Options>
}
export interface IssueTimelineItemsConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<IssueTimelineItemsEdgeFields & $Options>
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount?: $Pick
  /** A list of nodes. */
  nodes?: $<IssueTimelineItemsPossibleTypes & $Options>
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount?: $Pick
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt?: $Pick
}
export interface IssueTimelineItemsEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<IssueTimelineItemsPossibleTypes & $Options>
}
export interface JoinedGitHubContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface LabelableFields {
  __typename?: $Pick
  /** A list of labels associated with the object. */
  labels?: $<LabelConnectionFields & { $args?: LabelableLabelsArgs } & $Options>
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel?: $Pick
}
export interface LabelConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<LabelEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<LabelFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface LabeledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the LabeledEvent object */
  id?: $Pick
  /** Identifies the label associated with the 'labeled' event. */
  label?: $<LabelFields & $Options>
  /** Identifies the `Labelable` associated with the event. */
  labelable?: $<LabelableFields & LabelablePossibleTypes & $Options>
}
export interface LabelEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<LabelFields & $Options>
}
export interface LabelFields {
  __typename?: $Pick
  /** Identifies the label color. */
  color?: $Pick
  /** Identifies the date and time when the label was created. */
  createdAt?: $Pick
  /** A brief description of this label. */
  description?: $Pick
  /** The Node ID of the Label object */
  id?: $Pick
  /** Indicates whether or not this is a default label. */
  isDefault?: $Pick
  /** A list of issues associated with this label. */
  issues?: $<IssueConnectionFields & { $args?: LabelIssuesArgs } & $Options>
  /** Identifies the label name. */
  name?: $Pick
  /** A list of pull requests associated with this label. */
  pullRequests?: $<PullRequestConnectionFields & { $args?: LabelPullRequestsArgs } & $Options>
  /** The repository associated with this label. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this label. */
  resourcePath?: $Pick
  /** Identifies the date and time when the label was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this label. */
  url?: $Pick
}
export interface LanguageConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<LanguageEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<LanguageFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** The total size in bytes of files written in that language. */
  totalSize?: $Pick
}
export interface LanguageEdgeFields {
  __typename?: $Pick
  cursor?: $Pick
  node?: $<LanguageFields & $Options>
  /** The number of bytes of code written in the language. */
  size?: $Pick
}
export interface LanguageFields {
  __typename?: $Pick
  /** The color defined for the current language. */
  color?: $Pick
  /** The Node ID of the Language object */
  id?: $Pick
  /** The name of the current language. */
  name?: $Pick
}
export interface LicenseFields {
  __typename?: $Pick
  /** The full text of the license */
  body?: $Pick
  /** The conditions set by the license */
  conditions?: $<LicenseRuleFields & $Options>
  /** A human-readable description of the license */
  description?: $Pick
  /** Whether the license should be featured */
  featured?: $Pick
  /** Whether the license should be displayed in license pickers */
  hidden?: $Pick
  /** The Node ID of the License object */
  id?: $Pick
  /** Instructions on how to implement the license */
  implementation?: $Pick
  /** The lowercased SPDX ID of the license */
  key?: $Pick
  /** The limitations set by the license */
  limitations?: $<LicenseRuleFields & $Options>
  /** The license full name specified by <https://spdx.org/licenses> */
  name?: $Pick
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname?: $Pick
  /** The permissions set by the license */
  permissions?: $<LicenseRuleFields & $Options>
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense?: $Pick
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId?: $Pick
  /** URL to the license on <https://choosealicense.com> */
  url?: $Pick
}
export interface LicenseRuleFields {
  __typename?: $Pick
  /** A description of the rule */
  description?: $Pick
  /** The machine-readable rule key */
  key?: $Pick
  /** The human-readable rule label */
  label?: $Pick
}
export interface LinkedBranchConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<LinkedBranchEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<LinkedBranchFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface LinkedBranchEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<LinkedBranchFields & $Options>
}
export interface LinkedBranchFields {
  __typename?: $Pick
  /** The Node ID of the LinkedBranch object */
  id?: $Pick
  /** The branch's ref. */
  ref?: $<RefFields & $Options>
}
export interface LinkProjectV2ToRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository the project is linked to. */
  repository?: $<RepositoryFields & $Options>
}
export interface LinkProjectV2ToTeamPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The team the project is linked to */
  team?: $<TeamFields & $Options>
}
export interface LinkRepositoryToProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The linked Project. */
  project?: $<ProjectFields & $Options>
  /** The linked Repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface LockableFields {
  __typename?: $Pick
  /** Reason that the conversation was locked. */
  activeLockReason?: $Pick
  /** `true` if the object is locked */
  locked?: $Pick
}
export interface LockedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the LockedEvent object */
  id?: $Pick
  /** Reason that the conversation was locked (optional). */
  lockReason?: $Pick
  /** Object that was locked. */
  lockable?: $<LockableFields & LockablePossibleTypes & $Options>
}
export interface LockLockablePayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item that was locked. */
  lockedRecord?: $<LockableFields & LockablePossibleTypes & $Options>
}
export interface MannequinConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<MannequinEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<MannequinFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface MannequinEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<MannequinFields & $Options>
}
export interface MannequinFields {
  __typename?: $Pick
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: MannequinAvatarUrlArgs }>
  /** The user that has claimed the data attributed to this mannequin. */
  claimant?: $<UserFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The mannequin's email on the source instance. */
  email?: $Pick
  /** The Node ID of the Mannequin object */
  id?: $Pick
  /** The username of the actor. */
  login?: $Pick
  /** The HTML path to this resource. */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The URL to this resource. */
  url?: $Pick
}
export interface MarkDiscussionCommentAsAnswerPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that includes the chosen comment. */
  discussion?: $<DiscussionFields & $Options>
}
export interface MarkedAsDuplicateEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: $<IssueOrPullRequestPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: $<IssueOrPullRequestPossibleTypes & $Options>
  /** The Node ID of the MarkedAsDuplicateEvent object */
  id?: $Pick
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository?: $Pick
}
export interface MarketplaceCategoryFields {
  __typename?: $Pick
  /** The category's description. */
  description?: $Pick
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks?: $Pick
  /** The Node ID of the MarketplaceCategory object */
  id?: $Pick
  /** The category's name. */
  name?: $Pick
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount?: $Pick
  /** The HTTP path for this Marketplace category. */
  resourcePath?: $Pick
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount?: $Pick
  /** The short name of the category used in its URL. */
  slug?: $Pick
  /** The HTTP URL for this Marketplace category. */
  url?: $Pick
}
export interface MarketplaceListingConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<MarketplaceListingEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<MarketplaceListingFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface MarketplaceListingEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<MarketplaceListingFields & $Options>
}
export interface MarketplaceListingFields {
  __typename?: $Pick
  /** The GitHub App this listing represents. */
  app?: $<AppFields & $Options>
  /** URL to the listing owner's company site. */
  companyUrl?: $Pick
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath?: $Pick
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl?: $Pick
  /** URL to the listing's documentation. */
  documentationUrl?: $Pick
  /** The listing's detailed description. */
  extendedDescription?: $Pick
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML?: $Pick
  /** The listing's introductory description. */
  fullDescription?: $Pick
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML?: $Pick
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans?: $Pick
  /** Does this listing have a terms of service link? */
  hasTermsOfService?: $Pick
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner?: $Pick
  /** A technical description of how this app works with GitHub. */
  howItWorks?: $Pick
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML?: $Pick
  /** The Node ID of the MarketplaceListing object */
  id?: $Pick
  /** URL to install the product to the viewer's account or organization. */
  installationUrl?: $Pick
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer?: $Pick
  /** Whether this listing has been removed from the Marketplace. */
  isArchived?: $Pick
  /** Whether this listing is still an editable draft that has not been submitted
   * for review and is not publicly visible in the Marketplace. */
  isDraft?: $Pick
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid?: $Pick
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic?: $Pick
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected?: $Pick
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified?: $Pick
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending?: $Pick
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft?: $Pick
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified?: $Pick
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified?: $Pick
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor?: $Pick
  /** URL for the listing's logo image. */
  logoUrl?: $Scalar | $<$Options & { $args?: MarketplaceListingLogoUrlArgs }>
  /** The listing's full name. */
  name?: $Pick
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription?: $Pick
  /** URL to the listing's detailed pricing. */
  pricingUrl?: $Pick
  /** The category that best describes the listing. */
  primaryCategory?: $<MarketplaceCategoryFields & $Options>
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl?: $Pick
  /** The HTTP path for the Marketplace listing. */
  resourcePath?: $Pick
  /** The URLs for the listing's screenshots. */
  screenshotUrls?: $Pick
  /** An alternate category that describes the listing. */
  secondaryCategory?: $<MarketplaceCategoryFields & $Options>
  /** The listing's very short description. */
  shortDescription?: $Pick
  /** The short name of the listing used in its URL. */
  slug?: $Pick
  /** URL to the listing's status page. */
  statusUrl?: $Pick
  /** An email address for support for this listing's app. */
  supportEmail?: $Pick
  /** Either a URL or an email address for support for this listing's app, may
   * return an empty string for listings that do not require a support URL. */
  supportUrl?: $Pick
  /** URL to the listing's terms of service. */
  termsOfServiceUrl?: $Pick
  /** The HTTP URL for the Marketplace listing. */
  url?: $Pick
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans?: $Pick
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove?: $Pick
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist?: $Pick
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit?: $Pick
  /** Can the current viewer edit the primary and secondary category of this
   * Marketplace listing. */
  viewerCanEditCategories?: $Pick
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans?: $Pick
  /** Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again. */
  viewerCanRedraft?: $Pick
  /** Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely. */
  viewerCanReject?: $Pick
  /** Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified. */
  viewerCanRequestApproval?: $Pick
  /** Indicates whether the current user has an active subscription to this Marketplace listing. */
  viewerHasPurchased?: $Pick
  /** Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns. */
  viewerHasPurchasedForAllOrganizations?: $Pick
  /** Does the current viewer role allow them to administer this Marketplace listing. */
  viewerIsListingAdmin?: $Pick
}
export interface MarkFileAsViewedPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated pull request. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface MarkProjectV2AsTemplatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface MarkPullRequestReadyForReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that is ready for review. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface MaxFilePathLengthParametersFields {
  __typename?: $Pick
  /** The maximum amount of characters allowed in file paths */
  maxFilePathLength?: $Pick
}
export interface MaxFileSizeParametersFields {
  __typename?: $Pick
  /** The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */
  maxFileSize?: $Pick
}
export interface MemberFeatureRequestNotificationFields {
  __typename?: $Pick
  /** Represents member feature request body containing entity name and the number of feature requests */
  body?: $Pick
  /** The Node ID of the MemberFeatureRequestNotification object */
  id?: $Pick
  /** Represents member feature request notification title */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface MembersCanDeleteReposClearAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the MembersCanDeleteReposClearAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface MembersCanDeleteReposDisableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the MembersCanDeleteReposDisableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface MembersCanDeleteReposEnableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the MembersCanDeleteReposEnableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface MemberStatusableFields {
  __typename?: $Pick
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: $<UserStatusConnectionFields & { $args?: MemberStatusableMemberStatusesArgs } & $Options>
}
export interface MentionedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the MentionedEvent object */
  id?: $Pick
}
export interface MergeBranchPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The resulting merge Commit. */
  mergeCommit?: $<CommitFields & $Options>
}
export interface MergedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the commit associated with the `merge` event. */
  commit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the MergedEvent object */
  id?: $Pick
  /** Identifies the Ref associated with the `merge` event. */
  mergeRef?: $<RefFields & $Options>
  /** Identifies the name of the Ref associated with the `merge` event. */
  mergeRefName?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The HTTP path for this merged event. */
  resourcePath?: $Pick
  /** The HTTP URL for this merged event. */
  url?: $Pick
}
export interface MergePullRequestPayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that was merged. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface MergeQueueConfigurationFields {
  __typename?: $Pick
  /** The amount of time in minutes to wait for a check response before considering it a failure. */
  checkResponseTimeout?: $Pick
  /** The maximum number of entries to build at once. */
  maximumEntriesToBuild?: $Pick
  /** The maximum number of entries to merge at once. */
  maximumEntriesToMerge?: $Pick
  /** The merge method to use for this queue. */
  mergeMethod?: $Pick
  /** The strategy to use when merging entries. */
  mergingStrategy?: $Pick
  /** The minimum number of entries required to merge at once. */
  minimumEntriesToMerge?: $Pick
  /** The amount of time in minutes to wait before ignoring the minumum number of
   * entries in the queue requirement and merging a collection of entries */
  minimumEntriesToMergeWaitTime?: $Pick
}
export interface MergeQueueEntryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<MergeQueueEntryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<MergeQueueEntryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface MergeQueueEntryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<MergeQueueEntryFields & $Options>
}
export interface MergeQueueEntryFields {
  __typename?: $Pick
  /** The base commit for this entry */
  baseCommit?: $<CommitFields & $Options>
  /** The date and time this entry was added to the merge queue */
  enqueuedAt?: $Pick
  /** The actor that enqueued this entry */
  enqueuer?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The estimated time in seconds until this entry will be merged */
  estimatedTimeToMerge?: $Pick
  /** The head commit for this entry */
  headCommit?: $<CommitFields & $Options>
  /** The Node ID of the MergeQueueEntry object */
  id?: $Pick
  /** Whether this pull request should jump the queue */
  jump?: $Pick
  /** The merge queue that this entry belongs to */
  mergeQueue?: $<MergeQueueFields & $Options>
  /** The position of this entry in the queue */
  position?: $Pick
  /** The pull request that will be added to a merge group */
  pullRequest?: $<PullRequestFields & $Options>
  /** Does this pull request need to be deployed on its own */
  solo?: $Pick
  /** The state of this entry in the queue */
  state?: $Pick
}
export interface MergeQueueFields {
  __typename?: $Pick
  /** The configuration for this merge queue */
  configuration?: $<MergeQueueConfigurationFields & $Options>
  /** The entries in the queue */
  entries?: $<MergeQueueEntryConnectionFields & { $args?: MergeQueueEntriesArgs } & $Options>
  /** The Node ID of the MergeQueue object */
  id?: $Pick
  /** The estimated time in seconds until a newly added entry would be merged */
  nextEntryEstimatedTimeToMerge?: $Pick
  /** The repository this merge queue belongs to */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this merge queue */
  resourcePath?: $Pick
  /** The HTTP URL for this merge queue */
  url?: $Pick
}
export interface MergeQueueParametersFields {
  __typename?: $Pick
  /** Maximum time for a required status check to report a conclusion. After this
   * much time has elapsed, checks that have not reported a conclusion will be
   * assumed to have failed */
  checkResponseTimeoutMinutes?: $Pick
  /** When set to ALLGREEN, the merge commit created by merge queue for each PR in
   * the group must pass all required checks to merge. When set to HEADGREEN, only
   * the commit at the head of the merge group, i.e. the commit containing changes
   * from all of the PRs in the group, must pass its required checks to merge. */
  groupingStrategy?: $Pick
  /** Limit the number of queued pull requests requesting checks and workflow runs at the same time. */
  maxEntriesToBuild?: $Pick
  /** The maximum number of PRs that will be merged together in a group. */
  maxEntriesToMerge?: $Pick
  /** Method to use when merging changes from queued pull requests. */
  mergeMethod?: $Pick
  /** The minimum number of PRs that will be merged together in a group. */
  minEntriesToMerge?: $Pick
  /** The time merge queue should wait after the first PR is added to the queue for
   * the minimum group size to be met. After this time has elapsed, the minimum
   * group size will be ignored and a smaller group will be merged. */
  minEntriesToMergeWaitMinutes?: $Pick
}
export interface MigrationFields {
  __typename?: $Pick
  /** The migration flag to continue on error. */
  continueOnError?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The reason the migration failed. */
  failureReason?: $Pick
  /** The Node ID of the Migration object */
  id?: $Pick
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: $Pick
  /** The migration source. */
  migrationSource?: $<MigrationSourceFields & $Options>
  /** The target repository name. */
  repositoryName?: $Pick
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl?: $Pick
  /** The migration state. */
  state?: $Pick
  /** The number of warnings encountered for this migration. To review the warnings,
   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount?: $Pick
}
export interface MigrationSourceFields {
  __typename?: $Pick
  /** The Node ID of the MigrationSource object */
  id?: $Pick
  /** The migration source name. */
  name?: $Pick
  /** The migration source type. */
  type?: $Pick
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: $Pick
}
export interface MilestoneConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<MilestoneEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<MilestoneFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface MilestonedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the MilestonedEvent object */
  id?: $Pick
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle?: $Pick
  /** Object referenced by event. */
  subject?: $<MilestoneItemPossibleTypes & $Options>
}
export interface MilestoneEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<MilestoneFields & $Options>
}
export interface MilestoneFields {
  __typename?: $Pick
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the actor who created the milestone. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the description of the milestone. */
  description?: $Pick
  /** Identifies the due date of the milestone. */
  dueOn?: $Pick
  /** The Node ID of the Milestone object */
  id?: $Pick
  /** A list of issues associated with the milestone. */
  issues?: $<IssueConnectionFields & { $args?: MilestoneIssuesArgs } & $Options>
  /** Identifies the number of the milestone. */
  number?: $Pick
  /** Identifies the percentage complete for the milestone */
  progressPercentage?: $Pick
  /** A list of pull requests associated with the milestone. */
  pullRequests?: $<PullRequestConnectionFields & { $args?: MilestonePullRequestsArgs } & $Options>
  /** The repository associated with this milestone. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this milestone */
  resourcePath?: $Pick
  /** Identifies the state of the milestone. */
  state?: $Pick
  /** Identifies the title of the milestone. */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this milestone */
  url?: $Pick
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
}
export interface MinimizableFields {
  __typename?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
}
export interface MinimizeCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The comment that was minimized. */
  minimizedComment?: $<MinimizableFields & MinimizablePossibleTypes & $Options>
}
export interface MovedColumnsInProjectEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the MovedColumnsInProjectEvent object */
  id?: $Pick
  /** Column name the issue or pull request was moved from. */
  previousProjectColumnName?: $Pick
  /** Project referenced by event. */
  project?: $<ProjectFields & $Options>
  /** Project card referenced by this project event. */
  projectCard?: $<ProjectCardFields & $Options>
  /** Column name the issue or pull request was moved to. */
  projectColumnName?: $Pick
}
export interface MoveProjectCardPayloadFields {
  __typename?: $Pick
  /** The new edge of the moved card. */
  cardEdge?: $<ProjectCardEdgeFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface MoveProjectColumnPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new edge of the moved column. */
  columnEdge?: $<ProjectColumnEdgeFields & $Options>
}
export interface MutationFields {
  __typename?: $Pick
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations?: $<AbortQueuedMigrationsPayloadFields & { $args: MutationAbortQueuedMigrationsArgs } & $Options>
  /** Abort a repository migration queued or in progress. */
  abortRepositoryMigration?: $<AbortRepositoryMigrationPayloadFields & { $args: MutationAbortRepositoryMigrationArgs } & $Options>
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation?: $<AcceptEnterpriseAdministratorInvitationPayloadFields & { $args: MutationAcceptEnterpriseAdministratorInvitationArgs } & $Options>
  /** Accepts a pending invitation for a user to become an unaffiliated member of an enterprise. */
  acceptEnterpriseMemberInvitation?: $<AcceptEnterpriseMemberInvitationPayloadFields & { $args: MutationAcceptEnterpriseMemberInvitationArgs } & $Options>
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion?: $<AcceptTopicSuggestionPayloadFields & { $args: MutationAcceptTopicSuggestionArgs } & $Options>
  /** Access user namespace repository for a temporary duration. */
  accessUserNamespaceRepository?: $<AccessUserNamespaceRepositoryPayloadFields & { $args: MutationAccessUserNamespaceRepositoryArgs } & $Options>
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable?: $<AddAssigneesToAssignablePayloadFields & { $args: MutationAddAssigneesToAssignableArgs } & $Options>
  /** Adds a comment to an Issue or Pull Request. */
  addComment?: $<AddCommentPayloadFields & { $args: MutationAddCommentArgs } & $Options>
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment?: $<AddDiscussionCommentPayloadFields & { $args: MutationAddDiscussionCommentArgs } & $Options>
  /** Vote for an option in a discussion poll. */
  addDiscussionPollVote?: $<AddDiscussionPollVotePayloadFields & { $args: MutationAddDiscussionPollVoteArgs } & $Options>
  /** Adds enterprise members to an organization within the enterprise. */
  addEnterpriseOrganizationMember?: $<AddEnterpriseOrganizationMemberPayloadFields & { $args: MutationAddEnterpriseOrganizationMemberArgs } & $Options>
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement?: $<AddEnterpriseSupportEntitlementPayloadFields & { $args: MutationAddEnterpriseSupportEntitlementArgs } & $Options>
  /** Adds labels to a labelable object. */
  addLabelsToLabelable?: $<AddLabelsToLabelablePayloadFields & { $args: MutationAddLabelsToLabelableArgs } & $Options>
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard?: $<AddProjectCardPayloadFields & { $args: MutationAddProjectCardArgs } & $Options>
  /** Adds a column to a Project. */
  addProjectColumn?: $<AddProjectColumnPayloadFields & { $args: MutationAddProjectColumnArgs } & $Options>
  /** Creates a new draft issue and add it to a Project. */
  addProjectV2DraftIssue?: $<AddProjectV2DraftIssuePayloadFields & { $args: MutationAddProjectV2DraftIssueArgs } & $Options>
  /** Links an existing content instance to a Project. */
  addProjectV2ItemById?: $<AddProjectV2ItemByIdPayloadFields & { $args: MutationAddProjectV2ItemByIdArgs } & $Options>
  /** Adds a review to a Pull Request. */
  addPullRequestReview?: $<AddPullRequestReviewPayloadFields & { $args: MutationAddPullRequestReviewArgs } & $Options>
  /** Adds a comment to a review. */
  addPullRequestReviewComment?: $<AddPullRequestReviewCommentPayloadFields & { $args: MutationAddPullRequestReviewCommentArgs } & $Options>
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread?: $<AddPullRequestReviewThreadPayloadFields & { $args: MutationAddPullRequestReviewThreadArgs } & $Options>
  /** Adds a reply to an existing Pull Request Review Thread. */
  addPullRequestReviewThreadReply?: $<AddPullRequestReviewThreadReplyPayloadFields & { $args: MutationAddPullRequestReviewThreadReplyArgs } & $Options>
  /** Adds a reaction to a subject. */
  addReaction?: $<AddReactionPayloadFields & { $args: MutationAddReactionArgs } & $Options>
  /** Adds a star to a Starrable. */
  addStar?: $<AddStarPayloadFields & { $args: MutationAddStarArgs } & $Options>
  /** Adds a sub-issue to a given issue */
  addSubIssue?: $<AddSubIssuePayloadFields & { $args: MutationAddSubIssueArgs } & $Options>
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote?: $<AddUpvotePayloadFields & { $args: MutationAddUpvoteArgs } & $Options>
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain?: $<AddVerifiableDomainPayloadFields & { $args: MutationAddVerifiableDomainArgs } & $Options>
  /** Approve all pending deployments under one or more environments */
  approveDeployments?: $<ApproveDeploymentsPayloadFields & { $args: MutationApproveDeploymentsArgs } & $Options>
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain?: $<ApproveVerifiableDomainPayloadFields & { $args: MutationApproveVerifiableDomainArgs } & $Options>
  /** Archives a ProjectV2Item */
  archiveProjectV2Item?: $<ArchiveProjectV2ItemPayloadFields & { $args: MutationArchiveProjectV2ItemArgs } & $Options>
  /** Marks a repository as archived. */
  archiveRepository?: $<ArchiveRepositoryPayloadFields & { $args: MutationArchiveRepositoryArgs } & $Options>
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation?: $<CancelEnterpriseAdminInvitationPayloadFields & { $args: MutationCancelEnterpriseAdminInvitationArgs } & $Options>
  /** Cancels a pending invitation for an unaffiliated member to join an enterprise. */
  cancelEnterpriseMemberInvitation?: $<CancelEnterpriseMemberInvitationPayloadFields & { $args: MutationCancelEnterpriseMemberInvitationArgs } & $Options>
  /** Cancel an active sponsorship. */
  cancelSponsorship?: $<CancelSponsorshipPayloadFields & { $args: MutationCancelSponsorshipArgs } & $Options>
  /** Update your status on GitHub. */
  changeUserStatus?: $<ChangeUserStatusPayloadFields & { $args: MutationChangeUserStatusArgs } & $Options>
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable?: $<ClearLabelsFromLabelablePayloadFields & { $args: MutationClearLabelsFromLabelableArgs } & $Options>
  /** This mutation clears the value of a field for an item in a Project. Currently
   * only text, number, date, assignees, labels, single-select, iteration and
   * milestone fields are supported. */
  clearProjectV2ItemFieldValue?: $<ClearProjectV2ItemFieldValuePayloadFields & { $args: MutationClearProjectV2ItemFieldValueArgs } & $Options>
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject?: $<CloneProjectPayloadFields & { $args: MutationCloneProjectArgs } & $Options>
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository?: $<CloneTemplateRepositoryPayloadFields & { $args: MutationCloneTemplateRepositoryArgs } & $Options>
  /** Close a discussion. */
  closeDiscussion?: $<CloseDiscussionPayloadFields & { $args: MutationCloseDiscussionArgs } & $Options>
  /** Close an issue. */
  closeIssue?: $<CloseIssuePayloadFields & { $args: MutationCloseIssueArgs } & $Options>
  /** Close a pull request. */
  closePullRequest?: $<ClosePullRequestPayloadFields & { $args: MutationClosePullRequestArgs } & $Options>
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue?: $<ConvertProjectCardNoteToIssuePayloadFields & { $args: MutationConvertProjectCardNoteToIssueArgs } & $Options>
  /** Converts a projectV2 draft issue item to an issue. */
  convertProjectV2DraftIssueItemToIssue?: $<ConvertProjectV2DraftIssueItemToIssuePayloadFields & { $args: MutationConvertProjectV2DraftIssueItemToIssueArgs } & $Options>
  /** Converts a pull request to draft */
  convertPullRequestToDraft?: $<ConvertPullRequestToDraftPayloadFields & { $args: MutationConvertPullRequestToDraftArgs } & $Options>
  /** Copy a project. */
  copyProjectV2?: $<CopyProjectV2PayloadFields & { $args: MutationCopyProjectV2Args } & $Options>
  /** Invites a user to claim reattributable data */
  createAttributionInvitation?: $<CreateAttributionInvitationPayloadFields & { $args: MutationCreateAttributionInvitationArgs } & $Options>
  /** Create a new branch protection rule */
  createBranchProtectionRule?: $<CreateBranchProtectionRulePayloadFields & { $args: MutationCreateBranchProtectionRuleArgs } & $Options>
  /** Create a check run. */
  createCheckRun?: $<CreateCheckRunPayloadFields & { $args: MutationCreateCheckRunArgs } & $Options>
  /** Create a check suite */
  createCheckSuite?: $<CreateCheckSuitePayloadFields & { $args: MutationCreateCheckSuiteArgs } & $Options>
  /** Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface. */
  createCommitOnBranch?: $<CreateCommitOnBranchPayloadFields & { $args: MutationCreateCommitOnBranchArgs } & $Options>
  /** Creates a new deployment event. */
  createDeployment?: $<CreateDeploymentPayloadFields & { $args: MutationCreateDeploymentArgs } & $Options>
  /** Create a deployment status. */
  createDeploymentStatus?: $<CreateDeploymentStatusPayloadFields & { $args: MutationCreateDeploymentStatusArgs } & $Options>
  /** Create a discussion. */
  createDiscussion?: $<CreateDiscussionPayloadFields & { $args: MutationCreateDiscussionArgs } & $Options>
  /** Creates an organization as part of an enterprise account. A personal access
   * token used to create an organization is implicitly permitted to update the
   * organization it created, if the organization is part of an enterprise that has
   * SAML enabled or uses Enterprise Managed Users. If the organization is not part
   * of such an enterprise, and instead has SAML enabled for it individually, the
   * token will then require SAML authorization to continue working against that organization. */
  createEnterpriseOrganization?: $<CreateEnterpriseOrganizationPayloadFields & { $args: MutationCreateEnterpriseOrganizationArgs } & $Options>
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment?: $<CreateEnvironmentPayloadFields & { $args: MutationCreateEnvironmentArgs } & $Options>
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry?: $<CreateIpAllowListEntryPayloadFields & { $args: MutationCreateIpAllowListEntryArgs } & $Options>
  /** Creates a new issue. */
  createIssue?: $<CreateIssuePayloadFields & { $args: MutationCreateIssueArgs } & $Options>
  /** Creates a new label. */
  createLabel?: $<CreateLabelPayloadFields & { $args: MutationCreateLabelArgs } & $Options>
  /** Create a branch linked to an issue. */
  createLinkedBranch?: $<CreateLinkedBranchPayloadFields & { $args: MutationCreateLinkedBranchArgs } & $Options>
  /** Creates a GitHub Enterprise Importer (GEI) migration source. */
  createMigrationSource?: $<CreateMigrationSourcePayloadFields & { $args: MutationCreateMigrationSourceArgs } & $Options>
  /** Creates a new project. */
  createProject?: $<CreateProjectPayloadFields & { $args: MutationCreateProjectArgs } & $Options>
  /** Creates a new project. */
  createProjectV2?: $<CreateProjectV2PayloadFields & { $args: MutationCreateProjectV2Args } & $Options>
  /** Create a new project field. */
  createProjectV2Field?: $<CreateProjectV2FieldPayloadFields & { $args: MutationCreateProjectV2FieldArgs } & $Options>
  /** Creates a status update within a Project. */
  createProjectV2StatusUpdate?: $<CreateProjectV2StatusUpdatePayloadFields & { $args: MutationCreateProjectV2StatusUpdateArgs } & $Options>
  /** Create a new pull request */
  createPullRequest?: $<CreatePullRequestPayloadFields & { $args: MutationCreatePullRequestArgs } & $Options>
  /** Create a new Git Ref. */
  createRef?: $<CreateRefPayloadFields & { $args: MutationCreateRefArgs } & $Options>
  /** Create a new repository. */
  createRepository?: $<CreateRepositoryPayloadFields & { $args: MutationCreateRepositoryArgs } & $Options>
  /** Create a repository ruleset */
  createRepositoryRuleset?: $<CreateRepositoryRulesetPayloadFields & { $args: MutationCreateRepositoryRulesetArgs } & $Options>
  /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */
  createSponsorsListing?: $<CreateSponsorsListingPayloadFields & { $args: MutationCreateSponsorsListingArgs } & $Options>
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier?: $<CreateSponsorsTierPayloadFields & { $args: MutationCreateSponsorsTierArgs } & $Options>
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship?: $<CreateSponsorshipPayloadFields & { $args: MutationCreateSponsorshipArgs } & $Options>
  /** Make many sponsorships for different sponsorable users or organizations at
   * once. Can only sponsor those who have a public GitHub Sponsors profile. */
  createSponsorships?: $<CreateSponsorshipsPayloadFields & { $args: MutationCreateSponsorshipsArgs } & $Options>
  /** Creates a new team discussion. */
  createTeamDiscussion?: $<CreateTeamDiscussionPayloadFields & { $args: MutationCreateTeamDiscussionArgs } & $Options>
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment?: $<CreateTeamDiscussionCommentPayloadFields & { $args: MutationCreateTeamDiscussionCommentArgs } & $Options>
  /** Creates a new user list. */
  createUserList?: $<CreateUserListPayloadFields & { $args: MutationCreateUserListArgs } & $Options>
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion?: $<DeclineTopicSuggestionPayloadFields & { $args: MutationDeclineTopicSuggestionArgs } & $Options>
  /** Delete a branch protection rule */
  deleteBranchProtectionRule?: $<DeleteBranchProtectionRulePayloadFields & { $args: MutationDeleteBranchProtectionRuleArgs } & $Options>
  /** Deletes a deployment. */
  deleteDeployment?: $<DeleteDeploymentPayloadFields & { $args: MutationDeleteDeploymentArgs } & $Options>
  /** Delete a discussion and all of its replies. */
  deleteDiscussion?: $<DeleteDiscussionPayloadFields & { $args: MutationDeleteDiscussionArgs } & $Options>
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment?: $<DeleteDiscussionCommentPayloadFields & { $args: MutationDeleteDiscussionCommentArgs } & $Options>
  /** Deletes an environment */
  deleteEnvironment?: $<DeleteEnvironmentPayloadFields & { $args: MutationDeleteEnvironmentArgs } & $Options>
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry?: $<DeleteIpAllowListEntryPayloadFields & { $args: MutationDeleteIpAllowListEntryArgs } & $Options>
  /** Deletes an Issue object. */
  deleteIssue?: $<DeleteIssuePayloadFields & { $args: MutationDeleteIssueArgs } & $Options>
  /** Deletes an IssueComment object. */
  deleteIssueComment?: $<DeleteIssueCommentPayloadFields & { $args: MutationDeleteIssueCommentArgs } & $Options>
  /** Deletes a label. */
  deleteLabel?: $<DeleteLabelPayloadFields & { $args: MutationDeleteLabelArgs } & $Options>
  /** Unlink a branch from an issue. */
  deleteLinkedBranch?: $<DeleteLinkedBranchPayloadFields & { $args: MutationDeleteLinkedBranchArgs } & $Options>
  /** Delete a package version. */
  deletePackageVersion?: $<DeletePackageVersionPayloadFields & { $args: MutationDeletePackageVersionArgs } & $Options>
  /** Deletes a project. */
  deleteProject?: $<DeleteProjectPayloadFields & { $args: MutationDeleteProjectArgs } & $Options>
  /** Deletes a project card. */
  deleteProjectCard?: $<DeleteProjectCardPayloadFields & { $args: MutationDeleteProjectCardArgs } & $Options>
  /** Deletes a project column. */
  deleteProjectColumn?: $<DeleteProjectColumnPayloadFields & { $args: MutationDeleteProjectColumnArgs } & $Options>
  /** Delete a project. */
  deleteProjectV2?: $<DeleteProjectV2PayloadFields & { $args: MutationDeleteProjectV2Args } & $Options>
  /** Delete a project field. */
  deleteProjectV2Field?: $<DeleteProjectV2FieldPayloadFields & { $args: MutationDeleteProjectV2FieldArgs } & $Options>
  /** Deletes an item from a Project. */
  deleteProjectV2Item?: $<DeleteProjectV2ItemPayloadFields & { $args: MutationDeleteProjectV2ItemArgs } & $Options>
  /** Deletes a project status update. */
  deleteProjectV2StatusUpdate?: $<DeleteProjectV2StatusUpdatePayloadFields & { $args: MutationDeleteProjectV2StatusUpdateArgs } & $Options>
  /** Deletes a project workflow. */
  deleteProjectV2Workflow?: $<DeleteProjectV2WorkflowPayloadFields & { $args: MutationDeleteProjectV2WorkflowArgs } & $Options>
  /** Deletes a pull request review. */
  deletePullRequestReview?: $<DeletePullRequestReviewPayloadFields & { $args: MutationDeletePullRequestReviewArgs } & $Options>
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment?: $<DeletePullRequestReviewCommentPayloadFields & { $args: MutationDeletePullRequestReviewCommentArgs } & $Options>
  /** Delete a Git Ref. */
  deleteRef?: $<DeleteRefPayloadFields & { $args: MutationDeleteRefArgs } & $Options>
  /** Delete a repository ruleset */
  deleteRepositoryRuleset?: $<DeleteRepositoryRulesetPayloadFields & { $args: MutationDeleteRepositoryRulesetArgs } & $Options>
  /** Deletes a team discussion. */
  deleteTeamDiscussion?: $<DeleteTeamDiscussionPayloadFields & { $args: MutationDeleteTeamDiscussionArgs } & $Options>
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment?: $<DeleteTeamDiscussionCommentPayloadFields & { $args: MutationDeleteTeamDiscussionCommentArgs } & $Options>
  /** Deletes a user list. */
  deleteUserList?: $<DeleteUserListPayloadFields & { $args: MutationDeleteUserListArgs } & $Options>
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain?: $<DeleteVerifiableDomainPayloadFields & { $args: MutationDeleteVerifiableDomainArgs } & $Options>
  /** Remove a pull request from the merge queue. */
  dequeuePullRequest?: $<DequeuePullRequestPayloadFields & { $args: MutationDequeuePullRequestArgs } & $Options>
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge?: $<DisablePullRequestAutoMergePayloadFields & { $args: MutationDisablePullRequestAutoMergeArgs } & $Options>
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview?: $<DismissPullRequestReviewPayloadFields & { $args: MutationDismissPullRequestReviewArgs } & $Options>
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert?: $<DismissRepositoryVulnerabilityAlertPayloadFields & { $args: MutationDismissRepositoryVulnerabilityAlertArgs } & $Options>
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge?: $<EnablePullRequestAutoMergePayloadFields & { $args: MutationEnablePullRequestAutoMergeArgs } & $Options>
  /** Add a pull request to the merge queue. */
  enqueuePullRequest?: $<EnqueuePullRequestPayloadFields & { $args: MutationEnqueuePullRequestArgs } & $Options>
  /** Follow an organization. */
  followOrganization?: $<FollowOrganizationPayloadFields & { $args: MutationFollowOrganizationArgs } & $Options>
  /** Follow a user. */
  followUser?: $<FollowUserPayloadFields & { $args: MutationFollowUserArgs } & $Options>
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole?: $<GrantEnterpriseOrganizationsMigratorRolePayloadFields & { $args: MutationGrantEnterpriseOrganizationsMigratorRoleArgs } & $Options>
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole?: $<GrantMigratorRolePayloadFields & { $args: MutationGrantMigratorRoleArgs } & $Options>
  /** Creates a new project by importing columns and a list of issues/PRs. */
  importProject?: $<ImportProjectPayloadFields & { $args: MutationImportProjectArgs } & $Options>
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin?: $<InviteEnterpriseAdminPayloadFields & { $args: MutationInviteEnterpriseAdminArgs } & $Options>
  /** Invite someone to become an unaffiliated member of the enterprise. */
  inviteEnterpriseMember?: $<InviteEnterpriseMemberPayloadFields & { $args: MutationInviteEnterpriseMemberArgs } & $Options>
  /** Links a project to a repository. */
  linkProjectV2ToRepository?: $<LinkProjectV2ToRepositoryPayloadFields & { $args: MutationLinkProjectV2ToRepositoryArgs } & $Options>
  /** Links a project to a team. */
  linkProjectV2ToTeam?: $<LinkProjectV2ToTeamPayloadFields & { $args: MutationLinkProjectV2ToTeamArgs } & $Options>
  /** Creates a repository link for a project. */
  linkRepositoryToProject?: $<LinkRepositoryToProjectPayloadFields & { $args: MutationLinkRepositoryToProjectArgs } & $Options>
  /** Lock a lockable object */
  lockLockable?: $<LockLockablePayloadFields & { $args: MutationLockLockableArgs } & $Options>
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer?: $<MarkDiscussionCommentAsAnswerPayloadFields & { $args: MutationMarkDiscussionCommentAsAnswerArgs } & $Options>
  /** Mark a pull request file as viewed */
  markFileAsViewed?: $<MarkFileAsViewedPayloadFields & { $args: MutationMarkFileAsViewedArgs } & $Options>
  /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */
  markProjectV2AsTemplate?: $<MarkProjectV2AsTemplatePayloadFields & { $args: MutationMarkProjectV2AsTemplateArgs } & $Options>
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview?: $<MarkPullRequestReadyForReviewPayloadFields & { $args: MutationMarkPullRequestReadyForReviewArgs } & $Options>
  /** Merge a head into a branch. */
  mergeBranch?: $<MergeBranchPayloadFields & { $args: MutationMergeBranchArgs } & $Options>
  /** Merge a pull request. */
  mergePullRequest?: $<MergePullRequestPayloadFields & { $args: MutationMergePullRequestArgs } & $Options>
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment?: $<MinimizeCommentPayloadFields & { $args: MutationMinimizeCommentArgs } & $Options>
  /** Moves a project card to another place. */
  moveProjectCard?: $<MoveProjectCardPayloadFields & { $args: MutationMoveProjectCardArgs } & $Options>
  /** Moves a project column to another place. */
  moveProjectColumn?: $<MoveProjectColumnPayloadFields & { $args: MutationMoveProjectColumnArgs } & $Options>
  /** Pin an environment to a repository */
  pinEnvironment?: $<PinEnvironmentPayloadFields & { $args: MutationPinEnvironmentArgs } & $Options>
  /** Pin an issue to a repository */
  pinIssue?: $<PinIssuePayloadFields & { $args: MutationPinIssueArgs } & $Options>
  /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */
  publishSponsorsTier?: $<PublishSponsorsTierPayloadFields & { $args: MutationPublishSponsorsTierArgs } & $Options>
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: $<RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields & { $args: MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs } & $Options>
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken?: $<RegenerateVerifiableDomainTokenPayloadFields & { $args: MutationRegenerateVerifiableDomainTokenArgs } & $Options>
  /** Reject all pending deployments under one or more environments */
  rejectDeployments?: $<RejectDeploymentsPayloadFields & { $args: MutationRejectDeploymentsArgs } & $Options>
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable?: $<RemoveAssigneesFromAssignablePayloadFields & { $args: MutationRemoveAssigneesFromAssignableArgs } & $Options>
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin?: $<RemoveEnterpriseAdminPayloadFields & { $args: MutationRemoveEnterpriseAdminArgs } & $Options>
  /** Removes the identity provider from an enterprise. Owners of enterprises both
   * with and without Enterprise Managed Users may use this mutation. */
  removeEnterpriseIdentityProvider?: $<RemoveEnterpriseIdentityProviderPayloadFields & { $args: MutationRemoveEnterpriseIdentityProviderArgs } & $Options>
  /** Removes a user from all organizations within the enterprise */
  removeEnterpriseMember?: $<RemoveEnterpriseMemberPayloadFields & { $args: MutationRemoveEnterpriseMemberArgs } & $Options>
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization?: $<RemoveEnterpriseOrganizationPayloadFields & { $args: MutationRemoveEnterpriseOrganizationArgs } & $Options>
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement?: $<RemoveEnterpriseSupportEntitlementPayloadFields & { $args: MutationRemoveEnterpriseSupportEntitlementArgs } & $Options>
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable?: $<RemoveLabelsFromLabelablePayloadFields & { $args: MutationRemoveLabelsFromLabelableArgs } & $Options>
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator?: $<RemoveOutsideCollaboratorPayloadFields & { $args: MutationRemoveOutsideCollaboratorArgs } & $Options>
  /** Removes a reaction from a subject. */
  removeReaction?: $<RemoveReactionPayloadFields & { $args: MutationRemoveReactionArgs } & $Options>
  /** Removes a star from a Starrable. */
  removeStar?: $<RemoveStarPayloadFields & { $args: MutationRemoveStarArgs } & $Options>
  /** Removes a sub-issue from a given issue */
  removeSubIssue?: $<RemoveSubIssuePayloadFields & { $args: MutationRemoveSubIssueArgs } & $Options>
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote?: $<RemoveUpvotePayloadFields & { $args: MutationRemoveUpvoteArgs } & $Options>
  /** Reopen a discussion. */
  reopenDiscussion?: $<ReopenDiscussionPayloadFields & { $args: MutationReopenDiscussionArgs } & $Options>
  /** Reopen a issue. */
  reopenIssue?: $<ReopenIssuePayloadFields & { $args: MutationReopenIssueArgs } & $Options>
  /** Reopen a pull request. */
  reopenPullRequest?: $<ReopenPullRequestPayloadFields & { $args: MutationReopenPullRequestArgs } & $Options>
  /** Reorder a pinned repository environment */
  reorderEnvironment?: $<ReorderEnvironmentPayloadFields & { $args: MutationReorderEnvironmentArgs } & $Options>
  /** Reprioritizes a sub-issue to a different position in the parent list. */
  reprioritizeSubIssue?: $<ReprioritizeSubIssuePayloadFields & { $args: MutationReprioritizeSubIssueArgs } & $Options>
  /** Set review requests on a pull request. */
  requestReviews?: $<RequestReviewsPayloadFields & { $args: MutationRequestReviewsArgs } & $Options>
  /** Rerequests an existing check suite. */
  rerequestCheckSuite?: $<RerequestCheckSuitePayloadFields & { $args: MutationRerequestCheckSuiteArgs } & $Options>
  /** Marks a review thread as resolved. */
  resolveReviewThread?: $<ResolveReviewThreadPayloadFields & { $args: MutationResolveReviewThreadArgs } & $Options>
  /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */
  retireSponsorsTier?: $<RetireSponsorsTierPayloadFields & { $args: MutationRetireSponsorsTierArgs } & $Options>
  /** Create a pull request that reverts the changes from a merged pull request. */
  revertPullRequest?: $<RevertPullRequestPayloadFields & { $args: MutationRevertPullRequestArgs } & $Options>
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole?: $<RevokeEnterpriseOrganizationsMigratorRolePayloadFields & { $args: MutationRevokeEnterpriseOrganizationsMigratorRoleArgs } & $Options>
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole?: $<RevokeMigratorRolePayloadFields & { $args: MutationRevokeMigratorRoleArgs } & $Options>
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider?: $<SetEnterpriseIdentityProviderPayloadFields & { $args: MutationSetEnterpriseIdentityProviderArgs } & $Options>
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit?: $<SetOrganizationInteractionLimitPayloadFields & { $args: MutationSetOrganizationInteractionLimitArgs } & $Options>
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit?: $<SetRepositoryInteractionLimitPayloadFields & { $args: MutationSetRepositoryInteractionLimitArgs } & $Options>
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit?: $<SetUserInteractionLimitPayloadFields & { $args: MutationSetUserInteractionLimitArgs } & $Options>
  /** Starts a GitHub Enterprise Importer organization migration. */
  startOrganizationMigration?: $<StartOrganizationMigrationPayloadFields & { $args: MutationStartOrganizationMigrationArgs } & $Options>
  /** Starts a GitHub Enterprise Importer (GEI) repository migration. */
  startRepositoryMigration?: $<StartRepositoryMigrationPayloadFields & { $args: MutationStartRepositoryMigrationArgs } & $Options>
  /** Submits a pending pull request review. */
  submitPullRequestReview?: $<SubmitPullRequestReviewPayloadFields & { $args: MutationSubmitPullRequestReviewArgs } & $Options>
  /** Transfer an organization from one enterprise to another enterprise. */
  transferEnterpriseOrganization?: $<TransferEnterpriseOrganizationPayloadFields & { $args: MutationTransferEnterpriseOrganizationArgs } & $Options>
  /** Transfer an issue to a different repository */
  transferIssue?: $<TransferIssuePayloadFields & { $args: MutationTransferIssueArgs } & $Options>
  /** Unarchives a ProjectV2Item */
  unarchiveProjectV2Item?: $<UnarchiveProjectV2ItemPayloadFields & { $args: MutationUnarchiveProjectV2ItemArgs } & $Options>
  /** Unarchives a repository. */
  unarchiveRepository?: $<UnarchiveRepositoryPayloadFields & { $args: MutationUnarchiveRepositoryArgs } & $Options>
  /** Unfollow an organization. */
  unfollowOrganization?: $<UnfollowOrganizationPayloadFields & { $args: MutationUnfollowOrganizationArgs } & $Options>
  /** Unfollow a user. */
  unfollowUser?: $<UnfollowUserPayloadFields & { $args: MutationUnfollowUserArgs } & $Options>
  /** Unlinks a project from a repository. */
  unlinkProjectV2FromRepository?: $<UnlinkProjectV2FromRepositoryPayloadFields & { $args: MutationUnlinkProjectV2FromRepositoryArgs } & $Options>
  /** Unlinks a project to a team. */
  unlinkProjectV2FromTeam?: $<UnlinkProjectV2FromTeamPayloadFields & { $args: MutationUnlinkProjectV2FromTeamArgs } & $Options>
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject?: $<UnlinkRepositoryFromProjectPayloadFields & { $args: MutationUnlinkRepositoryFromProjectArgs } & $Options>
  /** Unlock a lockable object */
  unlockLockable?: $<UnlockLockablePayloadFields & { $args: MutationUnlockLockableArgs } & $Options>
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer?: $<UnmarkDiscussionCommentAsAnswerPayloadFields & { $args: MutationUnmarkDiscussionCommentAsAnswerArgs } & $Options>
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed?: $<UnmarkFileAsViewedPayloadFields & { $args: MutationUnmarkFileAsViewedArgs } & $Options>
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate?: $<UnmarkIssueAsDuplicatePayloadFields & { $args: MutationUnmarkIssueAsDuplicateArgs } & $Options>
  /** Unmark a project as a template. */
  unmarkProjectV2AsTemplate?: $<UnmarkProjectV2AsTemplatePayloadFields & { $args: MutationUnmarkProjectV2AsTemplateArgs } & $Options>
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment?: $<UnminimizeCommentPayloadFields & { $args: MutationUnminimizeCommentArgs } & $Options>
  /** Unpin a pinned issue from a repository */
  unpinIssue?: $<UnpinIssuePayloadFields & { $args: MutationUnpinIssueArgs } & $Options>
  /** Marks a review thread as unresolved. */
  unresolveReviewThread?: $<UnresolveReviewThreadPayloadFields & { $args: MutationUnresolveReviewThreadArgs } & $Options>
  /** Update a branch protection rule */
  updateBranchProtectionRule?: $<UpdateBranchProtectionRulePayloadFields & { $args: MutationUpdateBranchProtectionRuleArgs } & $Options>
  /** Update a check run */
  updateCheckRun?: $<UpdateCheckRunPayloadFields & { $args: MutationUpdateCheckRunArgs } & $Options>
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences?: $<UpdateCheckSuitePreferencesPayloadFields & { $args: MutationUpdateCheckSuitePreferencesArgs } & $Options>
  /** Update a discussion */
  updateDiscussion?: $<UpdateDiscussionPayloadFields & { $args: MutationUpdateDiscussionArgs } & $Options>
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment?: $<UpdateDiscussionCommentPayloadFields & { $args: MutationUpdateDiscussionCommentArgs } & $Options>
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole?: $<UpdateEnterpriseAdministratorRolePayloadFields & { $args: MutationUpdateEnterpriseAdministratorRoleArgs } & $Options>
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: $<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields & { $args: MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs } & $Options>
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting?: $<UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields & { $args: MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs } & $Options>
  /** Sets whether deploy keys are allowed to be created and used for an enterprise. */
  updateEnterpriseDeployKeySetting?: $<UpdateEnterpriseDeployKeySettingPayloadFields & { $args: MutationUpdateEnterpriseDeployKeySettingArgs } & $Options>
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: $<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs } & $Options>
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: $<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs } & $Options>
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting?: $<UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs } & $Options>
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: $<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs } & $Options>
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: $<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs } & $Options>
  /** Sets whether or not an organization owner can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting?: $<UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs } & $Options>
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: $<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs } & $Options>
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: $<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs } & $Options>
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting?: $<UpdateEnterpriseOrganizationProjectsSettingPayloadFields & { $args: MutationUpdateEnterpriseOrganizationProjectsSettingArgs } & $Options>
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole?: $<UpdateEnterpriseOwnerOrganizationRolePayloadFields & { $args: MutationUpdateEnterpriseOwnerOrganizationRoleArgs } & $Options>
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile?: $<UpdateEnterpriseProfilePayloadFields & { $args: MutationUpdateEnterpriseProfileArgs } & $Options>
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting?: $<UpdateEnterpriseRepositoryProjectsSettingPayloadFields & { $args: MutationUpdateEnterpriseRepositoryProjectsSettingArgs } & $Options>
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting?: $<UpdateEnterpriseTeamDiscussionsSettingPayloadFields & { $args: MutationUpdateEnterpriseTeamDiscussionsSettingArgs } & $Options>
  /** Sets the two-factor authentication methods that users of an enterprise may not use. */
  updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting?: $<UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields & { $args: MutationUpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingArgs } & $Options>
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: $<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields & { $args: MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs } & $Options>
  /** Updates an environment. */
  updateEnvironment?: $<UpdateEnvironmentPayloadFields & { $args: MutationUpdateEnvironmentArgs } & $Options>
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting?: $<UpdateIpAllowListEnabledSettingPayloadFields & { $args: MutationUpdateIpAllowListEnabledSettingArgs } & $Options>
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry?: $<UpdateIpAllowListEntryPayloadFields & { $args: MutationUpdateIpAllowListEntryArgs } & $Options>
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting?: $<UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields & { $args: MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs } & $Options>
  /** Updates an Issue. */
  updateIssue?: $<UpdateIssuePayloadFields & { $args: MutationUpdateIssueArgs } & $Options>
  /** Updates an IssueComment object. */
  updateIssueComment?: $<UpdateIssueCommentPayloadFields & { $args: MutationUpdateIssueCommentArgs } & $Options>
  /** Updates an existing label. */
  updateLabel?: $<UpdateLabelPayloadFields & { $args: MutationUpdateLabelArgs } & $Options>
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting?: $<UpdateNotificationRestrictionSettingPayloadFields & { $args: MutationUpdateNotificationRestrictionSettingArgs } & $Options>
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting?: $<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields & { $args: MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs } & $Options>
  /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
  updateOrganizationWebCommitSignoffSetting?: $<UpdateOrganizationWebCommitSignoffSettingPayloadFields & { $args: MutationUpdateOrganizationWebCommitSignoffSettingArgs } & $Options>
  /** Toggle the setting for your GitHub Sponsors profile that allows other GitHub
   * accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
   * Only applicable when you have a GitHub Sponsors profile and have connected
   * your GitHub account with Patreon. */
  updatePatreonSponsorability?: $<UpdatePatreonSponsorabilityPayloadFields & { $args: MutationUpdatePatreonSponsorabilityArgs } & $Options>
  /** Updates an existing project. */
  updateProject?: $<UpdateProjectPayloadFields & { $args: MutationUpdateProjectArgs } & $Options>
  /** Updates an existing project card. */
  updateProjectCard?: $<UpdateProjectCardPayloadFields & { $args: MutationUpdateProjectCardArgs } & $Options>
  /** Updates an existing project column. */
  updateProjectColumn?: $<UpdateProjectColumnPayloadFields & { $args: MutationUpdateProjectColumnArgs } & $Options>
  /** Updates an existing project. */
  updateProjectV2?: $<UpdateProjectV2PayloadFields & { $args: MutationUpdateProjectV2Args } & $Options>
  /** Update the collaborators on a team or a project */
  updateProjectV2Collaborators?: $<UpdateProjectV2CollaboratorsPayloadFields & { $args: MutationUpdateProjectV2CollaboratorsArgs } & $Options>
  /** Updates a draft issue within a Project. */
  updateProjectV2DraftIssue?: $<UpdateProjectV2DraftIssuePayloadFields & { $args: MutationUpdateProjectV2DraftIssueArgs } & $Options>
  /** Update a project field. */
  updateProjectV2Field?: $<UpdateProjectV2FieldPayloadFields & { $args: MutationUpdateProjectV2FieldArgs } & $Options>
  /** This mutation updates the value of a field for an item in a Project. Currently
   * only single-select, text, number, date, and iteration fields are supported. */
  updateProjectV2ItemFieldValue?: $<UpdateProjectV2ItemFieldValuePayloadFields & { $args: MutationUpdateProjectV2ItemFieldValueArgs } & $Options>
  /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
  updateProjectV2ItemPosition?: $<UpdateProjectV2ItemPositionPayloadFields & { $args: MutationUpdateProjectV2ItemPositionArgs } & $Options>
  /** Updates a status update within a Project. */
  updateProjectV2StatusUpdate?: $<UpdateProjectV2StatusUpdatePayloadFields & { $args: MutationUpdateProjectV2StatusUpdateArgs } & $Options>
  /** Update a pull request */
  updatePullRequest?: $<UpdatePullRequestPayloadFields & { $args: MutationUpdatePullRequestArgs } & $Options>
  /** Merge or Rebase HEAD from upstream branch into pull request branch */
  updatePullRequestBranch?: $<UpdatePullRequestBranchPayloadFields & { $args: MutationUpdatePullRequestBranchArgs } & $Options>
  /** Updates the body of a pull request review. */
  updatePullRequestReview?: $<UpdatePullRequestReviewPayloadFields & { $args: MutationUpdatePullRequestReviewArgs } & $Options>
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment?: $<UpdatePullRequestReviewCommentPayloadFields & { $args: MutationUpdatePullRequestReviewCommentArgs } & $Options>
  /** Update a Git Ref. */
  updateRef?: $<UpdateRefPayloadFields & { $args: MutationUpdateRefArgs } & $Options>
  /** Creates, updates and/or deletes multiple refs in a repository.
   *
   * This mutation takes a list of `RefUpdate`s and performs these updates
   * on the repository. All updates are performed atomically, meaning that
   * if one of them is rejected, no other ref will be modified.
   *
   * `RefUpdate.beforeOid` specifies that the given reference needs to point
   * to the given value before performing any updates. A value of
   * `0000000000000000000000000000000000000000` can be used to verify that
   * the references should not exist.
   *
   * `RefUpdate.afterOid` specifies the value that the given reference
   * will point to after performing all updates. A value of
   * `0000000000000000000000000000000000000000` can be used to delete a
   * reference.
   *
   * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
   * for the given reference will be allowed. */
  updateRefs?: $<UpdateRefsPayloadFields & { $args: MutationUpdateRefsArgs } & $Options>
  /** Update information about a repository. */
  updateRepository?: $<UpdateRepositoryPayloadFields & { $args: MutationUpdateRepositoryArgs } & $Options>
  /** Update a repository ruleset */
  updateRepositoryRuleset?: $<UpdateRepositoryRulesetPayloadFields & { $args: MutationUpdateRepositoryRulesetArgs } & $Options>
  /** Sets whether contributors are required to sign off on web-based commits for a repository. */
  updateRepositoryWebCommitSignoffSetting?: $<UpdateRepositoryWebCommitSignoffSettingPayloadFields & { $args: MutationUpdateRepositoryWebCommitSignoffSettingArgs } & $Options>
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences?: $<UpdateSponsorshipPreferencesPayloadFields & { $args: MutationUpdateSponsorshipPreferencesArgs } & $Options>
  /** Updates the state for subscribable subjects. */
  updateSubscription?: $<UpdateSubscriptionPayloadFields & { $args: MutationUpdateSubscriptionArgs } & $Options>
  /** Updates a team discussion. */
  updateTeamDiscussion?: $<UpdateTeamDiscussionPayloadFields & { $args: MutationUpdateTeamDiscussionArgs } & $Options>
  /** Updates a discussion comment. */
  updateTeamDiscussionComment?: $<UpdateTeamDiscussionCommentPayloadFields & { $args: MutationUpdateTeamDiscussionCommentArgs } & $Options>
  /** Updates team review assignment. */
  updateTeamReviewAssignment?: $<UpdateTeamReviewAssignmentPayloadFields & { $args: MutationUpdateTeamReviewAssignmentArgs } & $Options>
  /** Update team repository. */
  updateTeamsRepository?: $<UpdateTeamsRepositoryPayloadFields & { $args: MutationUpdateTeamsRepositoryArgs } & $Options>
  /** Replaces the repository's topics with the given topics. */
  updateTopics?: $<UpdateTopicsPayloadFields & { $args: MutationUpdateTopicsArgs } & $Options>
  /** Updates an existing user list. */
  updateUserList?: $<UpdateUserListPayloadFields & { $args: MutationUpdateUserListArgs } & $Options>
  /** Updates which of the viewer's lists an item belongs to */
  updateUserListsForItem?: $<UpdateUserListsForItemPayloadFields & { $args: MutationUpdateUserListsForItemArgs } & $Options>
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain?: $<VerifyVerifiableDomainPayloadFields & { $args: MutationVerifyVerifiableDomainArgs } & $Options>
}
export interface NodeFields {
  __typename?: $Pick
  /** ID of the object. */
  id?: $Pick
}
export interface OauthApplicationAuditEntryDataFields {
  __typename?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
}
export interface OauthApplicationCreateAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The application URL of the OAuth application. */
  applicationUrl?: $Pick
  /** The callback URL of the OAuth application. */
  callbackUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OauthApplicationCreateAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The rate limit of the OAuth application. */
  rateLimit?: $Pick
  /** The state of the OAuth application. */
  state?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OIDCProviderFields {
  __typename?: $Pick
  /** The enterprise this identity provider belongs to. */
  enterprise?: $<EnterpriseFields & $Options>
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities?: $<ExternalIdentityConnectionFields & { $args?: OIDCProviderExternalIdentitiesArgs } & $Options>
  /** The Node ID of the OIDCProvider object */
  id?: $Pick
  /** The OIDC identity provider type */
  providerType?: $Pick
  /** The id of the tenant this provider is attached to */
  tenantId?: $Pick
}
export interface OrgAddBillingManagerAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgAddBillingManagerAuditEntry object */
  id?: $Pick
  /** The email address used to invite a billing manager for the organization. */
  invitationEmail?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgAddMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgAddMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The permission level of the member added to the organization. */
  permission?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrganizationAuditEntryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<OrganizationAuditEntryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationAuditEntryPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface OrganizationAuditEntryDataFields {
  __typename?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
}
export interface OrganizationAuditEntryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationAuditEntryPossibleTypes & $Options>
}
export interface OrganizationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<OrganizationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface OrganizationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationFields & $Options>
}
export interface OrganizationEnterpriseOwnerConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<OrganizationEnterpriseOwnerEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface OrganizationEnterpriseOwnerEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserFields & $Options>
  /** The role of the owner with respect to the organization. */
  organizationRole?: $Pick
}
export interface OrganizationFields {
  __typename?: $Pick
  /** The text of the announcement
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcement?: $Pick
  /** The announcement banner set on this organization, if any. Only visible to members of the organization's enterprise. */
  announcementBanner?: $<AnnouncementBannerFields & $Options>
  /** The date the announcement was created
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementCreatedAt?: $Pick
  /** The expiration date of the announcement, if any
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementExpiresAt?: $Pick
  /** Whether the announcement can be dismissed by the user
   *
   * @deprecated The individual `announcementX` fields do not follow our standard GraphQL patterns. Use the `announcementBanner` object instead. Removal on 2025-04-01 UTC. */
  announcementUserDismissible?: $Pick
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?: $Scalar | $<$Options & { $args?: OrganizationAnyPinnableItemsArgs }>
  /** Identifies the date and time when the organization was archived. */
  archivedAt?: $Pick
  /** Audit log entries of the organization */
  auditLog?: $<OrganizationAuditEntryConnectionFields & { $args?: OrganizationAuditLogArgs } & $Options>
  /** A URL pointing to the organization's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: OrganizationAvatarUrlArgs }>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The organization's public profile description. */
  description?: $Pick
  /** The organization's public profile description rendered to HTML. */
  descriptionHTML?: $Pick
  /** A list of domains owned by the organization. */
  domains?: $<VerifiableDomainConnectionFields & { $args?: OrganizationDomainsArgs } & $Options>
  /** The organization's public email. */
  email?: $Pick
  /** A list of owners of the organization's enterprise account. */
  enterpriseOwners?: $<OrganizationEnterpriseOwnerConnectionFields & { $args?: OrganizationEnterpriseOwnersArgs } & $Options>
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: $Pick
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: $Pick
  /** The Node ID of the Organization object */
  id?: $Pick
  /** The interaction ability settings for this organization. */
  interactionAbility?: $<RepositoryInteractionAbilityFields & $Options>
  /** The setting value for whether the organization has an IP allow list enabled. */
  ipAllowListEnabledSetting?: $Pick
  /** The IP addresses that are allowed to access resources owned by the organization. */
  ipAllowListEntries?: $<IpAllowListEntryConnectionFields & { $args?: OrganizationIpAllowListEntriesArgs } & $Options>
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting?: $Pick
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: $<$Options & { $args: OrganizationIsSponsoredByArgs }>
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: $Pick
  /** Whether the organization has verified its profile email and website. */
  isVerified?: $Pick
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase?: $<ProfileItemShowcaseFields & $Options>
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues?: $<SponsorAndLifetimeValueConnectionFields & { $args?: OrganizationLifetimeReceivedSponsorshipValuesArgs } & $Options>
  /** The organization's public profile location. */
  location?: $Pick
  /** The organization's login name. */
  login?: $Pick
  /** A list of all mannequins for this organization. */
  mannequins?: $<MannequinConnectionFields & { $args?: OrganizationMannequinsArgs } & $Options>
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: $<UserStatusConnectionFields & { $args?: OrganizationMemberStatusesArgs } & $Options>
  /** Members can fork private repositories in this organization */
  membersCanForkPrivateRepositories?: $Pick
  /** A list of users who are members of this organization. */
  membersWithRole?: $<OrganizationMemberConnectionFields & { $args?: OrganizationMembersWithRoleArgs } & $Options>
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: $Pick
  /** The organization's public profile name. */
  name?: $Pick
  /** The HTTP path creating a new team */
  newTeamResourcePath?: $Pick
  /** The HTTP URL creating a new team */
  newTeamUrl?: $Pick
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting?: $Pick
  /** The billing email for the organization. */
  organizationBillingEmail?: $Pick
  /** A list of packages under the owner. */
  packages?: $<PackageConnectionFields & { $args?: OrganizationPackagesArgs } & $Options>
  /** A list of users who have been invited to join this organization. */
  pendingMembers?: $<UserConnectionFields & { $args?: OrganizationPendingMembersArgs } & $Options>
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: $<PinnableItemConnectionFields & { $args?: OrganizationPinnableItemsArgs } & $Options>
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: $<PinnableItemConnectionFields & { $args?: OrganizationPinnedItemsArgs } & $Options>
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: $Pick
  /** Find project by number. */
  project?: $<ProjectFields & { $args: OrganizationProjectArgs } & $Options>
  /** Find a project by number. */
  projectV2?: $<ProjectV2Fields & { $args: OrganizationProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projects?: $<ProjectConnectionFields & { $args?: OrganizationProjectsArgs } & $Options>
  /** The HTTP path listing organization's projects */
  projectsResourcePath?: $Pick
  /** The HTTP URL listing organization's projects */
  projectsUrl?: $Pick
  /** A list of projects under the owner. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: OrganizationProjectsV2Args } & $Options>
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: $<ProjectV2ConnectionFields & { $args?: OrganizationRecentProjectsArgs } & $Options>
  /** A list of repositories that the user owns. */
  repositories?: $<RepositoryConnectionFields & { $args?: OrganizationRepositoriesArgs } & $Options>
  /** Find Repository. */
  repository?: $<RepositoryFields & { $args: OrganizationRepositoryArgs } & $Options>
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: $<DiscussionCommentConnectionFields & { $args?: OrganizationRepositoryDiscussionCommentsArgs } & $Options>
  /** Discussions this user has started. */
  repositoryDiscussions?: $<DiscussionConnectionFields & { $args?: OrganizationRepositoryDiscussionsArgs } & $Options>
  /** A list of all repository migrations for this organization. */
  repositoryMigrations?: $<RepositoryMigrationConnectionFields & { $args?: OrganizationRepositoryMigrationsArgs } & $Options>
  /** When true the organization requires all members, billing managers, and outside
   * collaborators to enable two-factor authentication. */
  requiresTwoFactorAuthentication?: $Pick
  /** The HTTP path for this organization. */
  resourcePath?: $Pick
  /** Returns a single ruleset from the current organization by ID. */
  ruleset?: $<RepositoryRulesetFields & { $args: OrganizationRulesetArgs } & $Options>
  /** A list of rulesets for this organization. */
  rulesets?: $<RepositoryRulesetConnectionFields & { $args?: OrganizationRulesetsArgs } & $Options>
  /** The Organization's SAML identity provider. Visible to (1) organization owners,
   * (2) organization owners' personal access tokens (classic) with read:org or
   * admin:org scope, (3) GitHub App with an installation token with read or write
   * access to members. */
  samlIdentityProvider?: $<OrganizationIdentityProviderFields & $Options>
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: $<SponsorConnectionFields & { $args?: OrganizationSponsoringArgs } & $Options>
  /** List of sponsors for this user or organization. */
  sponsors?: $<SponsorConnectionFields & { $args?: OrganizationSponsorsArgs } & $Options>
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: $<SponsorsActivityConnectionFields & { $args?: OrganizationSponsorsActivitiesArgs } & $Options>
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: $<SponsorshipFields & { $args?: OrganizationSponsorshipForViewerAsSponsorArgs } & $Options>
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: $<SponsorshipFields & { $args?: OrganizationSponsorshipForViewerAsSponsorableArgs } & $Options>
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: $<SponsorshipNewsletterConnectionFields & { $args?: OrganizationSponsorshipNewslettersArgs } & $Options>
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: $<SponsorshipConnectionFields & { $args?: OrganizationSponsorshipsAsMaintainerArgs } & $Options>
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: $<SponsorshipConnectionFields & { $args?: OrganizationSponsorshipsAsSponsorArgs } & $Options>
  /** Find an organization's team by its slug. */
  team?: $<TeamFields & { $args: OrganizationTeamArgs } & $Options>
  /** A list of teams in this organization. */
  teams?: $<TeamConnectionFields & { $args?: OrganizationTeamsArgs } & $Options>
  /** The HTTP path listing organization's teams */
  teamsResourcePath?: $Pick
  /** The HTTP URL listing organization's teams */
  teamsUrl?: $Pick
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: $Scalar | $<$Options & { $args?: OrganizationTotalSponsorshipAmountAsSponsorInCentsArgs }>
  /** The organization's Twitter username. */
  twitterUsername?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this organization. */
  url?: $Pick
  /** Organization is adminable by the viewer. */
  viewerCanAdminister?: $Pick
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: $Pick
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: $Pick
  /** Viewer can create repositories on this organization */
  viewerCanCreateRepositories?: $Pick
  /** Viewer can create teams on this organization. */
  viewerCanCreateTeams?: $Pick
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: $Pick
  /** Viewer is an active member of this organization. */
  viewerIsAMember?: $Pick
  /** Whether or not this Organization is followed by the viewer. */
  viewerIsFollowing?: $Pick
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: $Pick
  /** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
  webCommitSignoffRequired?: $Pick
  /** The organization's public profile URL. */
  websiteUrl?: $Pick
}
export interface OrganizationIdentityProviderFields {
  __typename?: $Pick
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod?: $Pick
  /** External Identities provisioned by this Identity Provider */
  externalIdentities?: $<ExternalIdentityConnectionFields & { $args?: OrganizationIdentityProviderExternalIdentitiesArgs } & $Options>
  /** The Node ID of the OrganizationIdentityProvider object */
  id?: $Pick
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate?: $Pick
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer?: $Pick
  /** Organization this Identity Provider belongs to */
  organization?: $<OrganizationFields & $Options>
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod?: $Pick
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl?: $Pick
}
export interface OrganizationInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<OrganizationInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<OrganizationInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface OrganizationInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<OrganizationInvitationFields & $Options>
}
export interface OrganizationInvitationFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The email address of the user invited to the organization. */
  email?: $Pick
  /** The Node ID of the OrganizationInvitation object */
  id?: $Pick
  /** The source of the invitation. */
  invitationSource?: $Pick
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType?: $Pick
  /** The user who was invited to the organization. */
  invitee?: $<UserFields & $Options>
  /** The user who created the invitation.
   *
   * @deprecated `inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC. */
  inviter?: $<UserFields & $Options>
  /** The user who created the invitation. */
  inviterActor?: $<UserFields & $Options>
  /** The organization the invite is for */
  organization?: $<OrganizationFields & $Options>
  /** The user's pending role in the organization (e.g. member, owner). */
  role?: $Pick
}
export interface OrganizationMemberConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<OrganizationMemberEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface OrganizationMemberEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserFields & $Options>
  /** The role this user has in the organization. */
  role?: $Pick
}
export interface OrganizationMigrationFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The reason the organization migration failed. */
  failureReason?: $Pick
  /** The Node ID of the OrganizationMigration object */
  id?: $Pick
  /** The remaining amount of repos to be migrated. */
  remainingRepositoriesCount?: $Pick
  /** The name of the source organization to be migrated. */
  sourceOrgName?: $Pick
  /** The URL of the source organization to migrate. */
  sourceOrgUrl?: $Pick
  /** The migration state. */
  state?: $Pick
  /** The name of the target organization. */
  targetOrgName?: $Pick
  /** The total amount of repositories to be migrated. */
  totalRepositoriesCount?: $Pick
}
export interface OrganizationsHovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations?: $<OrganizationConnectionFields & { $args?: OrganizationsHovercardContextRelevantOrganizationsArgs } & $Options>
  /** The total number of organizations this user is in */
  totalOrganizationCount?: $Pick
}
export interface OrganizationTeamsHovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams?: $<TeamConnectionFields & { $args?: OrganizationTeamsHovercardContextRelevantTeamsArgs } & $Options>
  /** The path for the full team list for this user */
  teamsResourcePath?: $Pick
  /** The URL for the full team list for this user */
  teamsUrl?: $Pick
  /** The total number of teams the user is on in the organization */
  totalTeamCount?: $Pick
}
export interface OrgBlockUserAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The blocked user. */
  blockedUser?: $<UserFields & $Options>
  /** The username of the blocked user. */
  blockedUserName?: $Pick
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: $Pick
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgBlockUserAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgConfigDisableCollaboratorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgConfigEnableCollaboratorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgCreateAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The billing plan for the Organization. */
  billingPlan?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgCreateAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgDisableOauthAppRestrictionsAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgDisableSamlAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: $Pick
  /** The Node ID of the OrgDisableSamlAuditEntry object */
  id?: $Pick
  /** The SAML provider's issuer URL. */
  issuerUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: $Pick
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgDisableTwoFactorRequirementAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgEnableOauthAppRestrictionsAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgEnableSamlAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: $Pick
  /** The Node ID of the OrgEnableSamlAuditEntry object */
  id?: $Pick
  /** The SAML provider's issuer URL. */
  issuerUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: $Pick
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgEnableTwoFactorRequirementAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgInviteMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The email address of the organization invitation. */
  email?: $Pick
  /** The Node ID of the OrgInviteMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The organization invitation. */
  organizationInvitation?: $<OrganizationInvitationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgInviteToBusinessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the OrgInviteToBusinessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgOauthAppAccessApprovedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgOauthAppAccessApprovedAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgOauthAppAccessBlockedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgOauthAppAccessBlockedAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgOauthAppAccessDeniedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgOauthAppAccessDeniedAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgOauthAppAccessRequestedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgOauthAppAccessRequestedAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgOauthAppAccessUnblockedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object */
  id?: $Pick
  /** The name of the OAuth application. */
  oauthApplicationName?: $Pick
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: $Pick
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgRemoveBillingManagerAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgRemoveBillingManagerAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The reason for the billing manager being removed. */
  reason?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgRemoveMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgRemoveMemberAuditEntry object */
  id?: $Pick
  /** The types of membership the member has with the organization. */
  membershipTypes?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The reason for the member being removed. */
  reason?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgRemoveOutsideCollaboratorAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object */
  id?: $Pick
  /** The types of membership the outside collaborator has with the organization. */
  membershipTypes?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The reason for the outside collaborator being removed from the Organization. */
  reason?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgRestoreMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgRestoreMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The number of custom email routings for the restored member. */
  restoredCustomEmailRoutingsCount?: $Pick
  /** The number of issue assignments for the restored member. */
  restoredIssueAssignmentsCount?: $Pick
  /** Restored organization membership objects. */
  restoredMemberships?: $<OrgRestoreMemberAuditEntryMembershipPossibleTypes & $Options>
  /** The number of restored memberships. */
  restoredMembershipsCount?: $Pick
  /** The number of repositories of the restored member. */
  restoredRepositoriesCount?: $Pick
  /** The number of starred repositories for the restored member. */
  restoredRepositoryStarsCount?: $Pick
  /** The number of watched repositories for the restored member. */
  restoredRepositoryWatchesCount?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataFields {
  __typename?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
}
export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataFields {
  __typename?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
}
export interface OrgRestoreMemberMembershipTeamAuditEntryDataFields {
  __typename?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
}
export interface OrgUnblockUserAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The user being unblocked by the organization. */
  blockedUser?: $<UserFields & $Options>
  /** The username of the blocked user. */
  blockedUserName?: $Pick
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: $Pick
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgUnblockUserAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgUpdateDefaultRepositoryPermissionAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The new base repository permission level for the organization. */
  permission?: $Pick
  /** The former base repository permission level for the organization. */
  permissionWas?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgUpdateMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgUpdateMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The new member permission level for the organization. */
  permission?: $Pick
  /** The former member permission level for the organization. */
  permissionWas?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** Can members create repositories in the organization. */
  canCreateRepositories?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The permission for visibility level of repositories for this organization. */
  visibility?: $Pick
}
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** Can outside collaborators be invited to repositories in the organization. */
  canInviteOutsideCollaboratorsToRepositories?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface PackageConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PackageEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PackageFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PackageEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PackageFields & $Options>
}
export interface PackageFields {
  __typename?: $Pick
  /** The Node ID of the Package object */
  id?: $Pick
  /** Find the latest version for the package. */
  latestVersion?: $<PackageVersionFields & $Options>
  /** Identifies the name of the package. */
  name?: $Pick
  /** Identifies the type of the package. */
  packageType?: $Pick
  /** The repository this package belongs to. */
  repository?: $<RepositoryFields & $Options>
  /** Statistics about package activity. */
  statistics?: $<PackageStatisticsFields & $Options>
  /** Find package version by version string. */
  version?: $<PackageVersionFields & { $args: PackageVersionArgs } & $Options>
  /** list of versions for this package */
  versions?: $<PackageVersionConnectionFields & { $args?: PackageVersionsArgs } & $Options>
}
export interface PackageFileConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PackageFileEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PackageFileFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PackageFileEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PackageFileFields & $Options>
}
export interface PackageFileFields {
  __typename?: $Pick
  /** The Node ID of the PackageFile object */
  id?: $Pick
  /** MD5 hash of the file. */
  md5?: $Pick
  /** Name of the file. */
  name?: $Pick
  /** The package version this file belongs to. */
  packageVersion?: $<PackageVersionFields & $Options>
  /** SHA1 hash of the file. */
  sha1?: $Pick
  /** SHA256 hash of the file. */
  sha256?: $Pick
  /** Size of the file in bytes. */
  size?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** URL to download the asset. */
  url?: $Pick
}
export interface PackageOwnerFields {
  __typename?: $Pick
  /** The Node ID of the PackageOwner object */
  id?: $Pick
  /** A list of packages under the owner. */
  packages?: $<PackageConnectionFields & { $args?: PackageOwnerPackagesArgs } & $Options>
}
export interface PackageStatisticsFields {
  __typename?: $Pick
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount?: $Pick
}
export interface PackageTagFields {
  __typename?: $Pick
  /** The Node ID of the PackageTag object */
  id?: $Pick
  /** Identifies the tag name of the version. */
  name?: $Pick
  /** Version that the tag is associated with. */
  version?: $<PackageVersionFields & $Options>
}
export interface PackageVersionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PackageVersionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PackageVersionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PackageVersionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PackageVersionFields & $Options>
}
export interface PackageVersionFields {
  __typename?: $Pick
  /** List of files associated with this package version */
  files?: $<PackageFileConnectionFields & { $args?: PackageVersionFilesArgs } & $Options>
  /** The Node ID of the PackageVersion object */
  id?: $Pick
  /** The package associated with this version. */
  package?: $<PackageFields & $Options>
  /** The platform this version was built for. */
  platform?: $Pick
  /** Whether or not this version is a pre-release. */
  preRelease?: $Pick
  /** The README of this package version. */
  readme?: $Pick
  /** The release associated with this package version. */
  release?: $<ReleaseFields & $Options>
  /** Statistics about package activity. */
  statistics?: $<PackageVersionStatisticsFields & $Options>
  /** The package version summary. */
  summary?: $Pick
  /** The version string. */
  version?: $Pick
}
export interface PackageVersionStatisticsFields {
  __typename?: $Pick
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount?: $Pick
}
export interface PageInfoFields {
  __typename?: $Pick
  /** When paginating forwards, the cursor to continue. */
  endCursor?: $Pick
  /** When paginating forwards, are there more items? */
  hasNextPage?: $Pick
  /** When paginating backwards, are there more items? */
  hasPreviousPage?: $Pick
  /** When paginating backwards, the cursor to continue. */
  startCursor?: $Pick
}
export interface ParentIssueAddedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ParentIssueAddedEvent object */
  id?: $Pick
  /** The parent issue added. */
  parent?: $<IssueFields & $Options>
}
export interface ParentIssueRemovedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ParentIssueRemovedEvent object */
  id?: $Pick
  /** The parent issue removed. */
  parent?: $<IssueFields & $Options>
}
export interface PermissionSourceFields {
  __typename?: $Pick
  /** The organization the repository belongs to. */
  organization?: $<OrganizationFields & $Options>
  /** The level of access this source has granted to the user. */
  permission?: $Pick
  /** The name of the role this source has granted to the user. */
  roleName?: $Pick
  /** The source of this permission. */
  source?: $<PermissionGranterPossibleTypes & $Options>
}
export interface PinEnvironmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The environment that was pinned */
  environment?: $<EnvironmentFields & $Options>
  /** The pinned environment if we pinned */
  pinnedEnvironment?: $<PinnedEnvironmentFields & $Options>
}
export interface PinIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue that was pinned */
  issue?: $<IssueFields & $Options>
}
export interface PinnableItemConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PinnableItemEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PinnableItemPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PinnableItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PinnableItemPossibleTypes & $Options>
}
export interface PinnedDiscussionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PinnedDiscussionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PinnedDiscussionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PinnedDiscussionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PinnedDiscussionFields & $Options>
}
export interface PinnedDiscussionFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The discussion that was pinned. */
  discussion?: $<DiscussionFields & $Options>
  /** Color stops of the chosen gradient */
  gradientStopColors?: $Pick
  /** The Node ID of the PinnedDiscussion object */
  id?: $Pick
  /** Background texture pattern */
  pattern?: $Pick
  /** The actor that pinned this discussion. */
  pinnedBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Preconfigured background gradient option */
  preconfiguredGradient?: $Pick
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface PinnedEnvironmentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PinnedEnvironmentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PinnedEnvironmentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PinnedEnvironmentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PinnedEnvironmentFields & $Options>
}
export interface PinnedEnvironmentFields {
  __typename?: $Pick
  /** Identifies the date and time when the pinned environment was created */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Identifies the environment associated. */
  environment?: $<EnvironmentFields & $Options>
  /** The Node ID of the PinnedEnvironment object */
  id?: $Pick
  /** Identifies the position of the pinned environment. */
  position?: $Pick
  /** The repository that this environment was pinned to. */
  repository?: $<RepositoryFields & $Options>
}
export interface PinnedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the PinnedEvent object */
  id?: $Pick
  /** Identifies the issue associated with the event. */
  issue?: $<IssueFields & $Options>
}
export interface PinnedIssueConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PinnedIssueEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PinnedIssueFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PinnedIssueEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PinnedIssueFields & $Options>
}
export interface PinnedIssueFields {
  __typename?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the PinnedIssue object */
  id?: $Pick
  /** The issue that was pinned. */
  issue?: $<IssueFields & $Options>
  /** The actor that pinned this issue. */
  pinnedBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The repository that this issue was pinned to. */
  repository?: $<RepositoryFields & $Options>
}
export interface PrivateRepositoryForkingDisableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the PrivateRepositoryForkingDisableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface PrivateRepositoryForkingEnableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the PrivateRepositoryForkingEnableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface ProfileItemShowcaseFields {
  __typename?: $Pick
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems?: $Pick
  /** The repositories and gists in the showcase. If the profile owner has any
   * pinned items, those will be returned. Otherwise, the profile owner's popular
   * repositories will be returned. */
  items?: $<PinnableItemConnectionFields & { $args?: ProfileItemShowcaseItemsArgs } & $Options>
}
export interface ProfileOwnerFields {
  __typename?: $Pick
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?: $Scalar | $<$Options & { $args?: ProfileOwnerAnyPinnableItemsArgs }>
  /** The public profile email. */
  email?: $Pick
  /** The Node ID of the ProfileOwner object */
  id?: $Pick
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase?: $<ProfileItemShowcaseFields & $Options>
  /** The public profile location. */
  location?: $Pick
  /** The username used to login. */
  login?: $Pick
  /** The public profile name. */
  name?: $Pick
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: $<PinnableItemConnectionFields & { $args?: ProfileOwnerPinnableItemsArgs } & $Options>
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: $<PinnableItemConnectionFields & { $args?: ProfileOwnerPinnedItemsArgs } & $Options>
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: $Pick
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: $Pick
  /** The public profile website URL. */
  websiteUrl?: $Pick
}
export interface ProjectCardConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectCardEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectCardFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectCardEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectCardFields & $Options>
}
export interface ProjectCardFields {
  __typename?: $Pick
  /** The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future. */
  column?: $<ProjectColumnFields & $Options>
  /** The card content item */
  content?: $<ProjectCardItemPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created this card */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectCard object */
  id?: $Pick
  /** Whether the card is archived */
  isArchived?: $Pick
  /** The card note */
  note?: $Pick
  /** The project that contains this card. */
  project?: $<ProjectFields & $Options>
  /** The HTTP path for this card */
  resourcePath?: $Pick
  /** The state of ProjectCard */
  state?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this card */
  url?: $Pick
}
export interface ProjectColumnConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectColumnEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectColumnFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectColumnEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectColumnFields & $Options>
}
export interface ProjectColumnFields {
  __typename?: $Pick
  /** List of cards in the column */
  cards?: $<ProjectCardConnectionFields & { $args?: ProjectColumnCardsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectColumn object */
  id?: $Pick
  /** The project column's name. */
  name?: $Pick
  /** The project that contains this column. */
  project?: $<ProjectFields & $Options>
  /** The semantic purpose of the column */
  purpose?: $Pick
  /** The HTTP path for this project column */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this project column */
  url?: $Pick
}
export interface ProjectConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectFields & $Options>
}
export interface ProjectFields {
  __typename?: $Pick
  /** The project's description body. */
  body?: $Pick
  /** The projects description body rendered to HTML. */
  bodyHTML?: $Pick
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** List of columns in the project */
  columns?: $<ProjectColumnConnectionFields & { $args?: ProjectColumnsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who originally created the project. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Project object */
  id?: $Pick
  /** The project's name. */
  name?: $Pick
  /** The project's number. */
  number?: $Pick
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  owner?: $<ProjectOwnerFields & ProjectOwnerPossibleTypes & $Options>
  /** List of pending cards in this project */
  pendingCards?: $<ProjectCardConnectionFields & { $args?: ProjectPendingCardsArgs } & $Options>
  /** Project progress details. */
  progress?: $<ProjectProgressFields & $Options>
  /** The HTTP path for this project */
  resourcePath?: $Pick
  /** Whether the project is open or closed. */
  state?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this project */
  url?: $Pick
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
}
export interface ProjectOwnerFields {
  __typename?: $Pick
  /** The Node ID of the ProjectOwner object */
  id?: $Pick
  /** Find project by number. */
  project?: $<ProjectFields & { $args: ProjectOwnerProjectArgs } & $Options>
  /** A list of projects under the owner. */
  projects?: $<ProjectConnectionFields & { $args?: ProjectOwnerProjectsArgs } & $Options>
  /** The HTTP path listing owners projects */
  projectsResourcePath?: $Pick
  /** The HTTP URL listing owners projects */
  projectsUrl?: $Pick
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: $Pick
}
export interface ProjectProgressFields {
  __typename?: $Pick
  /** The number of done cards. */
  doneCount?: $Pick
  /** The percentage of done cards. */
  donePercentage?: $Pick
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled?: $Pick
  /** The number of in-progress cards. */
  inProgressCount?: $Pick
  /** The percentage of in-progress cards. */
  inProgressPercentage?: $Pick
  /** The number of to do cards. */
  todoCount?: $Pick
  /** The percentage of to do cards. */
  todoPercentage?: $Pick
}
export interface ProjectV2ActorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2ActorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2ActorPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2ActorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2ActorPossibleTypes & $Options>
}
export interface ProjectV2ConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2EdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2Fields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2EdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2Fields & $Options>
}
export interface ProjectV2FieldCommonFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The field's type. */
  dataType?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectV2FieldCommon object */
  id?: $Pick
  /** The project field's name. */
  name?: $Pick
  /** The project that contains this field. */
  project?: $<ProjectV2Fields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2FieldConfigurationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2FieldConfigurationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2FieldConfigurationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
}
export interface ProjectV2FieldConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2FieldEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2FieldFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2FieldEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2FieldFields & $Options>
}
export interface ProjectV2FieldFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The field's type. */
  dataType?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectV2Field object */
  id?: $Pick
  /** The project field's name. */
  name?: $Pick
  /** The project that contains this field. */
  project?: $<ProjectV2Fields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2Fields {
  __typename?: $Pick
  /** Returns true if the project is closed. */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who originally created the project. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: $Pick
  /** A field of the project */
  field?: $<{ $args: ProjectV2FieldArgs } & ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** List of fields and their constraints in the project */
  fields?: $<ProjectV2FieldConfigurationConnectionFields & { $args?: ProjectV2FieldsArgs } & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the ProjectV2 object */
  id?: $Pick
  /** List of items in the project */
  items?: $<ProjectV2ItemConnectionFields & { $args?: ProjectV2ItemsArgs } & $Options>
  /** The project's number. */
  number?: $Pick
  /** The project's owner. Currently limited to organizations and users. */
  owner?: $<ProjectV2OwnerFields & ProjectV2OwnerPossibleTypes & $Options>
  /** Returns true if the project is public. */
  public?: $Pick
  /** The project's readme. */
  readme?: $Pick
  /** The repositories the project is linked to. */
  repositories?: $<RepositoryConnectionFields & { $args?: ProjectV2RepositoriesArgs } & $Options>
  /** The HTTP path for this project */
  resourcePath?: $Pick
  /** The project's short description. */
  shortDescription?: $Pick
  /** List of the status updates in the project. */
  statusUpdates?: $<ProjectV2StatusUpdateConnectionFields & { $args?: ProjectV2StatusUpdatesArgs } & $Options>
  /** The teams the project is linked to. */
  teams?: $<TeamConnectionFields & { $args?: ProjectV2TeamsArgs } & $Options>
  /** Returns true if this project is a template. */
  template?: $Pick
  /** The project's name. */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this project */
  url?: $Pick
  /** A view of the project */
  view?: $<ProjectV2ViewFields & { $args: ProjectV2ViewArgs } & $Options>
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** List of views in the project */
  views?: $<ProjectV2ViewConnectionFields & { $args?: ProjectV2ViewsArgs } & $Options>
  /** A workflow of the project */
  workflow?: $<ProjectV2WorkflowFields & { $args: ProjectV2WorkflowArgs } & $Options>
  /** List of the workflows in the project */
  workflows?: $<ProjectV2WorkflowConnectionFields & { $args?: ProjectV2WorkflowsArgs } & $Options>
}
export interface ProjectV2ItemConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2ItemEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2ItemFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2ItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2ItemFields & $Options>
}
export interface ProjectV2ItemFieldDateValueFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Date value for the field */
  date?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldDateValue object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldIterationValueFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The duration of the iteration in days. */
  duration?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldIterationValue object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** The ID of the iteration. */
  iterationId?: $Pick
  /** The start date of the iteration. */
  startDate?: $Pick
  /** The title of the iteration. */
  title?: $Pick
  /** The title of the iteration, with HTML. */
  titleHTML?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldLabelValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** Labels value of a field */
  labels?: $<LabelConnectionFields & { $args?: ProjectV2ItemFieldLabelValueLabelsArgs } & $Options>
}
export interface ProjectV2ItemFieldMilestoneValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** Milestone value of a field */
  milestone?: $<MilestoneFields & $Options>
}
export interface ProjectV2ItemFieldNumberValueFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldNumberValue object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** Number as a float(8) */
  number?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldPullRequestValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The pull requests for this field */
  pullRequests?: $<PullRequestConnectionFields & { $args?: ProjectV2ItemFieldPullRequestValuePullRequestsArgs } & $Options>
}
export interface ProjectV2ItemFieldRepositoryValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The repository for this field. */
  repository?: $<RepositoryFields & $Options>
}
export interface ProjectV2ItemFieldReviewerValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The reviewers for this field. */
  reviewers?: $<RequestedReviewerConnectionFields & { $args?: ProjectV2ItemFieldReviewerValueReviewersArgs } & $Options>
}
export interface ProjectV2ItemFields {
  __typename?: $Pick
  /** The content of the referenced draft issue, issue, or pull request */
  content?: $<ProjectV2ItemContentPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: $Pick
  /** The field value of the first project field which matches the 'name' argument that is set on the item. */
  fieldValueByName?: $<{ $args: ProjectV2ItemFieldValueByNameArgs } & ProjectV2ItemFieldValuePossibleTypes & $Options>
  /** The field values that are set on the item. */
  fieldValues?: $<ProjectV2ItemFieldValueConnectionFields & { $args?: ProjectV2ItemFieldValuesArgs } & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the ProjectV2Item object */
  id?: $Pick
  /** Whether the item is archived. */
  isArchived?: $Pick
  /** The project that contains this item. */
  project?: $<ProjectV2Fields & $Options>
  /** The type of the item. */
  type?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldSingleSelectValueFields {
  __typename?: $Pick
  /** The color applied to the selected single-select option. */
  color?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** A plain-text description of the selected single-select option, such as what the option means. */
  description?: $Pick
  /** The description of the selected single-select option, including HTML tags. */
  descriptionHTML?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldSingleSelectValue object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** The name of the selected single select option. */
  name?: $Pick
  /** The html name of the selected single select option. */
  nameHTML?: $Pick
  /** The id of the selected single select option. */
  optionId?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldTextValueFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldTextValue object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** Text value of a field */
  text?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldUserValueFields {
  __typename?: $Pick
  /** The field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The users for this field */
  users?: $<UserConnectionFields & { $args?: ProjectV2ItemFieldUserValueUsersArgs } & $Options>
}
export interface ProjectV2ItemFieldValueCommonFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the item. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The project field that contains this value. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
  /** The Node ID of the ProjectV2ItemFieldValueCommon object */
  id?: $Pick
  /** The project item that contains this value. */
  item?: $<ProjectV2ItemFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ItemFieldValueConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2ItemFieldValueEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2ItemFieldValuePossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2ItemFieldValueEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2ItemFieldValuePossibleTypes & $Options>
}
export interface ProjectV2IterationFieldConfigurationFields {
  __typename?: $Pick
  /** The iteration's completed iterations */
  completedIterations?: $<ProjectV2IterationFieldIterationFields & $Options>
  /** The iteration's duration in days */
  duration?: $Pick
  /** The iteration's iterations */
  iterations?: $<ProjectV2IterationFieldIterationFields & $Options>
  /** The iteration's start day of the week */
  startDay?: $Pick
}
export interface ProjectV2IterationFieldFields {
  __typename?: $Pick
  /** Iteration configuration settings */
  configuration?: $<ProjectV2IterationFieldConfigurationFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The field's type. */
  dataType?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectV2IterationField object */
  id?: $Pick
  /** The project field's name. */
  name?: $Pick
  /** The project that contains this field. */
  project?: $<ProjectV2Fields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2IterationFieldIterationFields {
  __typename?: $Pick
  /** The iteration's duration in days */
  duration?: $Pick
  /** The iteration's ID. */
  id?: $Pick
  /** The iteration's start date */
  startDate?: $Pick
  /** The iteration's title. */
  title?: $Pick
  /** The iteration's html title. */
  titleHTML?: $Pick
}
export interface ProjectV2OwnerFields {
  __typename?: $Pick
  /** The Node ID of the ProjectV2Owner object */
  id?: $Pick
  /** Find a project by number. */
  projectV2?: $<ProjectV2Fields & { $args: ProjectV2OwnerProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: ProjectV2OwnerProjectsV2Args } & $Options>
}
export interface ProjectV2RecentFields {
  __typename?: $Pick
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: $<ProjectV2ConnectionFields & { $args?: ProjectV2RecentRecentProjectsArgs } & $Options>
}
export interface ProjectV2SingleSelectFieldFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The field's type. */
  dataType?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ProjectV2SingleSelectField object */
  id?: $Pick
  /** The project field's name. */
  name?: $Pick
  /** Options for the single select field */
  options?: $<ProjectV2SingleSelectFieldOptionFields & { $args?: ProjectV2SingleSelectFieldOptionsArgs } & $Options>
  /** The project that contains this field. */
  project?: $<ProjectV2Fields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2SingleSelectFieldOptionFields {
  __typename?: $Pick
  /** The option's display color. */
  color?: $Pick
  /** The option's plain-text description. */
  description?: $Pick
  /** The option's description, possibly containing HTML. */
  descriptionHTML?: $Pick
  /** The option's ID. */
  id?: $Pick
  /** The option's name. */
  name?: $Pick
  /** The option's html name. */
  nameHTML?: $Pick
}
export interface ProjectV2SortByConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2SortByEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2SortByFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2SortByEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2SortByFields & $Options>
}
export interface ProjectV2SortByFieldConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2SortByFieldEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2SortByFieldFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2SortByFieldEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2SortByFieldFields & $Options>
}
export interface ProjectV2SortByFieldFields {
  __typename?: $Pick
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction?: $Pick
  /** The field by which items are sorted. */
  field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
}
export interface ProjectV2SortByFields {
  __typename?: $Pick
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction?: $Pick
  /** The field by which items are sorted. */
  field?: $<ProjectV2FieldFields & $Options>
}
export interface ProjectV2StatusUpdateConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2StatusUpdateEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2StatusUpdateFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2StatusUpdateEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2StatusUpdateFields & $Options>
}
export interface ProjectV2StatusUpdateFields {
  __typename?: $Pick
  /** The body of the status update. */
  body?: $Pick
  /** The body of the status update rendered to HTML. */
  bodyHTML?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created the status update. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: $Pick
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the ProjectV2StatusUpdate object */
  id?: $Pick
  /** The project that contains this status update. */
  project?: $<ProjectV2Fields & $Options>
  /** The start date of the status update. */
  startDate?: $Pick
  /** The status of the status update. */
  status?: $Pick
  /** The target date of the status update. */
  targetDate?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface ProjectV2ViewConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2ViewEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2ViewFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2ViewEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2ViewFields & $Options>
}
export interface ProjectV2ViewFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: $Pick
  /** The view's visible fields. */
  fields?: $<ProjectV2FieldConfigurationConnectionFields & { $args?: ProjectV2ViewFieldsArgs } & $Options>
  /** The project view's filter. */
  filter?: $Pick
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The view's group-by field.
   *
   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  groupBy?: $<ProjectV2FieldConnectionFields & { $args?: ProjectV2ViewGroupByArgs } & $Options>
  /** The view's group-by field. */
  groupByFields?: $<ProjectV2FieldConfigurationConnectionFields & { $args?: ProjectV2ViewGroupByFieldsArgs } & $Options>
  /** The Node ID of the ProjectV2View object */
  id?: $Pick
  /** The project view's layout. */
  layout?: $Pick
  /** The project view's name. */
  name?: $Pick
  /** The project view's number. */
  number?: $Pick
  /** The project that contains this view. */
  project?: $<ProjectV2Fields & $Options>
  /** The view's sort-by config.
   *
   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  sortBy?: $<ProjectV2SortByConnectionFields & { $args?: ProjectV2ViewSortByArgs } & $Options>
  /** The view's sort-by config. */
  sortByFields?: $<ProjectV2SortByFieldConnectionFields & { $args?: ProjectV2ViewSortByFieldsArgs } & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The view's vertical-group-by field.
   *
   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC. */
  verticalGroupBy?: $<ProjectV2FieldConnectionFields & { $args?: ProjectV2ViewVerticalGroupByArgs } & $Options>
  /** The view's vertical-group-by field. */
  verticalGroupByFields?: $<ProjectV2FieldConfigurationConnectionFields & { $args?: ProjectV2ViewVerticalGroupByFieldsArgs } & $Options>
  /** The view's visible fields.
   *
   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC. */
  visibleFields?: $<ProjectV2FieldConnectionFields & { $args?: ProjectV2ViewVisibleFieldsArgs } & $Options>
}
export interface ProjectV2WorkflowConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ProjectV2WorkflowEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ProjectV2WorkflowFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ProjectV2WorkflowEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ProjectV2WorkflowFields & $Options>
}
export interface ProjectV2WorkflowFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2025-04-01 UTC. */
  databaseId?: $Pick
  /** Whether the workflow is enabled. */
  enabled?: $Pick
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the ProjectV2Workflow object */
  id?: $Pick
  /** The name of the workflow. */
  name?: $Pick
  /** The number of the workflow. */
  number?: $Pick
  /** The project that contains this workflow. */
  project?: $<ProjectV2Fields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface PropertyTargetDefinitionFields {
  __typename?: $Pick
  /** The name of the property */
  name?: $Pick
  /** The values to match for */
  propertyValues?: $Pick
  /** The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified */
  source?: $Pick
}
export interface PublicKeyConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PublicKeyEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PublicKeyFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PublicKeyEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PublicKeyFields & $Options>
}
export interface PublicKeyFields {
  __typename?: $Pick
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt?: $Pick
  /** Identifies the date and time when the key was created. Keys created before
   * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt?: $Pick
  /** The fingerprint for this PublicKey. */
  fingerprint?: $Pick
  /** The Node ID of the PublicKey object */
  id?: $Pick
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly?: $Pick
  /** The public key string. */
  key?: $Pick
  /** Identifies the date and time when the key was updated. Keys created before
   * March 5th, 2014 may have inaccurate values. Values will be null for keys not
   * owned by the user. */
  updatedAt?: $Pick
}
export interface PublishSponsorsTierPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The tier that was published. */
  sponsorsTier?: $<SponsorsTierFields & $Options>
}
export interface PullRequestChangedFileConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestChangedFileEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestChangedFileFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestChangedFileEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestChangedFileFields & $Options>
}
export interface PullRequestChangedFileFields {
  __typename?: $Pick
  /** The number of additions to the file. */
  additions?: $Pick
  /** How the file was changed in this PullRequest */
  changeType?: $Pick
  /** The number of deletions to the file. */
  deletions?: $Pick
  /** The path of the file. */
  path?: $Pick
  /** The state of the file for the viewer. */
  viewerViewedState?: $Pick
}
export interface PullRequestCommitCommentThreadFields {
  __typename?: $Pick
  /** The comments that exist in this thread. */
  comments?: $<CommitCommentConnectionFields & { $args?: PullRequestCommitCommentThreadCommentsArgs } & $Options>
  /** The commit the comments were made on. */
  commit?: $<CommitFields & $Options>
  /** The Node ID of the PullRequestCommitCommentThread object */
  id?: $Pick
  /** The file the comments were made on. */
  path?: $Pick
  /** The position in the diff for the commit that the comment was made on. */
  position?: $Pick
  /** The pull request this commit comment thread belongs to */
  pullRequest?: $<PullRequestFields & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
}
export interface PullRequestCommitConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestCommitEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestCommitFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestCommitEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestCommitFields & $Options>
}
export interface PullRequestCommitFields {
  __typename?: $Pick
  /** The Git commit object */
  commit?: $<CommitFields & $Options>
  /** The Node ID of the PullRequestCommit object */
  id?: $Pick
  /** The pull request this commit belongs to */
  pullRequest?: $<PullRequestFields & $Options>
  /** The HTTP path for this pull request commit */
  resourcePath?: $Pick
  /** The HTTP URL for this pull request commit */
  url?: $Pick
}
export interface PullRequestConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestContributionsByRepositoryFields {
  __typename?: $Pick
  /** The pull request contributions. */
  contributions?: $<CreatedPullRequestContributionConnectionFields & { $args?: PullRequestContributionsByRepositoryContributionsArgs } & $Options>
  /** The repository in which the pull requests were opened. */
  repository?: $<RepositoryFields & $Options>
}
export interface PullRequestEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestFields & $Options>
}
export interface PullRequestFields {
  __typename?: $Pick
  /** Reason that the conversation was locked. */
  activeLockReason?: $Pick
  /** The number of additions in this pull request. */
  additions?: $Pick
  /** A list of Users assigned to this object. */
  assignees?: $<UserConnectionFields & { $args?: PullRequestAssigneesArgs } & $Options>
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** Returns the auto-merge request object if one exists for this pull request. */
  autoMergeRequest?: $<AutoMergeRequestFields & $Options>
  /** Identifies the base Ref associated with the pull request. */
  baseRef?: $<RefFields & $Options>
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  baseRefName?: $Pick
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  baseRefOid?: $Pick
  /** The repository associated with this pull request's base Ref. */
  baseRepository?: $<RepositoryFields & $Options>
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Whether or not the pull request is rebaseable. */
  canBeRebased?: $Pick
  /** The number of changed files in this pull request. */
  changedFiles?: $Pick
  /** The HTTP path for the checks of this pull request. */
  checksResourcePath?: $Pick
  /** The HTTP URL for the checks of this pull request. */
  checksUrl?: $Pick
  /** `true` if the pull request is closed */
  closed?: $Pick
  /** Identifies the date and time when the object was closed. */
  closedAt?: $Pick
  /** List of issues that may be closed by this pull request */
  closingIssuesReferences?: $<IssueConnectionFields & { $args?: PullRequestClosingIssuesReferencesArgs } & $Options>
  /** A list of comments associated with the pull request. */
  comments?: $<IssueCommentConnectionFields & { $args?: PullRequestCommentsArgs } & $Options>
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  commits?: $<PullRequestCommitConnectionFields & { $args?: PullRequestCommitsArgs } & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: $Pick
  /** The number of deletions in this pull request. */
  deletions?: $Pick
  /** The actor who edited this pull request's body. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Lists the files changed within this pull request. */
  files?: $<PullRequestChangedFileConnectionFields & { $args?: PullRequestFilesArgs } & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** Identifies the head Ref associated with the pull request. */
  headRef?: $<RefFields & $Options>
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  headRefName?: $Pick
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  headRefOid?: $Pick
  /** The repository associated with this pull request's head Ref. */
  headRepository?: $<RepositoryFields & $Options>
  /** The owner of the repository associated with this pull request's head Ref. */
  headRepositoryOwner?: $<RepositoryOwnerFields & RepositoryOwnerPossibleTypes & $Options>
  /** The hovercard information for this issue */
  hovercard?: $<HovercardFields & { $args?: PullRequestHovercardArgs } & $Options>
  /** The Node ID of the PullRequest object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** The head and base repositories are different. */
  isCrossRepository?: $Pick
  /** Identifies if the pull request is a draft. */
  isDraft?: $Pick
  /** Indicates whether the pull request is in a merge queue */
  isInMergeQueue?: $Pick
  /** Indicates whether the pull request's base ref has a merge queue enabled. */
  isMergeQueueEnabled?: $Pick
  /** Is this pull request read by the viewer */
  isReadByViewer?: $Pick
  /** A list of labels associated with the object. */
  labels?: $<LabelConnectionFields & { $args?: PullRequestLabelsArgs } & $Options>
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** A list of latest reviews per user associated with the pull request. */
  latestOpinionatedReviews?: $<PullRequestReviewConnectionFields & { $args?: PullRequestLatestOpinionatedReviewsArgs } & $Options>
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  latestReviews?: $<PullRequestReviewConnectionFields & { $args?: PullRequestLatestReviewsArgs } & $Options>
  /** `true` if the pull request is locked */
  locked?: $Pick
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: $Pick
  /** The commit that was created when this pull request was merged. */
  mergeCommit?: $<CommitFields & $Options>
  /** The merge queue for the pull request's base branch */
  mergeQueue?: $<MergeQueueFields & $Options>
  /** The merge queue entry of the pull request in the base branch's merge queue */
  mergeQueueEntry?: $<MergeQueueEntryFields & $Options>
  /** Detailed information about the current pull request merge state status. */
  mergeStateStatus?: $Pick
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  mergeable?: $Pick
  /** Whether or not the pull request was merged. */
  merged?: $Pick
  /** The date and time that the pull request was merged. */
  mergedAt?: $Pick
  /** The actor who merged the pull request. */
  mergedBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the milestone associated with the pull request. */
  milestone?: $<MilestoneFields & $Options>
  /** Identifies the pull request number. */
  number?: $Pick
  /** A list of Users that are participating in the Pull Request conversation. */
  participants?: $<UserConnectionFields & { $args?: PullRequestParticipantsArgs } & $Options>
  /** The permalink to the pull request. */
  permalink?: $Pick
  /** The commit that GitHub automatically generated to test if this pull request
   * could be merged. This field will not return a value if the pull request is
   * merged, or if the test merge commit is still being generated. See the
   * `mergeable` field for more details on the mergeability of the pull request. */
  potentialMergeCommit?: $<CommitFields & $Options>
  /** List of project cards associated with this pull request. */
  projectCards?: $<ProjectCardConnectionFields & { $args?: PullRequestProjectCardsArgs } & $Options>
  /** List of project items associated with this pull request. */
  projectItems?: $<ProjectV2ItemConnectionFields & { $args?: PullRequestProjectItemsArgs } & $Options>
  /** Find a project by number. */
  projectV2?: $<ProjectV2Fields & { $args: PullRequestProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: PullRequestProjectsV2Args } & $Options>
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: PullRequestReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this pull request. */
  resourcePath?: $Pick
  /** The HTTP path for reverting this pull request. */
  revertResourcePath?: $Pick
  /** The HTTP URL for reverting this pull request. */
  revertUrl?: $Pick
  /** The current status of this pull request with respect to code review. */
  reviewDecision?: $Pick
  /** A list of review requests associated with the pull request. */
  reviewRequests?: $<ReviewRequestConnectionFields & { $args?: PullRequestReviewRequestsArgs } & $Options>
  /** The list of all review threads for this pull request. */
  reviewThreads?: $<PullRequestReviewThreadConnectionFields & { $args?: PullRequestReviewThreadsArgs } & $Options>
  /** A list of reviews associated with the pull request. */
  reviews?: $<PullRequestReviewConnectionFields & { $args?: PullRequestReviewsArgs } & $Options>
  /** Identifies the state of the pull request. */
  state?: $Pick
  /** Check and Status rollup information for the PR's head ref. */
  statusCheckRollup?: $<StatusCheckRollupFields & $Options>
  /** A list of reviewer suggestions based on commit history and past review comments. */
  suggestedReviewers?: $<SuggestedReviewerFields & $Options>
  /** A list of events, comments, commits, etc. associated with the pull request.
   *
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC. */
  timeline?: $<PullRequestTimelineConnectionFields & { $args?: PullRequestTimelineArgs } & $Options>
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timelineItems?: $<PullRequestTimelineItemsConnectionFields & { $args?: PullRequestTimelineItemsArgs } & $Options>
  /** Identifies the pull request title. */
  title?: $Pick
  /** Identifies the pull request title rendered to HTML. */
  titleHTML?: $Pick
  /** Returns a count of how many comments this pull request has received. */
  totalCommentsCount?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this pull request. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: PullRequestUserContentEditsArgs } & $Options>
  /** Whether or not the viewer can apply suggestion. */
  viewerCanApplySuggestion?: $Pick
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: $Pick
  /** Check if the viewer can restore the deleted head ref. */
  viewerCanDeleteHeadRef?: $Pick
  /** Whether or not the viewer can disable auto-merge */
  viewerCanDisableAutoMerge?: $Pick
  /** Can the viewer edit files within this pull request. */
  viewerCanEditFiles?: $Pick
  /** Whether or not the viewer can enable auto-merge */
  viewerCanEnableAutoMerge?: $Pick
  /** Indicates if the viewer can edit labels for this object. */
  viewerCanLabel?: $Pick
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  viewerCanMergeAsAdmin?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
   * If the head ref is up to date or unable to be updated by this user, this will return false. */
  viewerCanUpdateBranch?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
  /** The latest review given from the viewer. */
  viewerLatestReview?: $<PullRequestReviewFields & $Options>
  /** The person who has requested the viewer for review on this pull request. */
  viewerLatestReviewRequest?: $<ReviewRequestFields & $Options>
  /** The merge body text for the viewer and method. */
  viewerMergeBodyText?: $Scalar | $<$Options & { $args?: PullRequestViewerMergeBodyTextArgs }>
  /** The merge headline text for the viewer and method. */
  viewerMergeHeadlineText?: $Scalar | $<$Options & { $args?: PullRequestViewerMergeHeadlineTextArgs }>
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
}
export interface PullRequestParametersFields {
  __typename?: $Pick
  /** When merging pull requests, you can allow any combination of merge commits,
   * squashing, or rebasing. At least one option must be enabled. */
  allowedMergeMethods?: $Pick
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush?: $Pick
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview?: $Pick
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval?: $Pick
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount?: $Pick
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution?: $Pick
}
export interface PullRequestReviewCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestReviewCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestReviewCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestReviewCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestReviewCommentFields & $Options>
}
export interface PullRequestReviewCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** The comment body of this review comment. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The comment body of this review comment rendered as plain text. */
  bodyText?: $Pick
  /** Identifies the commit associated with the comment. */
  commit?: $<CommitFields & $Options>
  /** Identifies when the comment was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: $Pick
  /** The diff hunk to which the comment applies. */
  diffHunk?: $Pick
  /** Identifies when the comment was created in a draft state. */
  draftedAt?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the PullRequestReviewComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** The end line number on the file to which the comment applies */
  line?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** Identifies the original commit associated with the comment. */
  originalCommit?: $<CommitFields & $Options>
  /** The end line number on the file to which the comment applied when it was first created */
  originalLine?: $Pick
  /** The original line index in the diff to which the comment applies.
   *
   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC. */
  originalPosition?: $Pick
  /** The start line number on the file to which the comment applied when it was first created */
  originalStartLine?: $Pick
  /** Identifies when the comment body is outdated */
  outdated?: $Pick
  /** The path to which the comment applies. */
  path?: $Pick
  /** The line index in the diff to which the comment applies.
   *
   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC. */
  position?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** The pull request associated with this review comment. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The pull request review associated with this review comment. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: PullRequestReviewCommentReactionsArgs } & $Options>
  /** The comment this is a reply to. */
  replyTo?: $<PullRequestReviewCommentFields & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path permalink for this review comment. */
  resourcePath?: $Pick
  /** The start line number on the file to which the comment applies */
  startLine?: $Pick
  /** Identifies the state of the comment. */
  state?: $Pick
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: $Pick
  /** Identifies when the comment was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL permalink for this review comment. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: PullRequestReviewCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface PullRequestReviewConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestReviewEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestReviewFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestReviewContributionsByRepositoryFields {
  __typename?: $Pick
  /** The pull request review contributions. */
  contributions?: $<CreatedPullRequestReviewContributionConnectionFields & { $args?: PullRequestReviewContributionsByRepositoryContributionsArgs } & $Options>
  /** The repository in which the pull request reviews were made. */
  repository?: $<RepositoryFields & $Options>
}
export interface PullRequestReviewEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestReviewFields & $Options>
}
export interface PullRequestReviewFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the subject of the comment. */
  authorAssociation?: $Pick
  /** Indicates whether the author of this review has push access to the repository. */
  authorCanPushToRepository?: $Pick
  /** Identifies the pull request review body. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body of this review rendered as plain text. */
  bodyText?: $Pick
  /** A list of review comments for the current pull request review. */
  comments?: $<PullRequestReviewCommentConnectionFields & { $args?: PullRequestReviewCommentsArgs } & $Options>
  /** Identifies the commit associated with this pull request review. */
  commit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database.
   *
   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: $Pick
  /** The Node ID of the PullRequestReview object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`,
   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
   * formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: $Pick
  /** A list of teams that this review was made on behalf of. */
  onBehalfOf?: $<TeamConnectionFields & { $args?: PullRequestReviewOnBehalfOfArgs } & $Options>
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** Identifies the pull request associated with this pull request review. */
  pullRequest?: $<PullRequestFields & $Options>
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: PullRequestReviewReactionsArgs } & $Options>
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path permalink for this PullRequestReview. */
  resourcePath?: $Pick
  /** Identifies the current state of the pull request review. */
  state?: $Pick
  /** Identifies when the Pull Request Review was submitted */
  submittedAt?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL permalink for this PullRequestReview. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: PullRequestReviewUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface PullRequestReviewThreadConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestReviewThreadEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestReviewThreadFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestReviewThreadEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestReviewThreadFields & $Options>
}
export interface PullRequestReviewThreadFields {
  __typename?: $Pick
  /** A list of pull request comments associated with the thread. */
  comments?: $<PullRequestReviewCommentConnectionFields & { $args?: PullRequestReviewThreadCommentsArgs } & $Options>
  /** The side of the diff on which this thread was placed. */
  diffSide?: $Pick
  /** The Node ID of the PullRequestReviewThread object */
  id?: $Pick
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed?: $Pick
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated?: $Pick
  /** Whether this thread has been resolved */
  isResolved?: $Pick
  /** The line in the file to which this thread refers */
  line?: $Pick
  /** The original line in the file to which this thread refers. */
  originalLine?: $Pick
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine?: $Pick
  /** Identifies the file path of this thread. */
  path?: $Pick
  /** Identifies the pull request associated with this thread. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the repository associated with this thread. */
  repository?: $<RepositoryFields & $Options>
  /** The user who resolved this thread */
  resolvedBy?: $<UserFields & $Options>
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: $Pick
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine?: $Pick
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: $Pick
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply?: $Pick
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve?: $Pick
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve?: $Pick
}
export interface PullRequestRevisionMarkerFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The last commit the viewer has seen. */
  lastSeenCommit?: $<CommitFields & $Options>
  /** The pull request to which the marker belongs. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface PullRequestTemplateFields {
  __typename?: $Pick
  /** The body of the template */
  body?: $Pick
  /** The filename of the template */
  filename?: $Pick
  /** The repository the template belongs to */
  repository?: $<RepositoryFields & $Options>
}
export interface PullRequestThreadFields {
  __typename?: $Pick
  /** A list of pull request comments associated with the thread. */
  comments?: $<PullRequestReviewCommentConnectionFields & { $args?: PullRequestThreadCommentsArgs } & $Options>
  /** The side of the diff on which this thread was placed. */
  diffSide?: $Pick
  /** The Node ID of the PullRequestThread object */
  id?: $Pick
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed?: $Pick
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated?: $Pick
  /** Whether this thread has been resolved */
  isResolved?: $Pick
  /** The line in the file to which this thread refers */
  line?: $Pick
  /** Identifies the file path of this thread. */
  path?: $Pick
  /** Identifies the pull request associated with this thread. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the repository associated with this thread. */
  repository?: $<RepositoryFields & $Options>
  /** The user who resolved this thread */
  resolvedBy?: $<UserFields & $Options>
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: $Pick
  /** The line of the first file diff in the thread. */
  startLine?: $Pick
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: $Pick
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply?: $Pick
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve?: $Pick
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve?: $Pick
}
export interface PullRequestTimelineConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestTimelineItemEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PullRequestTimelineItemPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PullRequestTimelineItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestTimelineItemPossibleTypes & $Options>
}
export interface PullRequestTimelineItemsConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PullRequestTimelineItemsEdgeFields & $Options>
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount?: $Pick
  /** A list of nodes. */
  nodes?: $<PullRequestTimelineItemsPossibleTypes & $Options>
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount?: $Pick
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt?: $Pick
}
export interface PullRequestTimelineItemsEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PullRequestTimelineItemsPossibleTypes & $Options>
}
export interface PushAllowanceConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<PushAllowanceEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<PushAllowanceFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface PushAllowanceEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<PushAllowanceFields & $Options>
}
export interface PushAllowanceFields {
  __typename?: $Pick
  /** The actor that can push. */
  actor?: $<PushAllowanceActorPossibleTypes & $Options>
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** The Node ID of the PushAllowance object */
  id?: $Pick
}
export interface PushFields {
  __typename?: $Pick
  /** The Node ID of the Push object */
  id?: $Pick
  /** The SHA after the push */
  nextSha?: $Pick
  /** The permalink for this push. */
  permalink?: $Pick
  /** The SHA before the push */
  previousSha?: $Pick
  /** The actor who pushed */
  pusher?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The repository that was pushed to */
  repository?: $<RepositoryFields & $Options>
}
export interface QueryFields {
  __typename?: $Pick
  /** Look up a code of conduct by its key */
  codeOfConduct?: $<CodeOfConductFields & { $args: QueryCodeOfConductArgs } & $Options>
  /** Look up a code of conduct by its key */
  codesOfConduct?: $<CodeOfConductFields & $Options>
  /** Look up an enterprise by URL slug. */
  enterprise?: $<EnterpriseFields & { $args: QueryEnterpriseArgs } & $Options>
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation?: $<EnterpriseAdministratorInvitationFields & { $args: QueryEnterpriseAdministratorInvitationArgs } & $Options>
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken?: $<EnterpriseAdministratorInvitationFields & { $args: QueryEnterpriseAdministratorInvitationByTokenArgs } & $Options>
  /** Look up a pending enterprise unaffiliated member invitation by invitee and enterprise. */
  enterpriseMemberInvitation?: $<EnterpriseMemberInvitationFields & { $args: QueryEnterpriseMemberInvitationArgs } & $Options>
  /** Look up a pending enterprise unaffiliated member invitation by invitation token. */
  enterpriseMemberInvitationByToken?: $<EnterpriseMemberInvitationFields & { $args: QueryEnterpriseMemberInvitationByTokenArgs } & $Options>
  /** ID of the object. */
  id?: $Pick
  /** Look up an open source license by its key */
  license?: $<LicenseFields & { $args: QueryLicenseArgs } & $Options>
  /** Return a list of known open source licenses */
  licenses?: $<LicenseFields & $Options>
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories?: $<MarketplaceCategoryFields & { $args?: QueryMarketplaceCategoriesArgs } & $Options>
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory?: $<MarketplaceCategoryFields & { $args: QueryMarketplaceCategoryArgs } & $Options>
  /** Look up a single Marketplace listing */
  marketplaceListing?: $<MarketplaceListingFields & { $args: QueryMarketplaceListingArgs } & $Options>
  /** Look up Marketplace listings */
  marketplaceListings?: $<MarketplaceListingConnectionFields & { $args?: QueryMarketplaceListingsArgs } & $Options>
  /** Return information about the GitHub instance */
  meta?: $<GitHubMetadataFields & $Options>
  /** Fetches an object given its ID. */
  node?: $<NodeFields & { $args: QueryNodeArgs } & NodePossibleTypes & $Options>
  /** Lookup nodes by a list of IDs. */
  nodes?: $<NodeFields & { $args: QueryNodesArgs } & NodePossibleTypes & $Options>
  /** Lookup a organization by login. */
  organization?: $<OrganizationFields & { $args: QueryOrganizationArgs } & $Options>
  /** The client's rate limit information. */
  rateLimit?: $<RateLimitFields & { $args?: QueryRateLimitArgs } & $Options>
  /** Workaround for re-exposing the root query object. (Refer to
   * https://github.com/facebook/relay/issues/112 for more information.) */
  relay?: $<QueryFields & $Options>
  /** Lookup a given repository by the owner and repository name. */
  repository?: $<RepositoryFields & { $args: QueryRepositoryArgs } & $Options>
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner?: $<RepositoryOwnerFields & { $args: QueryRepositoryOwnerArgs } & RepositoryOwnerPossibleTypes & $Options>
  /** Lookup resource by a URL. */
  resource?: $<UniformResourceLocatableFields & { $args: QueryResourceArgs } & UniformResourceLocatablePossibleTypes & $Options>
  /** Perform a search across resources, returning a maximum of 1,000 results. */
  search?: $<SearchResultItemConnectionFields & { $args: QuerySearchArgs } & $Options>
  /** GitHub Security Advisories */
  securityAdvisories?: $<SecurityAdvisoryConnectionFields & { $args?: QuerySecurityAdvisoriesArgs } & $Options>
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory?: $<SecurityAdvisoryFields & { $args: QuerySecurityAdvisoryArgs } & $Options>
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities?: $<SecurityVulnerabilityConnectionFields & { $args?: QuerySecurityVulnerabilitiesArgs } & $Options>
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables?: $<SponsorableItemConnectionFields & { $args?: QuerySponsorablesArgs } & $Options>
  /** Look up a topic by name. */
  topic?: $<TopicFields & { $args: QueryTopicArgs } & $Options>
  /** Lookup a user by login. */
  user?: $<UserFields & { $args: QueryUserArgs } & $Options>
  /** The currently authenticated user. */
  viewer?: $<UserFields & $Options>
}
export interface RateLimitFields {
  __typename?: $Pick
  /** The point cost for the current query counting against the rate limit. */
  cost?: $Pick
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit?: $Pick
  /** The maximum number of nodes this query may return */
  nodeCount?: $Pick
  /** The number of points remaining in the current rate limit window. */
  remaining?: $Pick
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt?: $Pick
  /** The number of points used in the current rate limit window. */
  used?: $Pick
}
export interface ReactableFields {
  __typename?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Reactable object */
  id?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: ReactableReactionsArgs } & $Options>
  /** Can user react to this subject */
  viewerCanReact?: $Pick
}
export interface ReactingUserConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReactingUserEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReactingUserEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  node?: $<UserFields & $Options>
  /** The moment when the user made the reaction. */
  reactedAt?: $Pick
}
export interface ReactionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReactionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReactionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted?: $Pick
}
export interface ReactionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ReactionFields & $Options>
}
export interface ReactionFields {
  __typename?: $Pick
  /** Identifies the emoji reaction. */
  content?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Reaction object */
  id?: $Pick
  /** The reactable piece of content */
  reactable?: $<ReactableFields & ReactablePossibleTypes & $Options>
  /** Identifies the user who created this reaction. */
  user?: $<UserFields & $Options>
}
export interface ReactionGroupFields {
  __typename?: $Pick
  /** Identifies the emoji reaction. */
  content?: $Pick
  /** Identifies when the reaction was created. */
  createdAt?: $Pick
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors?: $<ReactorConnectionFields & { $args?: ReactionGroupReactorsArgs } & $Options>
  /** The subject that was reacted to. */
  subject?: $<ReactableFields & ReactablePossibleTypes & $Options>
  /** Users who have reacted to the reaction subject with the emotion represented by this reaction group
   *
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC. */
  users?: $<ReactingUserConnectionFields & { $args?: ReactionGroupUsersArgs } & $Options>
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted?: $Pick
}
export interface ReactorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReactorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReactorPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReactorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The author of the reaction. */
  node?: $<ReactorPossibleTypes & $Options>
  /** The moment when the user made the reaction. */
  reactedAt?: $Pick
}
export interface ReadyForReviewEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ReadyForReviewEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The HTTP path for this ready for review event. */
  resourcePath?: $Pick
  /** The HTTP URL for this ready for review event. */
  url?: $Pick
}
export interface RefConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RefEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RefFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RefEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RefFields & $Options>
}
export interface ReferencedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the commit associated with the 'referenced' event. */
  commit?: $<CommitFields & $Options>
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository?: $<RepositoryFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ReferencedEvent object */
  id?: $Pick
  /** Reference originated in a different repository. */
  isCrossRepository?: $Pick
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference?: $Pick
  /** Object referenced by event. */
  subject?: $<ReferencedSubjectPossibleTypes & $Options>
}
export interface RefFields {
  __typename?: $Pick
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests?: $<PullRequestConnectionFields & { $args?: RefAssociatedPullRequestsArgs } & $Options>
  /** Branch protection rules for this ref */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
  compare?: $<ComparisonFields & { $args: RefCompareArgs } & $Options>
  /** The Node ID of the Ref object */
  id?: $Pick
  /** The ref name. */
  name?: $Pick
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix?: $Pick
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule?: $<RefUpdateRuleFields & $Options>
  /** The repository the ref belongs to. */
  repository?: $<RepositoryFields & $Options>
  /** A list of rules from active Repository and Organization rulesets that apply to this ref. */
  rules?: $<RepositoryRuleConnectionFields & { $args?: RefRulesArgs } & $Options>
  /** The object the ref points to. Returns null when object does not exist. */
  target?: $<GitObjectFields & GitObjectPossibleTypes & $Options>
}
export interface RefNameConditionTargetFields {
  __typename?: $Pick
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude?: $Pick
  /** Array of ref names or patterns to include. One of these patterns must match
   * for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
   * default branch or `~ALL` to include all branches. */
  include?: $Pick
}
export interface RefUpdateRuleFields {
  __typename?: $Pick
  /** Can this branch be deleted. */
  allowsDeletions?: $Pick
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: $Pick
  /** Can matching branches be created. */
  blocksCreations?: $Pick
  /** Identifies the protection rule pattern. */
  pattern?: $Pick
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: $Pick
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: $Pick
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: $Pick
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: $Pick
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: $Pick
  /** Are commits required to be signed. */
  requiresSignatures?: $Pick
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews?: $Pick
  /** Can the viewer push to the branch */
  viewerCanPush?: $Pick
}
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The identity provider for the enterprise. */
  identityProvider?: $<EnterpriseIdentityProviderFields & $Options>
}
export interface RegenerateVerifiableDomainTokenPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The verification token that was generated. */
  verificationToken?: $Pick
}
export interface RejectDeploymentsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The affected deployments. */
  deployments?: $<DeploymentFields & $Options>
}
export interface ReleaseAssetConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReleaseAssetEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReleaseAssetFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReleaseAssetEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ReleaseAssetFields & $Options>
}
export interface ReleaseAssetFields {
  __typename?: $Pick
  /** The asset's content-type */
  contentType?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The number of times this asset was downloaded */
  downloadCount?: $Pick
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl?: $Pick
  /** The Node ID of the ReleaseAsset object */
  id?: $Pick
  /** Identifies the title of the release asset. */
  name?: $Pick
  /** Release that the asset is associated with */
  release?: $<ReleaseFields & $Options>
  /** The size (in bytes) of the asset */
  size?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The user that performed the upload */
  uploadedBy?: $<UserFields & $Options>
  /** Identifies the URL of the release asset. */
  url?: $Pick
}
export interface ReleaseConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReleaseEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReleaseFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReleaseEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ReleaseFields & $Options>
}
export interface ReleaseFields {
  __typename?: $Pick
  /** The author of the release */
  author?: $<UserFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The description of the release. */
  description?: $Pick
  /** The description of this release rendered to HTML. */
  descriptionHTML?: $Pick
  /** The Node ID of the Release object */
  id?: $Pick
  /** Whether or not the release is a draft */
  isDraft?: $Pick
  /** Whether or not the release is the latest releast */
  isLatest?: $Pick
  /** Whether or not the release is a prerelease */
  isPrerelease?: $Pick
  /** A list of users mentioned in the release description */
  mentions?: $<UserConnectionFields & { $args?: ReleaseMentionsArgs } & $Options>
  /** The title of the release. */
  name?: $Pick
  /** Identifies the date and time when the release was created. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: ReleaseReactionsArgs } & $Options>
  /** List of releases assets which are dependent on this release. */
  releaseAssets?: $<ReleaseAssetConnectionFields & { $args?: ReleaseReleaseAssetsArgs } & $Options>
  /** The repository that the release belongs to. */
  repository?: $<RepositoryFields & $Options>
  /** The HTTP path for this issue */
  resourcePath?: $Pick
  /** A description of the release, rendered to HTML without any links in it. */
  shortDescriptionHTML?: $Scalar | $<$Options & { $args?: ReleaseShortDescriptionHTMLArgs }>
  /** The Git tag the release points to */
  tag?: $<RefFields & $Options>
  /** The tag commit for this release. */
  tagCommit?: $<CommitFields & $Options>
  /** The name of the release's Git tag */
  tagName?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this issue */
  url?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
}
export interface RemoveAssigneesFromAssignablePayloadFields {
  __typename?: $Pick
  /** The item that was unassigned. */
  assignable?: $<AssignableFields & AssignablePossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface RemovedFromMergeQueueEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the before commit SHA for the 'removed_from_merge_queue' event. */
  beforeCommit?: $<CommitFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The user who removed this Pull Request from the merge queue */
  enqueuer?: $<UserFields & $Options>
  /** The Node ID of the RemovedFromMergeQueueEvent object */
  id?: $Pick
  /** The merge queue where this pull request was removed from. */
  mergeQueue?: $<MergeQueueFields & $Options>
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The reason this pull request was removed from the queue. */
  reason?: $Pick
}
export interface RemovedFromProjectEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the RemovedFromProjectEvent object */
  id?: $Pick
  /** Project referenced by event. */
  project?: $<ProjectFields & $Options>
  /** Column name referenced by this project event. */
  projectColumnName?: $Pick
}
export interface RemoveEnterpriseAdminPayloadFields {
  __typename?: $Pick
  /** The user who was removed as an administrator. */
  admin?: $<UserFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated enterprise. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of removing an administrator. */
  message?: $Pick
  /** The viewer performing the mutation. */
  viewer?: $<UserFields & $Options>
}
export interface RemoveEnterpriseIdentityProviderPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The identity provider that was removed from the enterprise. */
  identityProvider?: $<EnterpriseIdentityProviderFields & $Options>
}
export interface RemoveEnterpriseMemberPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated enterprise. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The user that was removed from the enterprise. */
  user?: $<UserFields & $Options>
  /** The viewer performing the mutation. */
  viewer?: $<UserFields & $Options>
}
export interface RemoveEnterpriseOrganizationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated enterprise. */
  enterprise?: $<EnterpriseFields & $Options>
  /** The organization that was removed from the enterprise. */
  organization?: $<OrganizationFields & $Options>
  /** The viewer performing the mutation. */
  viewer?: $<UserFields & $Options>
}
export interface RemoveEnterpriseSupportEntitlementPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of removing the support entitlement. */
  message?: $Pick
}
export interface RemoveLabelsFromLabelablePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The Labelable the labels were removed from. */
  labelable?: $<LabelableFields & LabelablePossibleTypes & $Options>
}
export interface RemoveOutsideCollaboratorPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The user that was removed as an outside collaborator. */
  removedUser?: $<UserFields & $Options>
}
export interface RemoveReactionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The reaction object. */
  reaction?: $<ReactionFields & $Options>
  /** The reaction groups for the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** The reactable subject. */
  subject?: $<ReactableFields & ReactablePossibleTypes & $Options>
}
export interface RemoveStarPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The starrable. */
  starrable?: $<StarrableFields & StarrablePossibleTypes & $Options>
}
export interface RemoveSubIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The parent of the sub-issue. */
  issue?: $<IssueFields & $Options>
  /** The sub-issue of the parent. */
  subIssue?: $<IssueFields & $Options>
}
export interface RemoveUpvotePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The votable subject. */
  subject?: $<VotableFields & VotablePossibleTypes & $Options>
}
export interface RenamedTitleEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the current title of the issue or pull request. */
  currentTitle?: $Pick
  /** The Node ID of the RenamedTitleEvent object */
  id?: $Pick
  /** Identifies the previous title of the issue or pull request. */
  previousTitle?: $Pick
  /** Subject that was renamed. */
  subject?: $<RenamedTitleSubjectPossibleTypes & $Options>
}
export interface ReopenDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that was reopened. */
  discussion?: $<DiscussionFields & $Options>
}
export interface ReopenedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Object that was reopened. */
  closable?: $<ClosableFields & ClosablePossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ReopenedEvent object */
  id?: $Pick
  /** The reason the issue state was changed to open. */
  stateReason?: $Pick
}
export interface ReopenIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue that was opened. */
  issue?: $<IssueFields & $Options>
}
export interface ReopenPullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that was reopened. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface ReorderEnvironmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The environment that was reordered */
  environment?: $<EnvironmentFields & $Options>
}
export interface RepoAccessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoAccessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoAddMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoAddMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoAddTopicAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoAddTopicAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The name of the topic added to the repository */
  topic?: $<TopicFields & $Options>
  /** The name of the topic added to the repository */
  topicName?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoArchivedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoArchivedAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoChangeMergeSettingAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoChangeMergeSettingAuditEntry object */
  id?: $Pick
  /** Whether the change was to enable (true) or disable (false) the merge type */
  isEnabled?: $Pick
  /** The merge method affected by the change */
  mergeType?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigDisableAnonymousGitAccessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigDisableCollaboratorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigDisableContributorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigDisableSockpuppetDisallowedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigEnableAnonymousGitAccessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigEnableCollaboratorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigEnableContributorsOnlyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigEnableSockpuppetDisallowedAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigLockAnonymousGitAccessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoConfigUnlockAnonymousGitAccessAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepoCreateAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The name of the parent repository for this forked repository. */
  forkParentName?: $Pick
  /** The name of the root repository for this network. */
  forkSourceName?: $Pick
  /** The Node ID of the RepoCreateAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoDestroyAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoDestroyAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoRemoveMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoRemoveMemberAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
  /** The visibility of the repository */
  visibility?: $Pick
}
export interface RepoRemoveTopicAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the RepoRemoveTopicAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The name of the topic added to the repository */
  topic?: $<TopicFields & $Options>
  /** The name of the topic added to the repository */
  topicName?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepositoryAuditEntryDataFields {
  __typename?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
}
export interface RepositoryCodeownersErrorFields {
  __typename?: $Pick
  /** The column number where the error occurs. */
  column?: $Pick
  /** A short string describing the type of error. */
  kind?: $Pick
  /** The line number where the error occurs. */
  line?: $Pick
  /** A complete description of the error, combining information from other fields. */
  message?: $Pick
  /** The path to the file when the error occurs. */
  path?: $Pick
  /** The content of the line where the error occurs. */
  source?: $Pick
  /** A suggestion of how to fix the error. */
  suggestion?: $Pick
}
export interface RepositoryCodeownersFields {
  __typename?: $Pick
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors?: $<RepositoryCodeownersErrorFields & $Options>
}
export interface RepositoryCollaboratorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryCollaboratorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryCollaboratorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  node?: $<UserFields & $Options>
  /** The permission the user has on the repository. */
  permission?: $Pick
  /** A list of sources for the user's access to the repository. */
  permissionSources?: $<PermissionSourceFields & $Options>
}
export interface RepositoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** The total size in kilobytes of all repositories in the connection. Value will
   * never be larger than max 32-bit signed integer. */
  totalDiskUsage?: $Pick
}
export interface RepositoryContactLinkFields {
  __typename?: $Pick
  /** The contact link purpose. */
  about?: $Pick
  /** The contact link name. */
  name?: $Pick
  /** The contact link URL. */
  url?: $Pick
}
export interface RepositoryDiscussionAuthorFields {
  __typename?: $Pick
  /** Discussions this user has started. */
  repositoryDiscussions?: $<DiscussionConnectionFields & { $args?: RepositoryDiscussionAuthorRepositoryDiscussionsArgs } & $Options>
}
export interface RepositoryDiscussionCommentAuthorFields {
  __typename?: $Pick
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: $<DiscussionCommentConnectionFields & { $args?: RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs } & $Options>
}
export interface RepositoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryFields & $Options>
}
export interface RepositoryFields {
  __typename?: $Pick
  /** Whether or not a pull request head branch that is behind its base branch can
   * always be updated even if it is not required to be up to date before merging. */
  allowUpdateBranch?: $Pick
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: $Pick
  /** A list of users that can be assigned to issues in this repository. */
  assignableUsers?: $<UserConnectionFields & { $args?: RepositoryAssignableUsersArgs } & $Options>
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  autoMergeAllowed?: $Pick
  /** A list of branch protection rules for this repository. */
  branchProtectionRules?: $<BranchProtectionRuleConnectionFields & { $args?: RepositoryBranchProtectionRulesArgs } & $Options>
  /** Returns the code of conduct for this repository */
  codeOfConduct?: $<CodeOfConductFields & $Options>
  /** Information extracted from the repository's `CODEOWNERS` file. */
  codeowners?: $<RepositoryCodeownersFields & { $args?: RepositoryCodeownersArgs } & $Options>
  /** A list of collaborators associated with the repository. */
  collaborators?: $<RepositoryCollaboratorConnectionFields & { $args?: RepositoryCollaboratorsArgs } & $Options>
  /** A list of commit comments associated with the repository. */
  commitComments?: $<CommitCommentConnectionFields & { $args?: RepositoryCommitCommentsArgs } & $Options>
  /** Returns a list of contact links associated to the repository */
  contactLinks?: $<RepositoryContactLinkFields & $Options>
  /** Returns the contributing guidelines for this repository. */
  contributingGuidelines?: $<ContributingGuidelinesFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Ref associated with the repository's default branch. */
  defaultBranchRef?: $<RefFields & $Options>
  /** Whether or not branches are automatically deleted when merged in this repository. */
  deleteBranchOnMerge?: $Pick
  /** A list of dependency manifests contained in the repository */
  dependencyGraphManifests?: $<DependencyGraphManifestConnectionFields & { $args?: RepositoryDependencyGraphManifestsArgs } & $Options>
  /** A list of deploy keys that are on this repository. */
  deployKeys?: $<DeployKeyConnectionFields & { $args?: RepositoryDeployKeysArgs } & $Options>
  /** Deployments associated with the repository */
  deployments?: $<DeploymentConnectionFields & { $args?: RepositoryDeploymentsArgs } & $Options>
  /** The description of the repository. */
  description?: $Pick
  /** The description of the repository rendered to HTML. */
  descriptionHTML?: $Pick
  /** Returns a single discussion from the current repository by number. */
  discussion?: $<DiscussionFields & { $args: RepositoryDiscussionArgs } & $Options>
  /** A list of discussion categories that are available in the repository. */
  discussionCategories?: $<DiscussionCategoryConnectionFields & { $args?: RepositoryDiscussionCategoriesArgs } & $Options>
  /** A discussion category by slug. */
  discussionCategory?: $<DiscussionCategoryFields & { $args: RepositoryDiscussionCategoryArgs } & $Options>
  /** A list of discussions that have been opened in the repository. */
  discussions?: $<DiscussionConnectionFields & { $args?: RepositoryDiscussionsArgs } & $Options>
  /** The number of kilobytes this repository occupies on disk. */
  diskUsage?: $Pick
  /** Returns a single active environment from the current repository by name. */
  environment?: $<EnvironmentFields & { $args: RepositoryEnvironmentArgs } & $Options>
  /** A list of environments that are in this repository. */
  environments?: $<EnvironmentConnectionFields & { $args?: RepositoryEnvironmentsArgs } & $Options>
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount?: $Pick
  /** Whether this repository allows forks. */
  forkingAllowed?: $Pick
  /** A list of direct forked repositories. */
  forks?: $<RepositoryConnectionFields & { $args?: RepositoryForksArgs } & $Options>
  /** The funding links for this repository */
  fundingLinks?: $<FundingLinkFields & $Options>
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled?: $Pick
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled?: $Pick
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled?: $Pick
  /** Indicates if the repository displays a Sponsor button for financial contributions. */
  hasSponsorshipsEnabled?: $Pick
  /** Whether vulnerability alerts are enabled for the repository. */
  hasVulnerabilityAlertsEnabled?: $Pick
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled?: $Pick
  /** The repository's URL. */
  homepageUrl?: $Pick
  /** The Node ID of the Repository object */
  id?: $Pick
  /** The interaction ability settings for this repository. */
  interactionAbility?: $<RepositoryInteractionAbilityFields & $Options>
  /** Indicates if the repository is unmaintained. */
  isArchived?: $Pick
  /** Returns true if blank issue creation is allowed */
  isBlankIssuesEnabled?: $Pick
  /** Returns whether or not this repository disabled. */
  isDisabled?: $Pick
  /** Returns whether or not this repository is empty. */
  isEmpty?: $Pick
  /** Identifies if the repository is a fork. */
  isFork?: $Pick
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization?: $Pick
  /** Indicates if the repository has been locked or not. */
  isLocked?: $Pick
  /** Identifies if the repository is a mirror. */
  isMirror?: $Pick
  /** Identifies if the repository is private or internal. */
  isPrivate?: $Pick
  /** Returns true if this repository has a security policy */
  isSecurityPolicyEnabled?: $Pick
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate?: $Pick
  /** Is this repository a user configuration repository? */
  isUserConfigurationRepository?: $Pick
  /** Returns a single issue from the current repository by number. */
  issue?: $<IssueFields & { $args: RepositoryIssueArgs } & $Options>
  /** Returns a single issue-like object from the current repository by number. */
  issueOrPullRequest?: $<{ $args: RepositoryIssueOrPullRequestArgs } & IssueOrPullRequestPossibleTypes & $Options>
  /** Returns a list of issue templates associated to the repository */
  issueTemplates?: $<IssueTemplateFields & $Options>
  /** A list of issues that have been opened in the repository. */
  issues?: $<IssueConnectionFields & { $args?: RepositoryIssuesArgs } & $Options>
  /** Returns a single label by name */
  label?: $<LabelFields & { $args: RepositoryLabelArgs } & $Options>
  /** A list of labels associated with the repository. */
  labels?: $<LabelConnectionFields & { $args?: RepositoryLabelsArgs } & $Options>
  /** A list containing a breakdown of the language composition of the repository. */
  languages?: $<LanguageConnectionFields & { $args?: RepositoryLanguagesArgs } & $Options>
  /** Get the latest release for the repository if one exists. */
  latestRelease?: $<ReleaseFields & $Options>
  /** The license associated with the repository */
  licenseInfo?: $<LicenseFields & $Options>
  /** The reason the repository has been locked. */
  lockReason?: $Pick
  /** A list of Users that can be mentioned in the context of the repository. */
  mentionableUsers?: $<UserConnectionFields & { $args?: RepositoryMentionableUsersArgs } & $Options>
  /** Whether or not PRs are merged with a merge commit on this repository. */
  mergeCommitAllowed?: $Pick
  /** How the default commit message will be generated when merging a pull request. */
  mergeCommitMessage?: $Pick
  /** How the default commit title will be generated when merging a pull request. */
  mergeCommitTitle?: $Pick
  /** The merge queue for a specified branch, otherwise the default branch if not provided. */
  mergeQueue?: $<MergeQueueFields & { $args?: RepositoryMergeQueueArgs } & $Options>
  /** Returns a single milestone from the current repository by number. */
  milestone?: $<MilestoneFields & { $args: RepositoryMilestoneArgs } & $Options>
  /** A list of milestones associated with the repository. */
  milestones?: $<MilestoneConnectionFields & { $args?: RepositoryMilestonesArgs } & $Options>
  /** The repository's original mirror URL. */
  mirrorUrl?: $Pick
  /** The name of the repository. */
  name?: $Pick
  /** The repository's name with owner. */
  nameWithOwner?: $Pick
  /** A Git object in the repository */
  object?: $<GitObjectFields & { $args?: RepositoryObjectArgs } & GitObjectPossibleTypes & $Options>
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl?: $Pick
  /** The User owner of the repository. */
  owner?: $<RepositoryOwnerFields & RepositoryOwnerPossibleTypes & $Options>
  /** A list of packages under the owner. */
  packages?: $<PackageConnectionFields & { $args?: RepositoryPackagesArgs } & $Options>
  /** The repository parent, if this is a fork. */
  parent?: $<RepositoryFields & $Options>
  /** A list of discussions that have been pinned in this repository. */
  pinnedDiscussions?: $<PinnedDiscussionConnectionFields & { $args?: RepositoryPinnedDiscussionsArgs } & $Options>
  /** A list of pinned environments for this repository. */
  pinnedEnvironments?: $<PinnedEnvironmentConnectionFields & { $args?: RepositoryPinnedEnvironmentsArgs } & $Options>
  /** A list of pinned issues for this repository. */
  pinnedIssues?: $<PinnedIssueConnectionFields & { $args?: RepositoryPinnedIssuesArgs } & $Options>
  /** Returns information about the availability of certain features and limits based on the repository's billing plan. */
  planFeatures?: $<RepositoryPlanFeaturesFields & $Options>
  /** The primary language of the repository's code. */
  primaryLanguage?: $<LanguageFields & $Options>
  /** Find project by number. */
  project?: $<ProjectFields & { $args: RepositoryProjectArgs } & $Options>
  /** Finds and returns the Project according to the provided Project number. */
  projectV2?: $<ProjectV2Fields & { $args: RepositoryProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projects?: $<ProjectConnectionFields & { $args?: RepositoryProjectsArgs } & $Options>
  /** The HTTP path listing the repository's projects */
  projectsResourcePath?: $Pick
  /** The HTTP URL listing the repository's projects */
  projectsUrl?: $Pick
  /** List of projects linked to this repository. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: RepositoryProjectsV2Args } & $Options>
  /** Returns a single pull request from the current repository by number. */
  pullRequest?: $<PullRequestFields & { $args: RepositoryPullRequestArgs } & $Options>
  /** Returns a list of pull request templates associated to the repository */
  pullRequestTemplates?: $<PullRequestTemplateFields & $Options>
  /** A list of pull requests that have been opened in the repository. */
  pullRequests?: $<PullRequestConnectionFields & { $args?: RepositoryPullRequestsArgs } & $Options>
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: $Pick
  /** Whether or not rebase-merging is enabled on this repository. */
  rebaseMergeAllowed?: $Pick
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: $<ProjectV2ConnectionFields & { $args?: RepositoryRecentProjectsArgs } & $Options>
  /** Fetch a given ref from the repository */
  ref?: $<RefFields & { $args: RepositoryRefArgs } & $Options>
  /** Fetch a list of refs from the repository */
  refs?: $<RefConnectionFields & { $args: RepositoryRefsArgs } & $Options>
  /** Lookup a single release given various criteria. */
  release?: $<ReleaseFields & { $args: RepositoryReleaseArgs } & $Options>
  /** List of releases which are dependent on this repository. */
  releases?: $<ReleaseConnectionFields & { $args?: RepositoryReleasesArgs } & $Options>
  /** A list of applied repository-topic associations for this repository. */
  repositoryTopics?: $<RepositoryTopicConnectionFields & { $args?: RepositoryRepositoryTopicsArgs } & $Options>
  /** The HTTP path for this repository */
  resourcePath?: $Pick
  /** Returns a single ruleset from the current repository by ID. */
  ruleset?: $<RepositoryRulesetFields & { $args: RepositoryRulesetArgs } & $Options>
  /** A list of rulesets for this repository. */
  rulesets?: $<RepositoryRulesetConnectionFields & { $args?: RepositoryRulesetsArgs } & $Options>
  /** The security policy URL. */
  securityPolicyUrl?: $Pick
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML?: $Scalar | $<$Options & { $args?: RepositoryShortDescriptionHTMLArgs }>
  /** Whether or not squash-merging is enabled on this repository. */
  squashMergeAllowed?: $Pick
  /** How the default commit message will be generated when squash merging a pull request. */
  squashMergeCommitMessage?: $Pick
  /** How the default commit title will be generated when squash merging a pull request. */
  squashMergeCommitTitle?: $Pick
  /** Whether a squash merge commit can use the pull request title as default.
   *
   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC. */
  squashPrTitleUsedAsDefault?: $Pick
  /** The SSH URL to clone this repository */
  sshUrl?: $Pick
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount?: $Pick
  /** A list of users who have starred this starrable. */
  stargazers?: $<StargazerConnectionFields & { $args?: RepositoryStargazersArgs } & $Options>
  /** Returns a list of all submodules in this repository parsed from the
   * .gitmodules file as of the default branch's HEAD commit. */
  submodules?: $<SubmoduleConnectionFields & { $args?: RepositorySubmodulesArgs } & $Options>
  /** Temporary authentication token for cloning this repository. */
  tempCloneToken?: $Pick
  /** The repository from which this repository was generated, if any. */
  templateRepository?: $<RepositoryFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this repository */
  url?: $Pick
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage?: $Pick
  /** Indicates whether the viewer has admin permissions on this repository. */
  viewerCanAdminister?: $Pick
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Indicates whether the viewer can update the topics of this repository. */
  viewerCanUpdateTopics?: $Pick
  /** The last commit email for the viewer. */
  viewerDefaultCommitEmail?: $Pick
  /** The last used merge method by the viewer or the default for the repository. */
  viewerDefaultMergeMethod?: $Pick
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: $Pick
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  viewerPermission?: $Pick
  /** A list of emails this viewer can commit with. */
  viewerPossibleCommitEmails?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
  /** Indicates the repository's visibility level. */
  visibility?: $Pick
  /** Returns a single vulnerability alert from the current repository by number. */
  vulnerabilityAlert?: $<RepositoryVulnerabilityAlertFields & { $args: RepositoryVulnerabilityAlertArgs } & $Options>
  /** A list of vulnerability alerts that are on this repository. */
  vulnerabilityAlerts?: $<RepositoryVulnerabilityAlertConnectionFields & { $args?: RepositoryVulnerabilityAlertsArgs } & $Options>
  /** A list of users watching the repository. */
  watchers?: $<UserConnectionFields & { $args?: RepositoryWatchersArgs } & $Options>
  /** Whether contributors are required to sign off on web-based commits in this repository. */
  webCommitSignoffRequired?: $Pick
}
export interface RepositoryIdConditionTargetFields {
  __typename?: $Pick
  /** One of these repo IDs must match the repo. */
  repositoryIds?: $Pick
}
export interface RepositoryInfoFields {
  __typename?: $Pick
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The description of the repository. */
  description?: $Pick
  /** The description of the repository rendered to HTML. */
  descriptionHTML?: $Pick
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount?: $Pick
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled?: $Pick
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled?: $Pick
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled?: $Pick
  /** Indicates if the repository displays a Sponsor button for financial contributions. */
  hasSponsorshipsEnabled?: $Pick
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled?: $Pick
  /** The repository's URL. */
  homepageUrl?: $Pick
  /** Indicates if the repository is unmaintained. */
  isArchived?: $Pick
  /** Identifies if the repository is a fork. */
  isFork?: $Pick
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization?: $Pick
  /** Indicates if the repository has been locked or not. */
  isLocked?: $Pick
  /** Identifies if the repository is a mirror. */
  isMirror?: $Pick
  /** Identifies if the repository is private or internal. */
  isPrivate?: $Pick
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate?: $Pick
  /** The license associated with the repository */
  licenseInfo?: $<LicenseFields & $Options>
  /** The reason the repository has been locked. */
  lockReason?: $Pick
  /** The repository's original mirror URL. */
  mirrorUrl?: $Pick
  /** The name of the repository. */
  name?: $Pick
  /** The repository's name with owner. */
  nameWithOwner?: $Pick
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl?: $Pick
  /** The User owner of the repository. */
  owner?: $<RepositoryOwnerFields & RepositoryOwnerPossibleTypes & $Options>
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: $Pick
  /** The HTTP path for this repository */
  resourcePath?: $Pick
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML?: $Scalar | $<$Options & { $args?: RepositoryInfoShortDescriptionHTMLArgs }>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this repository */
  url?: $Pick
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage?: $Pick
  /** Indicates the repository's visibility level. */
  visibility?: $Pick
}
export interface RepositoryInteractionAbilityFields {
  __typename?: $Pick
  /** The time the currently active limit expires. */
  expiresAt?: $Pick
  /** The current limit that is enabled on this object. */
  limit?: $Pick
  /** The origin of the currently active interaction limit. */
  origin?: $Pick
}
export interface RepositoryInvitationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryInvitationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryInvitationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryInvitationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryInvitationFields & $Options>
}
export interface RepositoryInvitationFields {
  __typename?: $Pick
  /** The email address that received the invitation. */
  email?: $Pick
  /** The Node ID of the RepositoryInvitation object */
  id?: $Pick
  /** The user who received the invitation. */
  invitee?: $<UserFields & $Options>
  /** The user who created the invitation. */
  inviter?: $<UserFields & $Options>
  /** The permalink for this repository invitation. */
  permalink?: $Pick
  /** The permission granted on this repository by this invitation. */
  permission?: $Pick
  /** The Repository the user is invited to. */
  repository?: $<RepositoryInfoFields & RepositoryInfoPossibleTypes & $Options>
}
export interface RepositoryMigrationConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryMigrationEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryMigrationFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryMigrationEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryMigrationFields & $Options>
}
export interface RepositoryMigrationFields {
  __typename?: $Pick
  /** The migration flag to continue on error. */
  continueOnError?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The reason the migration failed. */
  failureReason?: $Pick
  /** The Node ID of the RepositoryMigration object */
  id?: $Pick
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: $Pick
  /** The migration source. */
  migrationSource?: $<MigrationSourceFields & $Options>
  /** The target repository name. */
  repositoryName?: $Pick
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl?: $Pick
  /** The migration state. */
  state?: $Pick
  /** The number of warnings encountered for this migration. To review the warnings,
   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount?: $Pick
}
export interface RepositoryNameConditionTargetFields {
  __typename?: $Pick
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude?: $Pick
  /** Array of repository names or patterns to include. One of these patterns must
   * match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include?: $Pick
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: $Pick
}
export interface RepositoryNodeFields {
  __typename?: $Pick
  /** The repository associated with this node. */
  repository?: $<RepositoryFields & $Options>
}
export interface RepositoryOwnerFields {
  __typename?: $Pick
  /** A URL pointing to the owner's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: RepositoryOwnerAvatarUrlArgs }>
  /** The Node ID of the RepositoryOwner object */
  id?: $Pick
  /** The username used to login. */
  login?: $Pick
  /** A list of repositories that the user owns. */
  repositories?: $<RepositoryConnectionFields & { $args?: RepositoryOwnerRepositoriesArgs } & $Options>
  /** Find Repository. */
  repository?: $<RepositoryFields & { $args: RepositoryOwnerRepositoryArgs } & $Options>
  /** The HTTP URL for the owner. */
  resourcePath?: $Pick
  /** The HTTP URL for the owner. */
  url?: $Pick
}
export interface RepositoryPlanFeaturesFields {
  __typename?: $Pick
  /** Whether reviews can be automatically requested and enforced with a CODEOWNERS file */
  codeowners?: $Pick
  /** Whether pull requests can be created as or converted to draft */
  draftPullRequests?: $Pick
  /** Maximum number of users that can be assigned to an issue or pull request */
  maximumAssignees?: $Pick
  /** Maximum number of manually-requested reviews on a pull request */
  maximumManualReviewRequests?: $Pick
  /** Whether teams can be requested to review pull requests */
  teamReviewRequests?: $Pick
}
export interface RepositoryPropertyConditionTargetFields {
  __typename?: $Pick
  /** Array of repository properties that must not match. */
  exclude?: $<PropertyTargetDefinitionFields & $Options>
  /** Array of repository properties that must match */
  include?: $<PropertyTargetDefinitionFields & $Options>
}
export interface RepositoryRuleConditionsFields {
  __typename?: $Pick
  /** Configuration for the ref_name condition */
  refName?: $<RefNameConditionTargetFields & $Options>
  /** Configuration for the repository_id condition */
  repositoryId?: $<RepositoryIdConditionTargetFields & $Options>
  /** Configuration for the repository_name condition */
  repositoryName?: $<RepositoryNameConditionTargetFields & $Options>
  /** Configuration for the repository_property condition */
  repositoryProperty?: $<RepositoryPropertyConditionTargetFields & $Options>
}
export interface RepositoryRuleConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryRuleEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryRuleFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryRuleEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryRuleFields & $Options>
}
export interface RepositoryRuleFields {
  __typename?: $Pick
  /** The Node ID of the RepositoryRule object */
  id?: $Pick
  /** The parameters for this rule. */
  parameters?: $<RuleParametersPossibleTypes & $Options>
  /** The repository ruleset associated with this rule configuration */
  repositoryRuleset?: $<RepositoryRulesetFields & $Options>
  /** The type of rule. */
  type?: $Pick
}
export interface RepositoryRulesetBypassActorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryRulesetBypassActorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryRulesetBypassActorFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryRulesetBypassActorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryRulesetBypassActorFields & $Options>
}
export interface RepositoryRulesetBypassActorFields {
  __typename?: $Pick
  /** The actor that can bypass rules. */
  actor?: $<BypassActorPossibleTypes & $Options>
  /** The mode for the bypass actor */
  bypassMode?: $Pick
  /** This actor represents the ability for a deploy key to bypass */
  deployKey?: $Pick
  /** This actor represents the ability for an enterprise owner to bypass */
  enterpriseOwner?: $Pick
  /** The Node ID of the RepositoryRulesetBypassActor object */
  id?: $Pick
  /** This actor represents the ability for an organization owner to bypass */
  organizationAdmin?: $Pick
  /** If the actor is a repository role, the repository role's ID that can bypass */
  repositoryRoleDatabaseId?: $Pick
  /** If the actor is a repository role, the repository role's name that can bypass */
  repositoryRoleName?: $Pick
  /** Identifies the ruleset associated with the allowed actor */
  repositoryRuleset?: $<RepositoryRulesetFields & $Options>
}
export interface RepositoryRulesetConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryRulesetEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryRulesetFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryRulesetEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryRulesetFields & $Options>
}
export interface RepositoryRulesetFields {
  __typename?: $Pick
  /** The actors that can bypass this ruleset */
  bypassActors?: $<RepositoryRulesetBypassActorConnectionFields & { $args?: RepositoryRulesetBypassActorsArgs } & $Options>
  /** The set of conditions that must evaluate to true for this ruleset to apply */
  conditions?: $<RepositoryRuleConditionsFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The enforcement level of this ruleset */
  enforcement?: $Pick
  /** The Node ID of the RepositoryRuleset object */
  id?: $Pick
  /** Name of the ruleset. */
  name?: $Pick
  /** List of rules. */
  rules?: $<RepositoryRuleConnectionFields & { $args?: RepositoryRulesetRulesArgs } & $Options>
  /** Source of ruleset. */
  source?: $<RuleSourcePossibleTypes & $Options>
  /** Target of the ruleset. */
  target?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface RepositoryTopicConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryTopicEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryTopicFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryTopicEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryTopicFields & $Options>
}
export interface RepositoryTopicFields {
  __typename?: $Pick
  /** The Node ID of the RepositoryTopic object */
  id?: $Pick
  /** The HTTP path for this repository-topic. */
  resourcePath?: $Pick
  /** The topic. */
  topic?: $<TopicFields & $Options>
  /** The HTTP URL for this repository-topic. */
  url?: $Pick
}
export interface RepositoryVisibilityChangeDisableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepositoryVisibilityChangeEnableAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: $Pick
  /** The slug of the enterprise. */
  enterpriseSlug?: $Pick
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: $Pick
  /** The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object */
  id?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface RepositoryVulnerabilityAlertConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RepositoryVulnerabilityAlertEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryVulnerabilityAlertFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RepositoryVulnerabilityAlertEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RepositoryVulnerabilityAlertFields & $Options>
}
export interface RepositoryVulnerabilityAlertFields {
  __typename?: $Pick
  /** When was the alert auto-dismissed? */
  autoDismissedAt?: $Pick
  /** When was the alert created? */
  createdAt?: $Pick
  /** The associated Dependabot update */
  dependabotUpdate?: $<DependabotUpdateFields & $Options>
  /** The scope of an alert's dependency */
  dependencyScope?: $Pick
  /** Comment explaining the reason the alert was dismissed */
  dismissComment?: $Pick
  /** The reason the alert was dismissed */
  dismissReason?: $Pick
  /** When was the alert dismissed? */
  dismissedAt?: $Pick
  /** The user who dismissed the alert */
  dismisser?: $<UserFields & $Options>
  /** When was the alert fixed? */
  fixedAt?: $Pick
  /** The Node ID of the RepositoryVulnerabilityAlert object */
  id?: $Pick
  /** Identifies the alert number. */
  number?: $Pick
  /** The associated repository */
  repository?: $<RepositoryFields & $Options>
  /** The associated security advisory */
  securityAdvisory?: $<SecurityAdvisoryFields & $Options>
  /** The associated security vulnerability */
  securityVulnerability?: $<SecurityVulnerabilityFields & $Options>
  /** Identifies the state of the alert. */
  state?: $Pick
  /** The vulnerable manifest filename */
  vulnerableManifestFilename?: $Pick
  /** The vulnerable manifest path */
  vulnerableManifestPath?: $Pick
  /** The vulnerable requirements */
  vulnerableRequirements?: $Pick
}
export interface ReprioritizeSubIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The parent issue that the sub-issue was reprioritized in. */
  issue?: $<IssueFields & $Options>
}
export interface RequestedReviewerConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<RequestedReviewerEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RequestedReviewerPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface RequestedReviewerEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<RequestedReviewerPossibleTypes & $Options>
}
export interface RequestReviewsPayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that is getting requests. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge?: $<UserEdgeFields & $Options>
}
export interface RequirableByPullRequestFields {
  __typename?: $Pick
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?: $Scalar | $<$Options & { $args?: RequirableByPullRequestIsRequiredArgs }>
}
export interface RequiredDeploymentsParametersFields {
  __typename?: $Pick
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments?: $Pick
}
export interface RequiredStatusCheckDescriptionFields {
  __typename?: $Pick
  /** The App that must provide this status in order for it to be accepted. */
  app?: $<AppFields & $Options>
  /** The name of this status. */
  context?: $Pick
}
export interface RequiredStatusChecksParametersFields {
  __typename?: $Pick
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate?: $Pick
  /** Status checks that are required. */
  requiredStatusChecks?: $<StatusCheckConfigurationFields & $Options>
  /** Whether pull requests targeting a matching branch must be tested with the
   * latest code. This setting will not take effect unless at least one status
   * check is enabled. */
  strictRequiredStatusChecksPolicy?: $Pick
}
export interface RerequestCheckSuitePayloadFields {
  __typename?: $Pick
  /** The requested check suite. */
  checkSuite?: $<CheckSuiteFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface ResolveReviewThreadPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The thread to resolve. */
  thread?: $<PullRequestReviewThreadFields & $Options>
}
export interface RestrictedContributionFields {
  __typename?: $Pick
  /** Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access. */
  isRestricted?: $Pick
  /** When this contribution was made. */
  occurredAt?: $Pick
  /** The HTTP path for this contribution. */
  resourcePath?: $Pick
  /** The HTTP URL for this contribution. */
  url?: $Pick
  /** The user who made this contribution. */
  user?: $<UserFields & $Options>
}
export interface RetireSponsorsTierPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The tier that was retired. */
  sponsorsTier?: $<SponsorsTierFields & $Options>
}
export interface RevertPullRequestPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The pull request that was reverted. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The new pull request that reverts the input pull request. */
  revertPullRequest?: $<PullRequestFields & $Options>
}
export interface ReviewDismissalAllowanceConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReviewDismissalAllowanceEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReviewDismissalAllowanceFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReviewDismissalAllowanceEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ReviewDismissalAllowanceFields & $Options>
}
export interface ReviewDismissalAllowanceFields {
  __typename?: $Pick
  /** The actor that can dismiss. */
  actor?: $<ReviewDismissalAllowanceActorPossibleTypes & $Options>
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** The Node ID of the ReviewDismissalAllowance object */
  id?: $Pick
}
export interface ReviewDismissedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  dismissalMessage?: $Pick
  /** Identifies the optional message associated with the event, rendered to HTML. */
  dismissalMessageHTML?: $Pick
  /** The Node ID of the ReviewDismissedEvent object */
  id?: $Pick
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  previousReviewState?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the commit which caused the review to become stale. */
  pullRequestCommit?: $<PullRequestCommitFields & $Options>
  /** The HTTP path for this review dismissed event. */
  resourcePath?: $Pick
  /** Identifies the review associated with the 'review_dismissed' event. */
  review?: $<PullRequestReviewFields & $Options>
  /** The HTTP URL for this review dismissed event. */
  url?: $Pick
}
export interface ReviewRequestConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<ReviewRequestEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<ReviewRequestFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface ReviewRequestedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ReviewRequestedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer?: $<RequestedReviewerPossibleTypes & $Options>
}
export interface ReviewRequestEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<ReviewRequestFields & $Options>
}
export interface ReviewRequestFields {
  __typename?: $Pick
  /** Whether this request was created for a code owner */
  asCodeOwner?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the ReviewRequest object */
  id?: $Pick
  /** Identifies the pull request associated with this review request. */
  pullRequest?: $<PullRequestFields & $Options>
  /** The reviewer that is requested. */
  requestedReviewer?: $<RequestedReviewerPossibleTypes & $Options>
}
export interface ReviewRequestRemovedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the ReviewRequestRemovedEvent object */
  id?: $Pick
  /** PullRequest referenced by event. */
  pullRequest?: $<PullRequestFields & $Options>
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer?: $<RequestedReviewerPossibleTypes & $Options>
}
export interface ReviewStatusHovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
  /** The current status of the pull request with respect to code review. */
  reviewDecision?: $Pick
}
export interface RevokeEnterpriseOrganizationsMigratorRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organizations that had the migrator role revoked for the given user. */
  organizations?: $<OrganizationConnectionFields & { $args?: RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs } & $Options>
}
export interface RevokeMigratorRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Did the operation succeed? */
  success?: $Pick
}
export interface SavedReplyConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SavedReplyEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SavedReplyFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SavedReplyEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SavedReplyFields & $Options>
}
export interface SavedReplyFields {
  __typename?: $Pick
  /** The body of the saved reply. */
  body?: $Pick
  /** The saved reply body rendered to HTML. */
  bodyHTML?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the SavedReply object */
  id?: $Pick
  /** The title of the saved reply. */
  title?: $Pick
  /** The user that saved this reply. */
  user?: $<ActorFields & ActorPossibleTypes & $Options>
}
export interface SearchResultItemConnectionFields {
  __typename?: $Pick
  /** The total number of pieces of code that matched the search query. Regardless
   * of the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  codeCount?: $Pick
  /** The total number of discussions that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  discussionCount?: $Pick
  /** A list of edges. */
  edges?: $<SearchResultItemEdgeFields & $Options>
  /** The total number of issues that matched the search query. Regardless of the
   * total number of matches, a maximum of 1,000 results will be available across all types. */
  issueCount?: $Pick
  /** A list of nodes. */
  nodes?: $<SearchResultItemPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** The total number of repositories that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  repositoryCount?: $Pick
  /** The total number of users that matched the search query. Regardless of the
   * total number of matches, a maximum of 1,000 results will be available across all types. */
  userCount?: $Pick
  /** The total number of wiki pages that matched the search query. Regardless of
   * the total number of matches, a maximum of 1,000 results will be available
   * across all types. */
  wikiCount?: $Pick
}
export interface SearchResultItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SearchResultItemPossibleTypes & $Options>
  /** Text matches on the result found. */
  textMatches?: $<TextMatchFields & $Options>
}
export interface SecurityAdvisoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SecurityAdvisoryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SecurityAdvisoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SecurityAdvisoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SecurityAdvisoryFields & $Options>
}
export interface SecurityAdvisoryFields {
  __typename?: $Pick
  /** The classification of the advisory */
  classification?: $Pick
  /** The CVSS associated with this advisory
   *
   * @deprecated `cvss` will be removed. New `cvss_severities` field will now contain both `cvss_v3` and `cvss_v4` properties. Removal on 2025-10-01 UTC. */
  cvss?: $<CVSSFields & $Options>
  /** The CVSS associated with this advisory */
  cvssSeverities?: $<CvssSeveritiesFields & $Options>
  /** CWEs associated with this Advisory */
  cwes?: $<CWEConnectionFields & { $args?: SecurityAdvisoryCwesArgs } & $Options>
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** This is a long plaintext description of the advisory */
  description?: $Pick
  /** The Exploit Prediction Scoring System */
  epss?: $<EPSSFields & $Options>
  /** The GitHub Security Advisory ID */
  ghsaId?: $Pick
  /** The Node ID of the SecurityAdvisory object */
  id?: $Pick
  /** A list of identifiers for this advisory */
  identifiers?: $<SecurityAdvisoryIdentifierFields & $Options>
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink?: $Pick
  /** The organization that originated the advisory */
  origin?: $Pick
  /** The permalink for the advisory */
  permalink?: $Pick
  /** When the advisory was published */
  publishedAt?: $Pick
  /** A list of references for this advisory */
  references?: $<SecurityAdvisoryReferenceFields & $Options>
  /** The severity of the advisory */
  severity?: $Pick
  /** A short plaintext summary of the advisory */
  summary?: $Pick
  /** When the advisory was last updated */
  updatedAt?: $Pick
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities?: $<SecurityVulnerabilityConnectionFields & { $args?: SecurityAdvisoryVulnerabilitiesArgs } & $Options>
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt?: $Pick
}
export interface SecurityAdvisoryIdentifierFields {
  __typename?: $Pick
  /** The identifier type, e.g. GHSA, CVE */
  type?: $Pick
  /** The identifier */
  value?: $Pick
}
export interface SecurityAdvisoryPackageFields {
  __typename?: $Pick
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem?: $Pick
  /** The package name */
  name?: $Pick
}
export interface SecurityAdvisoryPackageVersionFields {
  __typename?: $Pick
  /** The package name or version */
  identifier?: $Pick
}
export interface SecurityAdvisoryReferenceFields {
  __typename?: $Pick
  /** A publicly accessible reference */
  url?: $Pick
}
export interface SecurityVulnerabilityConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SecurityVulnerabilityEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SecurityVulnerabilityFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SecurityVulnerabilityEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SecurityVulnerabilityFields & $Options>
}
export interface SecurityVulnerabilityFields {
  __typename?: $Pick
  /** The Advisory associated with this Vulnerability */
  advisory?: $<SecurityAdvisoryFields & $Options>
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion?: $<SecurityAdvisoryPackageVersionFields & $Options>
  /** A description of the vulnerable package */
  package?: $<SecurityAdvisoryPackageFields & $Options>
  /** The severity of the vulnerability within this package */
  severity?: $Pick
  /** When the vulnerability was last updated */
  updatedAt?: $Pick
  /** A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
  vulnerableVersionRange?: $Pick
}
export interface SetEnterpriseIdentityProviderPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The identity provider for the enterprise. */
  identityProvider?: $<EnterpriseIdentityProviderFields & $Options>
}
export interface SetOrganizationInteractionLimitPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organization that the interaction limit was set for. */
  organization?: $<OrganizationFields & $Options>
}
export interface SetRepositoryInteractionLimitPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository that the interaction limit was set for. */
  repository?: $<RepositoryFields & $Options>
}
export interface SetUserInteractionLimitPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The user that the interaction limit was set for. */
  user?: $<UserFields & $Options>
}
export interface SmimeSignatureFields {
  __typename?: $Pick
  /** Email used to sign this object. */
  email?: $Pick
  /** True if the signature is valid and verified by GitHub. */
  isValid?: $Pick
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: $Pick
  /** ASCII-armored signature header from object. */
  signature?: $Pick
  /** GitHub user corresponding to the email signing this commit. */
  signer?: $<UserFields & $Options>
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state?: $Pick
  /** The date the signature was verified, if valid */
  verifiedAt?: $Pick
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: $Pick
}
export interface SocialAccountConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SocialAccountEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SocialAccountFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SocialAccountEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SocialAccountFields & $Options>
}
export interface SocialAccountFields {
  __typename?: $Pick
  /** Name of the social media account as it appears on the profile. */
  displayName?: $Pick
  /** Software or company that hosts the social media account. */
  provider?: $Pick
  /** URL of the social media account. */
  url?: $Pick
}
export interface SponsorableFields {
  __typename?: $Pick
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: $Pick
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: $Pick
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: $<$Options & { $args: SponsorableIsSponsoredByArgs }>
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: $Pick
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues?: $<SponsorAndLifetimeValueConnectionFields & { $args?: SponsorableLifetimeReceivedSponsorshipValuesArgs } & $Options>
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: $Pick
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: $<SponsorConnectionFields & { $args?: SponsorableSponsoringArgs } & $Options>
  /** List of sponsors for this user or organization. */
  sponsors?: $<SponsorConnectionFields & { $args?: SponsorableSponsorsArgs } & $Options>
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: $<SponsorsActivityConnectionFields & { $args?: SponsorableSponsorsActivitiesArgs } & $Options>
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: $<SponsorshipFields & { $args?: SponsorableSponsorshipForViewerAsSponsorArgs } & $Options>
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: $<SponsorshipFields & { $args?: SponsorableSponsorshipForViewerAsSponsorableArgs } & $Options>
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: $<SponsorshipNewsletterConnectionFields & { $args?: SponsorableSponsorshipNewslettersArgs } & $Options>
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: $<SponsorshipConnectionFields & { $args?: SponsorableSponsorshipsAsMaintainerArgs } & $Options>
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: $<SponsorshipConnectionFields & { $args?: SponsorableSponsorshipsAsSponsorArgs } & $Options>
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: $Scalar | $<$Options & { $args?: SponsorableTotalSponsorshipAmountAsSponsorInCentsArgs }>
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: $Pick
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: $Pick
}
export interface SponsorableItemConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorableItemEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorableItemPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorableItemEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorableItemPossibleTypes & $Options>
}
export interface SponsorAndLifetimeValueConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorAndLifetimeValueEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorAndLifetimeValueFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorAndLifetimeValueEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorAndLifetimeValueFields & $Options>
}
export interface SponsorAndLifetimeValueFields {
  __typename?: $Pick
  /** The amount in cents. */
  amountInCents?: $Pick
  /** The amount in USD, formatted as a string. */
  formattedAmount?: $Pick
  /** The sponsor's GitHub account. */
  sponsor?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
  /** The maintainer's GitHub account. */
  sponsorable?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
}
export interface SponsorConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorPossibleTypes & $Options>
}
export interface SponsorsActivityConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorsActivityEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorsActivityFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorsActivityEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorsActivityFields & $Options>
}
export interface SponsorsActivityFields {
  __typename?: $Pick
  /** What action this activity indicates took place. */
  action?: $Pick
  /** The sponsor's current privacy level. */
  currentPrivacyLevel?: $Pick
  /** The Node ID of the SponsorsActivity object */
  id?: $Pick
  /** The platform that was used to pay for the sponsorship. */
  paymentSource?: $Pick
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier?: $<SponsorsTierFields & $Options>
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor?: $<SponsorPossibleTypes & $Options>
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
  /** The associated sponsorship tier. */
  sponsorsTier?: $<SponsorsTierFields & $Options>
  /** The timestamp of this event. */
  timestamp?: $Pick
  /** Was this sponsorship made alongside other sponsorships at the same time from the same sponsor? */
  viaBulkSponsorship?: $Pick
}
export interface SponsorsGoalFields {
  __typename?: $Pick
  /** A description of the goal from the maintainer. */
  description?: $Pick
  /** What the objective of this goal is. */
  kind?: $Pick
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete?: $Pick
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship
   * amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue?: $Pick
  /** A brief summary of the kind and target value of this goal. */
  title?: $Pick
}
export interface SponsorshipConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorshipEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorshipFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
  /** The total amount in cents of all recurring sponsorships in the connection
   * whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents?: $Pick
  /** The total amount in USD of all recurring sponsorships in the connection whose
   * amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars?: $Pick
}
export interface SponsorshipEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorshipFields & $Options>
}
export interface SponsorshipFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the Sponsorship object */
  id?: $Pick
  /** Whether the sponsorship is active. False implies the sponsor is a past sponsor
   * of the maintainer, while true implies they are a current sponsor. */
  isActive?: $Pick
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment?: $Pick
  /** Whether the sponsor has chosen to receive sponsorship update emails sent from
   * the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail?: $Pick
  /** The entity that is being sponsored
   *
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC. */
  maintainer?: $<UserFields & $Options>
  /** The platform that was most recently used to pay for the sponsorship. */
  paymentSource?: $Pick
  /** The privacy level for this sponsorship. */
  privacyLevel?: $Pick
  /** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   *
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC. */
  sponsor?: $<UserFields & $Options>
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity?: $<SponsorPossibleTypes & $Options>
  /** The entity that is being sponsored */
  sponsorable?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
  /** The associated sponsorship tier */
  tier?: $<SponsorsTierFields & $Options>
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt?: $Pick
}
export interface SponsorshipNewsletterConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorshipNewsletterEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorshipNewsletterFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorshipNewsletterEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorshipNewsletterFields & $Options>
}
export interface SponsorshipNewsletterFields {
  __typename?: $Pick
  /** The author of the newsletter. */
  author?: $<UserFields & $Options>
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the SponsorshipNewsletter object */
  id?: $Pick
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished?: $Pick
  /** The user or organization this newsletter is from. */
  sponsorable?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
  /** The subject of the newsletter, what it's about. */
  subject?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface SponsorsListingFeaturedItemFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Will either be a description from the sponsorable maintainer about why they
   * featured this item, or the item's description itself, such as a user's bio
   * from their GitHub profile page. */
  description?: $Pick
  /** The record that is featured on the GitHub Sponsors profile. */
  featureable?: $<SponsorsListingFeatureableItemPossibleTypes & $Options>
  /** The Node ID of the SponsorsListingFeaturedItem object */
  id?: $Pick
  /** The position of this featured item on the GitHub Sponsors profile with a lower
   * position indicating higher precedence. Starts at 1. */
  position?: $Pick
  /** The GitHub Sponsors profile that features this record. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface SponsorsListingFields {
  __typename?: $Pick
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal?: $<SponsorsGoalFields & $Options>
  /** The Stripe Connect account currently in use for payouts for this Sponsors
   * listing, if any. Will only return a value when queried by the maintainer
   * themselves, or by an admin of the sponsorable organization. */
  activeStripeConnectAccount?: $<StripeConnectAccountFields & $Options>
  /** The name of the country or region with the maintainer's bank account or fiscal
   * host. Will only return a value when queried by the maintainer themselves, or
   * by an admin of the sponsorable organization. */
  billingCountryOrRegion?: $Pick
  /** The email address used by GitHub to contact the sponsorable about their GitHub
   * Sponsors profile. Will only return a value when queried by the maintainer
   * themselves, or by an admin of the sponsorable organization. */
  contactEmailAddress?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
  dashboardResourcePath?: $Pick
  /** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
  dashboardUrl?: $Pick
  /** The records featured on the GitHub Sponsors profile. */
  featuredItems?: $<SponsorsListingFeaturedItemFields & { $args?: SponsorsListingFeaturedItemsArgs } & $Options>
  /** The fiscal host used for payments, if any. Will only return a value when
   * queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  fiscalHost?: $<OrganizationFields & $Options>
  /** The full description of the listing. */
  fullDescription?: $Pick
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML?: $Pick
  /** The Node ID of the SponsorsListing object */
  id?: $Pick
  /** Whether this listing is publicly visible. */
  isPublic?: $Pick
  /** The listing's full name. */
  name?: $Pick
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate?: $Pick
  /** The name of the country or region where the maintainer resides. Will only
   * return a value when queried by the maintainer themselves, or by an admin of
   * the sponsorable organization. */
  residenceCountryOrRegion?: $Pick
  /** The HTTP path for this Sponsors listing. */
  resourcePath?: $Pick
  /** The short description of the listing. */
  shortDescription?: $Pick
  /** The short name of the listing. */
  slug?: $Pick
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable?: $<SponsorableFields & SponsorablePossibleTypes & $Options>
  /** The tiers for this GitHub Sponsors profile. */
  tiers?: $<SponsorsTierConnectionFields & { $args?: SponsorsListingTiersArgs } & $Options>
  /** The HTTP URL for this Sponsors listing. */
  url?: $Pick
}
export interface SponsorsTierAdminInfoFields {
  __typename?: $Pick
  /** Indicates whether this tier is still a work in progress by the sponsorable and
   * not yet published to the associated GitHub Sponsors profile. Draft tiers
   * cannot be used for new sponsorships and will not be in use on existing
   * sponsorships. Draft tiers cannot be seen by anyone but the admins of the
   * GitHub Sponsors profile. */
  isDraft?: $Pick
  /** Indicates whether this tier is published to the associated GitHub Sponsors
   * profile. Published tiers are visible to anyone who can see the GitHub Sponsors
   * profile, and are available for use in sponsorships if the GitHub Sponsors
   * profile is publicly visible. */
  isPublished?: $Pick
  /** Indicates whether this tier has been retired from the associated GitHub
   * Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
   * profile and cannot be chosen for new sponsorships. Existing sponsorships may
   * still use retired tiers if the sponsor selected the tier before it was retired. */
  isRetired?: $Pick
  /** The sponsorships using this tier. */
  sponsorships?: $<SponsorshipConnectionFields & { $args?: SponsorsTierAdminInfoSponsorshipsArgs } & $Options>
}
export interface SponsorsTierConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SponsorsTierEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SponsorsTierFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SponsorsTierEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SponsorsTierFields & $Options>
}
export interface SponsorsTierFields {
  __typename?: $Pick
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo?: $<SponsorsTierAdminInfoFields & $Options>
  /** Get a different tier for this tier's maintainer that is at the same frequency
   * as this tier but with an equal or lesser cost. Returns the published tier with
   * the monthly price closest to this tier's without going over. */
  closestLesserValueTier?: $<SponsorsTierFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The description of the tier. */
  description?: $Pick
  /** The tier description rendered to HTML */
  descriptionHTML?: $Pick
  /** The Node ID of the SponsorsTier object */
  id?: $Pick
  /** Whether this tier was chosen at checkout time by the sponsor rather than
   * defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount?: $Pick
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime?: $Pick
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents?: $Pick
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars?: $Pick
  /** The name of the tier. */
  name?: $Pick
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface SshSignatureFields {
  __typename?: $Pick
  /** Email used to sign this object. */
  email?: $Pick
  /** True if the signature is valid and verified by GitHub. */
  isValid?: $Pick
  /** Hex-encoded fingerprint of the key that signed this object. */
  keyFingerprint?: $Pick
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: $Pick
  /** ASCII-armored signature header from object. */
  signature?: $Pick
  /** GitHub user corresponding to the email signing this commit. */
  signer?: $<UserFields & $Options>
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state?: $Pick
  /** The date the signature was verified, if valid */
  verifiedAt?: $Pick
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: $Pick
}
export interface StargazerConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<StargazerEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface StargazerEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  node?: $<UserFields & $Options>
  /** Identifies when the item was starred. */
  starredAt?: $Pick
}
export interface StarrableFields {
  __typename?: $Pick
  /** The Node ID of the Starrable object */
  id?: $Pick
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount?: $Pick
  /** A list of users who have starred this starrable. */
  stargazers?: $<StargazerConnectionFields & { $args?: StarrableStargazersArgs } & $Options>
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: $Pick
}
export interface StarredRepositoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<StarredRepositoryEdgeFields & $Options>
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit?: $Pick
  /** A list of nodes. */
  nodes?: $<RepositoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface StarredRepositoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  node?: $<RepositoryFields & $Options>
  /** Identifies when the item was starred. */
  starredAt?: $Pick
}
export interface StartOrganizationMigrationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new organization migration. */
  orgMigration?: $<OrganizationMigrationFields & $Options>
}
export interface StartRepositoryMigrationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The new repository migration. */
  repositoryMigration?: $<RepositoryMigrationFields & $Options>
}
export interface StatusCheckConfigurationFields {
  __typename?: $Pick
  /** The status check context name that must be present on the commit. */
  context?: $Pick
  /** The optional integration ID that this status check must originate from. */
  integrationId?: $Pick
}
export interface StatusCheckRollupContextConnectionFields {
  __typename?: $Pick
  /** The number of check runs in this rollup. */
  checkRunCount?: $Pick
  /** Counts of check runs by state. */
  checkRunCountsByState?: $<CheckRunStateCountFields & $Options>
  /** A list of edges. */
  edges?: $<StatusCheckRollupContextEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<StatusCheckRollupContextPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** The number of status contexts in this rollup. */
  statusContextCount?: $Pick
  /** Counts of status contexts by state. */
  statusContextCountsByState?: $<StatusContextStateCountFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface StatusCheckRollupContextEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<StatusCheckRollupContextPossibleTypes & $Options>
}
export interface StatusCheckRollupFields {
  __typename?: $Pick
  /** The commit the status and check runs are attached to. */
  commit?: $<CommitFields & $Options>
  /** A list of status contexts and check runs for this commit. */
  contexts?: $<StatusCheckRollupContextConnectionFields & { $args?: StatusCheckRollupContextsArgs } & $Options>
  /** The Node ID of the StatusCheckRollup object */
  id?: $Pick
  /** The combined status for the commit. */
  state?: $Pick
}
export interface StatusContextFields {
  __typename?: $Pick
  /** The avatar of the OAuth application or the user that created the status */
  avatarUrl?: $Scalar | $<$Options & { $args?: StatusContextAvatarUrlArgs }>
  /** This commit this status context is attached to. */
  commit?: $<CommitFields & $Options>
  /** The name of this status context. */
  context?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The actor who created this status context. */
  creator?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The description for this status context. */
  description?: $Pick
  /** The Node ID of the StatusContext object */
  id?: $Pick
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?: $Scalar | $<$Options & { $args?: StatusContextIsRequiredArgs }>
  /** The state of this status context. */
  state?: $Pick
  /** The URL for this status context. */
  targetUrl?: $Pick
}
export interface StatusContextStateCountFields {
  __typename?: $Pick
  /** The number of statuses with this state. */
  count?: $Pick
  /** The state of a status context. */
  state?: $Pick
}
export interface StatusFields {
  __typename?: $Pick
  /** A list of status contexts and check runs for this commit. */
  combinedContexts?: $<StatusCheckRollupContextConnectionFields & { $args?: StatusCombinedContextsArgs } & $Options>
  /** The commit this status is attached to. */
  commit?: $<CommitFields & $Options>
  /** Looks up an individual status context by context name. */
  context?: $<StatusContextFields & { $args: StatusContextArgs } & $Options>
  /** The individual status contexts for this commit. */
  contexts?: $<StatusContextFields & $Options>
  /** The Node ID of the Status object */
  id?: $Pick
  /** The combined commit status. */
  state?: $Pick
}
export interface StripeConnectAccountFields {
  __typename?: $Pick
  /** The account number used to identify this Stripe Connect account. */
  accountId?: $Pick
  /** The name of the country or region of an external account, such as a bank
   * account, tied to the Stripe Connect account. Will only return a value when
   * queried by the maintainer of the associated GitHub Sponsors profile
   * themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion?: $Pick
  /** The name of the country or region of the Stripe Connect account. Will only
   * return a value when queried by the maintainer of the associated GitHub
   * Sponsors profile themselves, or by an admin of the sponsorable organization. */
  countryOrRegion?: $Pick
  /** Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile. */
  isActive?: $Pick
  /** The GitHub Sponsors profile associated with this Stripe Connect account. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** The URL to access this Stripe Connect account on Stripe's website. */
  stripeDashboardUrl?: $Pick
}
export interface SubIssueAddedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the SubIssueAddedEvent object */
  id?: $Pick
  /** The sub-issue added. */
  subIssue?: $<IssueFields & $Options>
}
export interface SubIssueRemovedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the SubIssueRemovedEvent object */
  id?: $Pick
  /** The sub-issue removed. */
  subIssue?: $<IssueFields & $Options>
}
export interface SubIssuesSummaryFields {
  __typename?: $Pick
  /** Count of completed sub-issues */
  completed?: $Pick
  /** Percent of sub-issues which are completed */
  percentCompleted?: $Pick
  /** Count of total number of sub-issues */
  total?: $Pick
}
export interface SubmitPullRequestReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The submitted pull request review. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
}
export interface SubmoduleConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<SubmoduleEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<SubmoduleFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface SubmoduleEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<SubmoduleFields & $Options>
}
export interface SubmoduleFields {
  __typename?: $Pick
  /** The branch of the upstream submodule for tracking updates */
  branch?: $Pick
  /** The git URL of the submodule repository */
  gitUrl?: $Pick
  /** The name of the submodule in .gitmodules */
  name?: $Pick
  /** The name of the submodule in .gitmodules (Base64-encoded) */
  nameRaw?: $Pick
  /** The path in the superproject that this submodule is located in */
  path?: $Pick
  /** The path in the superproject that this submodule is located in (Base64-encoded) */
  pathRaw?: $Pick
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid?: $Pick
}
export interface SubscribableFields {
  __typename?: $Pick
  /** The Node ID of the Subscribable object */
  id?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
}
export interface SubscribableThreadFields {
  __typename?: $Pick
  /** The Node ID of the SubscribableThread object */
  id?: $Pick
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: $Pick
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: $Pick
}
export interface SubscribedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the SubscribedEvent object */
  id?: $Pick
  /** Object referenced by event. */
  subscribable?: $<SubscribableFields & SubscribablePossibleTypes & $Options>
}
export interface SuggestedReviewerFields {
  __typename?: $Pick
  /** Is this suggestion based on past commits? */
  isAuthor?: $Pick
  /** Is this suggestion based on past review comments? */
  isCommenter?: $Pick
  /** Identifies the user suggested to review the pull request. */
  reviewer?: $<UserFields & $Options>
}
export interface TagFields {
  __typename?: $Pick
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: $Pick
  /** The HTTP path for this Git object */
  commitResourcePath?: $Pick
  /** The HTTP URL for this Git object */
  commitUrl?: $Pick
  /** The Node ID of the Tag object */
  id?: $Pick
  /** The Git tag message. */
  message?: $Pick
  /** The Git tag name. */
  name?: $Pick
  /** The Git object ID */
  oid?: $Pick
  /** The Repository the Git object belongs to */
  repository?: $<RepositoryFields & $Options>
  /** Details about the tag author. */
  tagger?: $<GitActorFields & $Options>
  /** The Git object the tag points to. */
  target?: $<GitObjectFields & GitObjectPossibleTypes & $Options>
}
export interface TagNamePatternParametersFields {
  __typename?: $Pick
  /** How this rule will appear to users. */
  name?: $Pick
  /** If true, the rule will fail if the pattern matches. */
  negate?: $Pick
  /** The operator to use for matching. */
  operator?: $Pick
  /** The pattern to match with. */
  pattern?: $Pick
}
export interface TeamAddMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the TeamAddMemberAuditEntry object */
  id?: $Pick
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface TeamAddRepositoryAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the TeamAddRepositoryAuditEntry object */
  id?: $Pick
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface TeamAuditEntryDataFields {
  __typename?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
}
export interface TeamChangeParentTeamAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the TeamChangeParentTeamAuditEntry object */
  id?: $Pick
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The new parent team. */
  parentTeam?: $<TeamFields & $Options>
  /** The name of the new parent team */
  parentTeamName?: $Pick
  /** The name of the former parent team */
  parentTeamNameWas?: $Pick
  /** The HTTP path for the parent team */
  parentTeamResourcePath?: $Pick
  /** The HTTP URL for the parent team */
  parentTeamUrl?: $Pick
  /** The former parent team. */
  parentTeamWas?: $<TeamFields & $Options>
  /** The HTTP path for the previous parent team */
  parentTeamWasResourcePath?: $Pick
  /** The HTTP URL for the previous parent team */
  parentTeamWasUrl?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface TeamConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<TeamEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<TeamFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface TeamDiscussionCommentConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<TeamDiscussionCommentEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<TeamDiscussionCommentFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface TeamDiscussionCommentEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<TeamDiscussionCommentFields & $Options>
}
export interface TeamDiscussionCommentFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the comment's team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  authorAssociation?: $Pick
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** The current version of the body content.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  bodyVersion?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The discussion this comment is about.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  discussion?: $<TeamDiscussionFields & $Options>
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the TeamDiscussionComment object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Identifies the comment number.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  number?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: TeamDiscussionCommentReactionsArgs } & $Options>
  /** The HTTP path for this comment
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  resourcePath?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this comment
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: TeamDiscussionCommentUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
}
export interface TeamDiscussionConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<TeamDiscussionEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<TeamDiscussionFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface TeamDiscussionEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<TeamDiscussionFields & $Options>
}
export interface TeamDiscussionFields {
  __typename?: $Pick
  /** The actor who authored the comment. */
  author?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Author's association with the discussion's team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  authorAssociation?: $Pick
  /** The body as Markdown. */
  body?: $Pick
  /** The body rendered to HTML. */
  bodyHTML?: $Pick
  /** The body rendered to text. */
  bodyText?: $Pick
  /** Identifies the discussion body hash.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  bodyVersion?: $Pick
  /** A list of comments on this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  comments?: $<TeamDiscussionCommentConnectionFields & { $args?: TeamDiscussionCommentsArgs } & $Options>
  /** The HTTP path for discussion comments
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  commentsResourcePath?: $Pick
  /** The HTTP URL for discussion comments
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  commentsUrl?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The actor who edited the comment. */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the TeamDiscussion object */
  id?: $Pick
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: $Pick
  /** Whether or not the discussion is pinned.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  isPinned?: $Pick
  /** Whether or not the discussion is only visible to team members and organization owners.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  isPrivate?: $Pick
  /** The moment the editor made the last edit */
  lastEditedAt?: $Pick
  /** Identifies the discussion within its team.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  number?: $Pick
  /** Identifies when the comment was published at. */
  publishedAt?: $Pick
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: $<ReactionGroupFields & $Options>
  /** A list of Reactions left on the Issue. */
  reactions?: $<ReactionConnectionFields & { $args?: TeamDiscussionReactionsArgs } & $Options>
  /** The HTTP path for this discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  resourcePath?: $Pick
  /** The team that defines the context of this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  team?: $<TeamFields & $Options>
  /** The title of the discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  title?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this discussion
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  url?: $Pick
  /** A list of edits to this content. */
  userContentEdits?: $<UserContentEditConnectionFields & { $args?: TeamDiscussionUserContentEditsArgs } & $Options>
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: $Pick
  /** Whether or not the current viewer can pin this discussion.
   *
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC. */
  viewerCanPin?: $Pick
  /** Can user react to this subject */
  viewerCanReact?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
  /** Did the viewer author this comment. */
  viewerDidAuthor?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
}
export interface TeamEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<TeamFields & $Options>
}
export interface TeamFields {
  __typename?: $Pick
  /** A list of teams that are ancestors of this team. */
  ancestors?: $<TeamConnectionFields & { $args?: TeamAncestorsArgs } & $Options>
  /** A URL pointing to the team's avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: TeamAvatarUrlArgs }>
  /** List of child teams belonging to this team */
  childTeams?: $<TeamConnectionFields & { $args?: TeamChildTeamsArgs } & $Options>
  /** The slug corresponding to the organization and team. */
  combinedSlug?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The description of the team. */
  description?: $Pick
  /** Find a team discussion by its number. */
  discussion?: $<TeamDiscussionFields & { $args: TeamDiscussionArgs } & $Options>
  /** A list of team discussions. */
  discussions?: $<TeamDiscussionConnectionFields & { $args?: TeamDiscussionsArgs } & $Options>
  /** The HTTP path for team discussions */
  discussionsResourcePath?: $Pick
  /** The HTTP URL for team discussions */
  discussionsUrl?: $Pick
  /** The HTTP path for editing this team */
  editTeamResourcePath?: $Pick
  /** The HTTP URL for editing this team */
  editTeamUrl?: $Pick
  /** The Node ID of the Team object */
  id?: $Pick
  /** A list of pending invitations for users to this team */
  invitations?: $<OrganizationInvitationConnectionFields & { $args?: TeamInvitationsArgs } & $Options>
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: $<UserStatusConnectionFields & { $args?: TeamMemberStatusesArgs } & $Options>
  /** A list of users who are members of this team. */
  members?: $<TeamMemberConnectionFields & { $args?: TeamMembersArgs } & $Options>
  /** The HTTP path for the team' members */
  membersResourcePath?: $Pick
  /** The HTTP URL for the team' members */
  membersUrl?: $Pick
  /** The name of the team. */
  name?: $Pick
  /** The HTTP path creating a new team */
  newTeamResourcePath?: $Pick
  /** The HTTP URL creating a new team */
  newTeamUrl?: $Pick
  /** The notification setting that the team has set. */
  notificationSetting?: $Pick
  /** The organization that owns this team. */
  organization?: $<OrganizationFields & $Options>
  /** The parent team of the team. */
  parentTeam?: $<TeamFields & $Options>
  /** The level of privacy the team has. */
  privacy?: $Pick
  /** Finds and returns the project according to the provided project number. */
  projectV2?: $<ProjectV2Fields & { $args: TeamProjectV2Args } & $Options>
  /** List of projects this team has collaborator access to. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: TeamProjectsV2Args } & $Options>
  /** A list of repositories this team has access to. */
  repositories?: $<TeamRepositoryConnectionFields & { $args?: TeamRepositoriesArgs } & $Options>
  /** The HTTP path for this team's repositories */
  repositoriesResourcePath?: $Pick
  /** The HTTP URL for this team's repositories */
  repositoriesUrl?: $Pick
  /** The HTTP path for this team */
  resourcePath?: $Pick
  /** What algorithm is used for review assignment for this team */
  reviewRequestDelegationAlgorithm?: $Pick
  /** True if review assignment is enabled for this team */
  reviewRequestDelegationEnabled?: $Pick
  /** How many team members are required for review assignment for this team */
  reviewRequestDelegationMemberCount?: $Pick
  /** When assigning team members via delegation, whether the entire team should be notified as well. */
  reviewRequestDelegationNotifyTeam?: $Pick
  /** The slug corresponding to the team. */
  slug?: $Pick
  /** The HTTP path for this team's teams */
  teamsResourcePath?: $Pick
  /** The HTTP URL for this team's teams */
  teamsUrl?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this team */
  url?: $Pick
  /** Team is adminable by the viewer. */
  viewerCanAdminister?: $Pick
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: $Pick
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: $Pick
}
export interface TeamMemberConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<TeamMemberEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface TeamMemberEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath?: $Pick
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl?: $Pick
  node?: $<UserFields & $Options>
  /** The role the member has on the team. */
  role?: $Pick
}
export interface TeamRemoveMemberAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the TeamRemoveMemberAuditEntry object */
  id?: $Pick
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface TeamRemoveRepositoryAuditEntryFields {
  __typename?: $Pick
  /** The action name */
  action?: $Pick
  /** The user who initiated the action */
  actor?: $<AuditEntryActorPossibleTypes & $Options>
  /** The IP address of the actor */
  actorIp?: $Pick
  /** A readable representation of the actor's location */
  actorLocation?: $<ActorLocationFields & $Options>
  /** The username of the user who initiated the action */
  actorLogin?: $Pick
  /** The HTTP path for the actor. */
  actorResourcePath?: $Pick
  /** The HTTP URL for the actor. */
  actorUrl?: $Pick
  /** The time the action was initiated */
  createdAt?: $Pick
  /** The Node ID of the TeamRemoveRepositoryAuditEntry object */
  id?: $Pick
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: $Pick
  /** The corresponding operation type for the action */
  operationType?: $Pick
  /** The Organization associated with the Audit Entry. */
  organization?: $<OrganizationFields & $Options>
  /** The name of the Organization. */
  organizationName?: $Pick
  /** The HTTP path for the organization */
  organizationResourcePath?: $Pick
  /** The HTTP URL for the organization */
  organizationUrl?: $Pick
  /** The repository associated with the action */
  repository?: $<RepositoryFields & $Options>
  /** The name of the repository */
  repositoryName?: $Pick
  /** The HTTP path for the repository */
  repositoryResourcePath?: $Pick
  /** The HTTP URL for the repository */
  repositoryUrl?: $Pick
  /** The team associated with the action */
  team?: $<TeamFields & $Options>
  /** The name of the team */
  teamName?: $Pick
  /** The HTTP path for this team */
  teamResourcePath?: $Pick
  /** The HTTP URL for this team */
  teamUrl?: $Pick
  /** The user affected by the action */
  user?: $<UserFields & $Options>
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: $Pick
  /** The HTTP path for the user. */
  userResourcePath?: $Pick
  /** The HTTP URL for the user. */
  userUrl?: $Pick
}
export interface TeamRepositoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<TeamRepositoryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<RepositoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface TeamRepositoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  node?: $<RepositoryFields & $Options>
  /** The permission level the team has on the repository */
  permission?: $Pick
}
export interface TextMatchFields {
  __typename?: $Pick
  /** The specific text fragment within the property matched on. */
  fragment?: $Pick
  /** Highlights within the matched fragment. */
  highlights?: $<TextMatchHighlightFields & $Options>
  /** The property matched on. */
  property?: $Pick
}
export interface TextMatchHighlightFields {
  __typename?: $Pick
  /** The indice in the fragment where the matched text begins. */
  beginIndice?: $Pick
  /** The indice in the fragment where the matched text ends. */
  endIndice?: $Pick
  /** The text matched. */
  text?: $Pick
}
export interface TopicAuditEntryDataFields {
  __typename?: $Pick
  /** The name of the topic added to the repository */
  topic?: $<TopicFields & $Options>
  /** The name of the topic added to the repository */
  topicName?: $Pick
}
export interface TopicFields {
  __typename?: $Pick
  /** The Node ID of the Topic object */
  id?: $Pick
  /** The topic's name. */
  name?: $Pick
  /** A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics. */
  relatedTopics?: $<TopicFields & { $args?: TopicRelatedTopicsArgs } & $Options>
  /** A list of repositories. */
  repositories?: $<RepositoryConnectionFields & { $args?: TopicRepositoriesArgs } & $Options>
  /** Returns a count of how many stargazers there are on this object */
  stargazerCount?: $Pick
  /** A list of users who have starred this starrable. */
  stargazers?: $<StargazerConnectionFields & { $args?: TopicStargazersArgs } & $Options>
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: $Pick
}
export interface TransferEnterpriseOrganizationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organization for which a transfer was initiated. */
  organization?: $<OrganizationFields & $Options>
}
export interface TransferIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue that was transferred */
  issue?: $<IssueFields & $Options>
}
export interface TransferredEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The repository this came from */
  fromRepository?: $<RepositoryFields & $Options>
  /** The Node ID of the TransferredEvent object */
  id?: $Pick
  /** Identifies the issue associated with the event. */
  issue?: $<IssueFields & $Options>
}
export interface TreeEntryFields {
  __typename?: $Pick
  /** The extension of the file */
  extension?: $Pick
  /** Whether or not this tree entry is generated */
  isGenerated?: $Pick
  /** The programming language this file is written in. */
  language?: $<LanguageFields & $Options>
  /** Number of lines in the file. */
  lineCount?: $Pick
  /** Entry file mode. */
  mode?: $Pick
  /** Entry file name. */
  name?: $Pick
  /** Entry file name. (Base64-encoded) */
  nameRaw?: $Pick
  /** Entry file object. */
  object?: $<GitObjectFields & GitObjectPossibleTypes & $Options>
  /** Entry file Git object ID. */
  oid?: $Pick
  /** The full path of the file. */
  path?: $Pick
  /** The full path of the file. (Base64-encoded) */
  pathRaw?: $Pick
  /** The Repository the tree entry belongs to */
  repository?: $<RepositoryFields & $Options>
  /** Entry byte size */
  size?: $Pick
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule?: $<SubmoduleFields & $Options>
  /** Entry file type. */
  type?: $Pick
}
export interface TreeFields {
  __typename?: $Pick
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: $Pick
  /** The HTTP path for this Git object */
  commitResourcePath?: $Pick
  /** The HTTP URL for this Git object */
  commitUrl?: $Pick
  /** A list of tree entries. */
  entries?: $<TreeEntryFields & $Options>
  /** The Node ID of the Tree object */
  id?: $Pick
  /** The Git object ID */
  oid?: $Pick
  /** The Repository the Git object belongs to */
  repository?: $<RepositoryFields & $Options>
}
export interface UnarchiveProjectV2ItemPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item unarchived from the project. */
  item?: $<ProjectV2ItemFields & $Options>
}
export interface UnarchiveRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository that was unarchived. */
  repository?: $<RepositoryFields & $Options>
}
export interface UnassignedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the assignable associated with the event. */
  assignable?: $<AssignableFields & AssignablePossibleTypes & $Options>
  /** Identifies the user or mannequin that was unassigned. */
  assignee?: $<AssigneePossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UnassignedEvent object */
  id?: $Pick
  /** Identifies the subject (user) who was unassigned.
   *
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC. */
  user?: $<UserFields & $Options>
}
export interface UnfollowOrganizationPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The organization that was unfollowed. */
  organization?: $<OrganizationFields & $Options>
}
export interface UnfollowUserPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The user that was unfollowed. */
  user?: $<UserFields & $Options>
}
export interface UniformResourceLocatableFields {
  __typename?: $Pick
  /** The HTML path to this resource. */
  resourcePath?: $Pick
  /** The URL to this resource. */
  url?: $Pick
}
export interface UnknownSignatureFields {
  __typename?: $Pick
  /** Email used to sign this object. */
  email?: $Pick
  /** True if the signature is valid and verified by GitHub. */
  isValid?: $Pick
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: $Pick
  /** ASCII-armored signature header from object. */
  signature?: $Pick
  /** GitHub user corresponding to the email signing this commit. */
  signer?: $<UserFields & $Options>
  /** The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid. */
  state?: $Pick
  /** The date the signature was verified, if valid */
  verifiedAt?: $Pick
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: $Pick
}
export interface UnlabeledEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UnlabeledEvent object */
  id?: $Pick
  /** Identifies the label associated with the 'unlabeled' event. */
  label?: $<LabelFields & $Options>
  /** Identifies the `Labelable` associated with the event. */
  labelable?: $<LabelableFields & LabelablePossibleTypes & $Options>
}
export interface UnlinkProjectV2FromRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository the project is no longer linked to. */
  repository?: $<RepositoryFields & $Options>
}
export interface UnlinkProjectV2FromTeamPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The team the project is unlinked from */
  team?: $<TeamFields & $Options>
}
export interface UnlinkRepositoryFromProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The linked Project. */
  project?: $<ProjectFields & $Options>
  /** The linked Repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface UnlockedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UnlockedEvent object */
  id?: $Pick
  /** Object that was unlocked. */
  lockable?: $<LockableFields & LockablePossibleTypes & $Options>
}
export interface UnlockLockablePayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item that was unlocked. */
  unlockedRecord?: $<LockableFields & LockablePossibleTypes & $Options>
}
export interface UnmarkDiscussionCommentAsAnswerPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The discussion that includes the comment. */
  discussion?: $<DiscussionFields & $Options>
}
export interface UnmarkedAsDuplicateEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: $<IssueOrPullRequestPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: $<IssueOrPullRequestPossibleTypes & $Options>
  /** The Node ID of the UnmarkedAsDuplicateEvent object */
  id?: $Pick
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository?: $Pick
}
export interface UnmarkFileAsViewedPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated pull request. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface UnmarkIssueAsDuplicatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue or pull request that was marked as a duplicate. */
  duplicate?: $<IssueOrPullRequestPossibleTypes & $Options>
}
export interface UnmarkProjectV2AsTemplatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface UnminimizeCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The comment that was unminimized. */
  unminimizedComment?: $<MinimizableFields & MinimizablePossibleTypes & $Options>
}
export interface UnpinIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The id of the pinned issue that was unpinned */
  id?: $Pick
  /** The issue that was unpinned */
  issue?: $<IssueFields & $Options>
}
export interface UnpinnedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UnpinnedEvent object */
  id?: $Pick
  /** Identifies the issue associated with the event. */
  issue?: $<IssueFields & $Options>
}
export interface UnresolveReviewThreadPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The thread to resolve. */
  thread?: $<PullRequestReviewThreadFields & $Options>
}
export interface UnsubscribedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UnsubscribedEvent object */
  id?: $Pick
  /** Object referenced by event. */
  subscribable?: $<SubscribableFields & SubscribablePossibleTypes & $Options>
}
export interface UpdatableCommentFields {
  __typename?: $Pick
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: $Pick
}
export interface UpdatableFields {
  __typename?: $Pick
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: $Pick
}
export interface UpdateBranchProtectionRulePayloadFields {
  __typename?: $Pick
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: $<BranchProtectionRuleFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface UpdateCheckRunPayloadFields {
  __typename?: $Pick
  /** The updated check run. */
  checkRun?: $<CheckRunFields & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface UpdateCheckSuitePreferencesPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface UpdateDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The modified discussion comment. */
  comment?: $<DiscussionCommentFields & $Options>
}
export interface UpdateDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The modified discussion. */
  discussion?: $<DiscussionFields & $Options>
}
export interface UpdateEnterpriseAdministratorRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of changing the administrator's role. */
  message?: $Pick
}
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: $Pick
}
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated base repository permission setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the base repository permission setting. */
  message?: $Pick
}
export interface UpdateEnterpriseDeployKeySettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated deploy key setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the deploy key setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can change repository visibility setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can change repository visibility setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can create repositories setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can create repositories setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can delete issues setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can delete issues setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can delete repositories setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can make purchases setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can make purchases setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can update protected branches setting. */
  message?: $Pick
}
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message?: $Pick
}
export interface UpdateEnterpriseOrganizationProjectsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated organization projects setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the organization projects setting. */
  message?: $Pick
}
export interface UpdateEnterpriseOwnerOrganizationRolePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of changing the owner's organization role. */
  message?: $Pick
}
export interface UpdateEnterpriseProfilePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated enterprise. */
  enterprise?: $<EnterpriseFields & $Options>
}
export interface UpdateEnterpriseRepositoryProjectsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated repository projects setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the repository projects setting. */
  message?: $Pick
}
export interface UpdateEnterpriseTeamDiscussionsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated team discussions setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the team discussions setting. */
  message?: $Pick
}
export interface UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated two-factor authentication disallowed methods setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the two-factor authentication disallowed methods setting. */
  message?: $Pick
}
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise?: $<EnterpriseFields & $Options>
  /** A message confirming the result of updating the two factor authentication required setting. */
  message?: $Pick
}
export interface UpdateEnvironmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated environment. */
  environment?: $<EnvironmentFields & $Options>
}
export interface UpdateIpAllowListEnabledSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The IP allow list owner on which the setting was updated. */
  owner?: $<IpAllowListOwnerPossibleTypes & $Options>
}
export interface UpdateIpAllowListEntryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The IP allow list entry that was updated. */
  ipAllowListEntry?: $<IpAllowListEntryFields & $Options>
}
export interface UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The IP allow list owner on which the setting was updated. */
  owner?: $<IpAllowListOwnerPossibleTypes & $Options>
}
export interface UpdateIssueCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated comment. */
  issueComment?: $<IssueCommentFields & $Options>
}
export interface UpdateIssuePayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The issue. */
  issue?: $<IssueFields & $Options>
}
export interface UpdateLabelPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated label. */
  label?: $<LabelFields & $Options>
}
export interface UpdateNotificationRestrictionSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The owner on which the setting was updated. */
  owner?: $<VerifiableDomainOwnerPossibleTypes & $Options>
}
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: $Pick
  /** The organization with the updated allow private repository forking setting. */
  organization?: $<OrganizationFields & $Options>
}
export interface UpdateOrganizationWebCommitSignoffSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: $Pick
  /** The organization with the updated web commit signoff setting. */
  organization?: $<OrganizationFields & $Options>
}
export interface UpdateParametersFields {
  __typename?: $Pick
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge?: $Pick
}
export interface UpdatePatreonSponsorabilityPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The GitHub Sponsors profile. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
}
export interface UpdateProjectCardPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated ProjectCard. */
  projectCard?: $<ProjectCardFields & $Options>
}
export interface UpdateProjectColumnPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated project column. */
  projectColumn?: $<ProjectColumnFields & $Options>
}
export interface UpdateProjectPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated project. */
  project?: $<ProjectFields & $Options>
}
export interface UpdateProjectV2CollaboratorsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The collaborators granted a role */
  collaborators?: $<ProjectV2ActorConnectionFields & { $args?: UpdateProjectV2CollaboratorsPayloadCollaboratorsArgs } & $Options>
}
export interface UpdateProjectV2DraftIssuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The draft issue updated in the project. */
  draftIssue?: $<DraftIssueFields & $Options>
}
export interface UpdateProjectV2FieldPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated field. */
  projectV2Field?: $<ProjectV2FieldConfigurationPossibleTypes & $Options>
}
export interface UpdateProjectV2ItemFieldValuePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated item. */
  projectV2Item?: $<ProjectV2ItemFields & $Options>
}
export interface UpdateProjectV2ItemPositionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The items in the new order */
  items?: $<ProjectV2ItemConnectionFields & { $args?: UpdateProjectV2ItemPositionPayloadItemsArgs } & $Options>
}
export interface UpdateProjectV2PayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated Project. */
  projectV2?: $<ProjectV2Fields & $Options>
}
export interface UpdateProjectV2StatusUpdatePayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The status update updated in the project. */
  statusUpdate?: $<ProjectV2StatusUpdateFields & $Options>
}
export interface UpdatePullRequestBranchPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated pull request. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface UpdatePullRequestPayloadFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated pull request. */
  pullRequest?: $<PullRequestFields & $Options>
}
export interface UpdatePullRequestReviewCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated comment. */
  pullRequestReviewComment?: $<PullRequestReviewCommentFields & $Options>
}
export interface UpdatePullRequestReviewPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated pull request review. */
  pullRequestReview?: $<PullRequestReviewFields & $Options>
}
export interface UpdateRefPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated Ref. */
  ref?: $<RefFields & $Options>
}
export interface UpdateRefsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
}
export interface UpdateRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface UpdateRepositoryRulesetPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The newly created Ruleset. */
  ruleset?: $<RepositoryRulesetFields & $Options>
}
export interface UpdateRepositoryWebCommitSignoffSettingPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: $Pick
  /** The updated repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface UpdateSponsorshipPreferencesPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The sponsorship that was updated. */
  sponsorship?: $<SponsorshipFields & $Options>
}
export interface UpdateSubscriptionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The input subscribable entity. */
  subscribable?: $<SubscribableFields & SubscribablePossibleTypes & $Options>
}
export interface UpdateTeamDiscussionCommentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated comment. */
  teamDiscussionComment?: $<TeamDiscussionCommentFields & $Options>
}
export interface UpdateTeamDiscussionPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The updated discussion. */
  teamDiscussion?: $<TeamDiscussionFields & $Options>
}
export interface UpdateTeamReviewAssignmentPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The team that was modified */
  team?: $<TeamFields & $Options>
}
export interface UpdateTeamsRepositoryPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The repository that was updated. */
  repository?: $<RepositoryFields & $Options>
  /** The teams granted permission on the repository. */
  teams?: $<TeamFields & $Options>
}
export interface UpdateTopicsPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** Names of the provided topics that are not valid. */
  invalidTopicNames?: $Pick
  /** The updated repository. */
  repository?: $<RepositoryFields & $Options>
}
export interface UpdateUserListPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The list that was just updated */
  list?: $<UserListFields & $Options>
}
export interface UpdateUserListsForItemPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The item that was added */
  item?: $<UserListItemsPossibleTypes & $Options>
  /** The lists to which this item belongs */
  lists?: $<UserListFields & $Options>
  /** The user who owns the lists */
  user?: $<UserFields & $Options>
}
export interface UserBlockedEventFields {
  __typename?: $Pick
  /** Identifies the actor who performed the event. */
  actor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** Number of days that the user was blocked for. */
  blockDuration?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The Node ID of the UserBlockedEvent object */
  id?: $Pick
  /** The user who was blocked. */
  subject?: $<UserFields & $Options>
}
export interface UserConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserContentEditConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserContentEditEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserContentEditFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserContentEditEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserContentEditFields & $Options>
}
export interface UserContentEditFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the date and time when the object was deleted. */
  deletedAt?: $Pick
  /** The actor who deleted this content */
  deletedBy?: $<ActorFields & ActorPossibleTypes & $Options>
  /** A summary of the changes for this edit */
  diff?: $Pick
  /** When this content was edited */
  editedAt?: $Pick
  /** The actor who edited this content */
  editor?: $<ActorFields & ActorPossibleTypes & $Options>
  /** The Node ID of the UserContentEdit object */
  id?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
}
export interface UserEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserFields & $Options>
}
export interface UserEmailMetadataFields {
  __typename?: $Pick
  /** Boolean to identify primary emails */
  primary?: $Pick
  /** Type of email */
  type?: $Pick
  /** Email id */
  value?: $Pick
}
export interface UserFields {
  __typename?: $Pick
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?: $Scalar | $<$Options & { $args?: UserAnyPinnableItemsArgs }>
  /** A URL pointing to the user's public avatar. */
  avatarUrl?: $Scalar | $<$Options & { $args?: UserAvatarUrlArgs }>
  /** The user's public profile bio. */
  bio?: $Pick
  /** The user's public profile bio as HTML. */
  bioHTML?: $Pick
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  canReceiveOrganizationEmailsWhenNotificationsRestricted?: $<$Options & { $args: UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs }>
  /** A list of commit comments made by this user. */
  commitComments?: $<CommitCommentConnectionFields & { $args?: UserCommitCommentsArgs } & $Options>
  /** The user's public profile company. */
  company?: $Pick
  /** The user's public profile company as HTML. */
  companyHTML?: $Pick
  /** The collection of contributions this user has made to different repositories. */
  contributionsCollection?: $<ContributionsCollectionFields & { $args?: UserContributionsCollectionArgs } & $Options>
  /** The user's Copilot endpoint information */
  copilotEndpoints?: $<CopilotEndpointsFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The user's publicly visible profile email. */
  email?: $Pick
  /** A list of enterprises that the user belongs to. */
  enterprises?: $<EnterpriseConnectionFields & { $args?: UserEnterprisesArgs } & $Options>
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: $Pick
  /** A list of users the given user is followed by. */
  followers?: $<FollowerConnectionFields & { $args?: UserFollowersArgs } & $Options>
  /** A list of users the given user is following. */
  following?: $<FollowingConnectionFields & { $args?: UserFollowingArgs } & $Options>
  /** Find gist by repo name. */
  gist?: $<GistFields & { $args: UserGistArgs } & $Options>
  /** A list of gist comments made by this user. */
  gistComments?: $<GistCommentConnectionFields & { $args?: UserGistCommentsArgs } & $Options>
  /** A list of the Gists the user has created. */
  gists?: $<GistConnectionFields & { $args?: UserGistsArgs } & $Options>
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: $Pick
  /** The hovercard information for this user in a given context */
  hovercard?: $<HovercardFields & { $args?: UserHovercardArgs } & $Options>
  /** The Node ID of the User object */
  id?: $Pick
  /** The interaction ability settings for this user. */
  interactionAbility?: $<RepositoryInteractionAbilityFields & $Options>
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  isBountyHunter?: $Pick
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  isCampusExpert?: $Pick
  /** Whether or not this user is a GitHub Developer Program member. */
  isDeveloperProgramMember?: $Pick
  /** Whether or not this user is a GitHub employee. */
  isEmployee?: $Pick
  /** Whether or not this user is following the viewer. Inverse of viewerIsFollowing */
  isFollowingViewer?: $Pick
  /** Whether or not this user is a member of the GitHub Stars Program. */
  isGitHubStar?: $Pick
  /** Whether or not the user has marked themselves as for hire. */
  isHireable?: $Pick
  /** Whether or not this user is a site administrator. */
  isSiteAdmin?: $Pick
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: $<$Options & { $args: UserIsSponsoredByArgs }>
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: $Pick
  /** Whether or not this user is the viewing user. */
  isViewer?: $Pick
  /** A list of issue comments made by this user. */
  issueComments?: $<IssueCommentConnectionFields & { $args?: UserIssueCommentsArgs } & $Options>
  /** A list of issues associated with this user. */
  issues?: $<IssueConnectionFields & { $args?: UserIssuesArgs } & $Options>
  /** Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity. */
  itemShowcase?: $<ProfileItemShowcaseFields & $Options>
  /** Calculate how much each sponsor has ever paid total to this maintainer via
   * GitHub Sponsors. Does not include sponsorships paid via Patreon. */
  lifetimeReceivedSponsorshipValues?: $<SponsorAndLifetimeValueConnectionFields & { $args?: UserLifetimeReceivedSponsorshipValuesArgs } & $Options>
  /** A user-curated list of repositories */
  lists?: $<UserListConnectionFields & { $args?: UserListsArgs } & $Options>
  /** The user's public profile location. */
  location?: $Pick
  /** The username used to login. */
  login?: $Pick
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: $Pick
  /** The user's public profile name. */
  name?: $Pick
  /** Find an organization by its login that the user belongs to. */
  organization?: $<OrganizationFields & { $args: UserOrganizationArgs } & $Options>
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  organizationVerifiedDomainEmails?: $<$Options & { $args: UserOrganizationVerifiedDomainEmailsArgs }>
  /** A list of organizations the user belongs to. */
  organizations?: $<OrganizationConnectionFields & { $args?: UserOrganizationsArgs } & $Options>
  /** A list of packages under the owner. */
  packages?: $<PackageConnectionFields & { $args?: UserPackagesArgs } & $Options>
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: $<PinnableItemConnectionFields & { $args?: UserPinnableItemsArgs } & $Options>
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: $<PinnableItemConnectionFields & { $args?: UserPinnedItemsArgs } & $Options>
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: $Pick
  /** Find project by number. */
  project?: $<ProjectFields & { $args: UserProjectArgs } & $Options>
  /** Find a project by number. */
  projectV2?: $<ProjectV2Fields & { $args: UserProjectV2Args } & $Options>
  /** A list of projects under the owner. */
  projects?: $<ProjectConnectionFields & { $args?: UserProjectsArgs } & $Options>
  /** The HTTP path listing user's projects */
  projectsResourcePath?: $Pick
  /** The HTTP URL listing user's projects */
  projectsUrl?: $Pick
  /** A list of projects under the owner. */
  projectsV2?: $<ProjectV2ConnectionFields & { $args?: UserProjectsV2Args } & $Options>
  /** The user's profile pronouns */
  pronouns?: $Pick
  /** A list of public keys associated with this user. */
  publicKeys?: $<PublicKeyConnectionFields & { $args?: UserPublicKeysArgs } & $Options>
  /** A list of pull requests associated with this user. */
  pullRequests?: $<PullRequestConnectionFields & { $args?: UserPullRequestsArgs } & $Options>
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: $<ProjectV2ConnectionFields & { $args?: UserRecentProjectsArgs } & $Options>
  /** A list of repositories that the user owns. */
  repositories?: $<RepositoryConnectionFields & { $args?: UserRepositoriesArgs } & $Options>
  /** A list of repositories that the user recently contributed to. */
  repositoriesContributedTo?: $<RepositoryConnectionFields & { $args?: UserRepositoriesContributedToArgs } & $Options>
  /** Find Repository. */
  repository?: $<RepositoryFields & { $args: UserRepositoryArgs } & $Options>
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: $<DiscussionCommentConnectionFields & { $args?: UserRepositoryDiscussionCommentsArgs } & $Options>
  /** Discussions this user has started. */
  repositoryDiscussions?: $<DiscussionConnectionFields & { $args?: UserRepositoryDiscussionsArgs } & $Options>
  /** The HTTP path for this user */
  resourcePath?: $Pick
  /** Replies this user has saved */
  savedReplies?: $<SavedReplyConnectionFields & { $args?: UserSavedRepliesArgs } & $Options>
  /** The user's social media accounts, ordered as they appear on the user's profile. */
  socialAccounts?: $<SocialAccountConnectionFields & { $args?: UserSocialAccountsArgs } & $Options>
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: $<SponsorConnectionFields & { $args?: UserSponsoringArgs } & $Options>
  /** List of sponsors for this user or organization. */
  sponsors?: $<SponsorConnectionFields & { $args?: UserSponsorsArgs } & $Options>
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: $<SponsorsActivityConnectionFields & { $args?: UserSponsorsActivitiesArgs } & $Options>
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: $<SponsorsListingFields & $Options>
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: $<SponsorshipFields & { $args?: UserSponsorshipForViewerAsSponsorArgs } & $Options>
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: $<SponsorshipFields & { $args?: UserSponsorshipForViewerAsSponsorableArgs } & $Options>
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: $<SponsorshipNewsletterConnectionFields & { $args?: UserSponsorshipNewslettersArgs } & $Options>
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: $<SponsorshipConnectionFields & { $args?: UserSponsorshipsAsMaintainerArgs } & $Options>
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: $<SponsorshipConnectionFields & { $args?: UserSponsorshipsAsSponsorArgs } & $Options>
  /** Repositories the user has starred. */
  starredRepositories?: $<StarredRepositoryConnectionFields & { $args?: UserStarredRepositoriesArgs } & $Options>
  /** The user's description of what they're currently doing. */
  status?: $<UserStatusFields & $Options>
  /** Suggested names for user lists */
  suggestedListNames?: $<UserListSuggestionFields & $Options>
  /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
  topRepositories?: $<RepositoryConnectionFields & { $args: UserTopRepositoriesArgs } & $Options>
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the
   * user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?: $Scalar | $<$Options & { $args?: UserTotalSponsorshipAmountAsSponsorInCentsArgs }>
  /** The user's Twitter username. */
  twitterUsername?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this user */
  url?: $Pick
  /** Whether the request returns publicly visible information or privately visible information about the user */
  userViewType?: $Pick
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: $Pick
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: $Pick
  /** Whether or not the viewer is able to follow the user. */
  viewerCanFollow?: $Pick
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: $Pick
  /** Whether or not this user is followed by the viewer. Inverse of isFollowingViewer. */
  viewerIsFollowing?: $Pick
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: $Pick
  /** A list of repositories the given user is watching. */
  watching?: $<RepositoryConnectionFields & { $args?: UserWatchingArgs } & $Options>
  /** A URL pointing to the user's public website/blog. */
  websiteUrl?: $Pick
}
export interface UserListConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserListEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserListFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserListEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserListFields & $Options>
}
export interface UserListFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** The description of this list */
  description?: $Pick
  /** The Node ID of the UserList object */
  id?: $Pick
  /** Whether or not this list is private */
  isPrivate?: $Pick
  /** The items associated with this list */
  items?: $<UserListItemsConnectionFields & { $args?: UserListItemsArgs } & $Options>
  /** The date and time at which this list was created or last had items added to it */
  lastAddedAt?: $Pick
  /** The name of this list */
  name?: $Pick
  /** The slug of this list */
  slug?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The user to which this list belongs */
  user?: $<UserFields & $Options>
}
export interface UserListItemsConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserListItemsEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserListItemsPossibleTypes & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserListItemsEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserListItemsPossibleTypes & $Options>
}
export interface UserListSuggestionFields {
  __typename?: $Pick
  /** The ID of the suggested user list */
  id?: $Pick
  /** The name of the suggested user list */
  name?: $Pick
}
export interface UserNamespaceRepositoryConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserNamespaceRepositoryEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserNamespaceRepositoryFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserNamespaceRepositoryEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserNamespaceRepositoryFields & $Options>
}
export interface UserNamespaceRepositoryFields {
  __typename?: $Pick
  /** The Node ID of the UserNamespaceRepository object */
  id?: $Pick
  /** The name of the repository. */
  name?: $Pick
  /** The repository's name with owner. */
  nameWithOwner?: $Pick
  /** The user owner of the repository. */
  owner?: $<RepositoryOwnerFields & RepositoryOwnerPossibleTypes & $Options>
  /** The repository owned by an enterprise managed user. */
  repository?: $<RepositoryInfoFields & RepositoryInfoPossibleTypes & $Options>
}
export interface UserStatusConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<UserStatusEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<UserStatusFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface UserStatusEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<UserStatusFields & $Options>
}
export interface UserStatusFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** An emoji summarizing the user's status. */
  emoji?: $Pick
  /** The status emoji as HTML. */
  emojiHTML?: $Pick
  /** If set, the status will not be shown after this date. */
  expiresAt?: $Pick
  /** The Node ID of the UserStatus object */
  id?: $Pick
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability?: $Pick
  /** A brief message describing what the user is doing. */
  message?: $Pick
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization?: $<OrganizationFields & $Options>
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The user who has this status. */
  user?: $<UserFields & $Options>
}
export interface VerifiableDomainConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<VerifiableDomainEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<VerifiableDomainFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface VerifiableDomainEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<VerifiableDomainFields & $Options>
}
export interface VerifiableDomainFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The DNS host name that should be used for verification. */
  dnsHostName?: $Pick
  /** The unicode encoded domain. */
  domain?: $Pick
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName?: $Pick
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken?: $Pick
  /** The Node ID of the VerifiableDomain object */
  id?: $Pick
  /** Whether or not the domain is approved. */
  isApproved?: $Pick
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement?: $Pick
  /** Whether or not the domain is verified. */
  isVerified?: $Pick
  /** The owner of the domain. */
  owner?: $<VerifiableDomainOwnerPossibleTypes & $Options>
  /** The punycode encoded domain. */
  punycodeEncodedDomain?: $Pick
  /** The time that the current verification token will expire. */
  tokenExpirationTime?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The current verification token for the domain. */
  verificationToken?: $Pick
}
export interface VerifyVerifiableDomainPayloadFields {
  __typename?: $Pick
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: $Pick
  /** The verifiable domain that was verified. */
  domain?: $<VerifiableDomainFields & $Options>
}
export interface ViewerHovercardContextFields {
  __typename?: $Pick
  /** A string describing this context */
  message?: $Pick
  /** An octicon to accompany this context */
  octicon?: $Pick
  /** Identifies the user who is related to this context. */
  viewer?: $<UserFields & $Options>
}
export interface VotableFields {
  __typename?: $Pick
  /** Number of upvotes that this subject has received. */
  upvoteCount?: $Pick
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: $Pick
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: $Pick
}
export interface WorkflowFields {
  __typename?: $Pick
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The Node ID of the Workflow object */
  id?: $Pick
  /** The name of the workflow. */
  name?: $Pick
  /** The HTTP path for this workflow */
  resourcePath?: $Pick
  /** The runs of the workflow. */
  runs?: $<WorkflowRunConnectionFields & { $args?: WorkflowRunsArgs } & $Options>
  /** The state of the workflow. */
  state?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this workflow */
  url?: $Pick
}
export interface WorkflowFileReferenceFields {
  __typename?: $Pick
  /** The path to the workflow file */
  path?: $Pick
  /** The ref (branch or tag) of the workflow file to use */
  ref?: $Pick
  /** The ID of the repository where the workflow is defined */
  repositoryId?: $Pick
  /** The commit SHA of the workflow file to use */
  sha?: $Pick
}
export interface WorkflowRunConnectionFields {
  __typename?: $Pick
  /** A list of edges. */
  edges?: $<WorkflowRunEdgeFields & $Options>
  /** A list of nodes. */
  nodes?: $<WorkflowRunFields & $Options>
  /** Information to aid in pagination. */
  pageInfo?: $<PageInfoFields & $Options>
  /** Identifies the total count of items in the connection. */
  totalCount?: $Pick
}
export interface WorkflowRunEdgeFields {
  __typename?: $Pick
  /** A cursor for use in pagination. */
  cursor?: $Pick
  /** The item at the end of the edge. */
  node?: $<WorkflowRunFields & $Options>
}
export interface WorkflowRunFields {
  __typename?: $Pick
  /** The check suite this workflow run belongs to. */
  checkSuite?: $<CheckSuiteFields & $Options>
  /** Identifies the date and time when the object was created. */
  createdAt?: $Pick
  /** Identifies the primary key from the database. */
  databaseId?: $Pick
  /** The log of deployment reviews */
  deploymentReviews?: $<DeploymentReviewConnectionFields & { $args?: WorkflowRunDeploymentReviewsArgs } & $Options>
  /** The event that triggered the workflow run */
  event?: $Pick
  /** The workflow file */
  file?: $<WorkflowRunFileFields & $Options>
  /** The Node ID of the WorkflowRun object */
  id?: $Pick
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests?: $<DeploymentRequestConnectionFields & { $args?: WorkflowRunPendingDeploymentRequestsArgs } & $Options>
  /** The HTTP path for this workflow run */
  resourcePath?: $Pick
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber?: $Pick
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: $Pick
  /** The HTTP URL for this workflow run */
  url?: $Pick
  /** The workflow executed in this workflow run. */
  workflow?: $<WorkflowFields & $Options>
}
export interface WorkflowRunFileFields {
  __typename?: $Pick
  /** The Node ID of the WorkflowRunFile object */
  id?: $Pick
  /** The path of the workflow file relative to its repository. */
  path?: $Pick
  /** The direct link to the file in the repository which stores the workflow file. */
  repositoryFileUrl?: $Pick
  /** The repository name and owner which stores the workflow file. */
  repositoryName?: $Pick
  /** The HTTP path for this workflow run file */
  resourcePath?: $Pick
  /** The parent workflow run execution for this file. */
  run?: $<WorkflowRunFields & $Options>
  /** The HTTP URL for this workflow run file */
  url?: $Pick
  /** If the viewer has permissions to push to the repository which stores the workflow. */
  viewerCanPushRepository?: $Pick
  /** If the viewer has permissions to read the repository which stores the workflow. */
  viewerCanReadRepository?: $Pick
}
export interface WorkflowsParametersFields {
  __typename?: $Pick
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
  doNotEnforceOnCreate?: $Pick
  /** Workflows that must pass for this rule to pass. */
  workflows?: $<WorkflowFileReferenceFields & $Options>
}
export default function createGraphQLClient<Options = any, GraphQLError = $GraphQLError>(
  request: (
    /**
     * Operation type.
     */
    type: 'query' | 'mutation',

    /**
     * The operations name.
     *
     * If `name` is `null`, means that the caller is `query()` or
     * `mutation()`. If `name` is a string, means that the caller
     * is `queries.xxx()` or `mutations.xxx()`.
     */
    name: string | null,

    /**
     * The request payload.
     *
     * If `name` is `null`, `payload` is the first parameter of
     * `query()` or `mutation()`. If `name` is a string, `payload`
     * is the first parameter of `queries.xxx()` or `mutations.xxx()`.
     */
    payload: any,

    /**
     * Custom options. The second parameter of the client methods.
     */
    options?: Options
  ) => Promise<any>
) {
  const Q = 'query' as const
  const M = 'mutation' as const
  const attach = (operation: 'query' | 'mutation', methods: string) => {
    const operations = {} as any
    methods.split('/').forEach((key) => {
      operations[key] = (payload: any, options?: any) => request(operation, key, payload, options)
    })
    return operations
  }
  const queries = attach(Q, "codeOfConduct/codesOfConduct/enterprise/enterpriseAdministratorInvitation/enterpriseAdministratorInvitationByToken/enterpriseMemberInvitation/enterpriseMemberInvitationByToken/id/license/licenses/marketplaceCategories/marketplaceCategory/marketplaceListing/marketplaceListings/meta/node/nodes/organization/rateLimit/relay/repository/repositoryOwner/resource/search/securityAdvisories/securityAdvisory/securityVulnerabilities/sponsorables/topic/user/viewer")
  const mutations = attach(M, "abortQueuedMigrations/abortRepositoryMigration/acceptEnterpriseAdministratorInvitation/acceptEnterpriseMemberInvitation/acceptTopicSuggestion/accessUserNamespaceRepository/addAssigneesToAssignable/addComment/addDiscussionComment/addDiscussionPollVote/addEnterpriseOrganizationMember/addEnterpriseSupportEntitlement/addLabelsToLabelable/addProjectCard/addProjectColumn/addProjectV2DraftIssue/addProjectV2ItemById/addPullRequestReview/addPullRequestReviewComment/addPullRequestReviewThread/addPullRequestReviewThreadReply/addReaction/addStar/addSubIssue/addUpvote/addVerifiableDomain/approveDeployments/approveVerifiableDomain/archiveProjectV2Item/archiveRepository/cancelEnterpriseAdminInvitation/cancelEnterpriseMemberInvitation/cancelSponsorship/changeUserStatus/clearLabelsFromLabelable/clearProjectV2ItemFieldValue/cloneProject/cloneTemplateRepository/closeDiscussion/closeIssue/closePullRequest/convertProjectCardNoteToIssue/convertProjectV2DraftIssueItemToIssue/convertPullRequestToDraft/copyProjectV2/createAttributionInvitation/createBranchProtectionRule/createCheckRun/createCheckSuite/createCommitOnBranch/createDeployment/createDeploymentStatus/createDiscussion/createEnterpriseOrganization/createEnvironment/createIpAllowListEntry/createIssue/createLabel/createLinkedBranch/createMigrationSource/createProject/createProjectV2/createProjectV2Field/createProjectV2StatusUpdate/createPullRequest/createRef/createRepository/createRepositoryRuleset/createSponsorsListing/createSponsorsTier/createSponsorship/createSponsorships/createTeamDiscussion/createTeamDiscussionComment/createUserList/declineTopicSuggestion/deleteBranchProtectionRule/deleteDeployment/deleteDiscussion/deleteDiscussionComment/deleteEnvironment/deleteIpAllowListEntry/deleteIssue/deleteIssueComment/deleteLabel/deleteLinkedBranch/deletePackageVersion/deleteProject/deleteProjectCard/deleteProjectColumn/deleteProjectV2/deleteProjectV2Field/deleteProjectV2Item/deleteProjectV2StatusUpdate/deleteProjectV2Workflow/deletePullRequestReview/deletePullRequestReviewComment/deleteRef/deleteRepositoryRuleset/deleteTeamDiscussion/deleteTeamDiscussionComment/deleteUserList/deleteVerifiableDomain/dequeuePullRequest/disablePullRequestAutoMerge/dismissPullRequestReview/dismissRepositoryVulnerabilityAlert/enablePullRequestAutoMerge/enqueuePullRequest/followOrganization/followUser/grantEnterpriseOrganizationsMigratorRole/grantMigratorRole/importProject/inviteEnterpriseAdmin/inviteEnterpriseMember/linkProjectV2ToRepository/linkProjectV2ToTeam/linkRepositoryToProject/lockLockable/markDiscussionCommentAsAnswer/markFileAsViewed/markProjectV2AsTemplate/markPullRequestReadyForReview/mergeBranch/mergePullRequest/minimizeComment/moveProjectCard/moveProjectColumn/pinEnvironment/pinIssue/publishSponsorsTier/regenerateEnterpriseIdentityProviderRecoveryCodes/regenerateVerifiableDomainToken/rejectDeployments/removeAssigneesFromAssignable/removeEnterpriseAdmin/removeEnterpriseIdentityProvider/removeEnterpriseMember/removeEnterpriseOrganization/removeEnterpriseSupportEntitlement/removeLabelsFromLabelable/removeOutsideCollaborator/removeReaction/removeStar/removeSubIssue/removeUpvote/reopenDiscussion/reopenIssue/reopenPullRequest/reorderEnvironment/reprioritizeSubIssue/requestReviews/rerequestCheckSuite/resolveReviewThread/retireSponsorsTier/revertPullRequest/revokeEnterpriseOrganizationsMigratorRole/revokeMigratorRole/setEnterpriseIdentityProvider/setOrganizationInteractionLimit/setRepositoryInteractionLimit/setUserInteractionLimit/startOrganizationMigration/startRepositoryMigration/submitPullRequestReview/transferEnterpriseOrganization/transferIssue/unarchiveProjectV2Item/unarchiveRepository/unfollowOrganization/unfollowUser/unlinkProjectV2FromRepository/unlinkProjectV2FromTeam/unlinkRepositoryFromProject/unlockLockable/unmarkDiscussionCommentAsAnswer/unmarkFileAsViewed/unmarkIssueAsDuplicate/unmarkProjectV2AsTemplate/unminimizeComment/unpinIssue/unresolveReviewThread/updateBranchProtectionRule/updateCheckRun/updateCheckSuitePreferences/updateDiscussion/updateDiscussionComment/updateEnterpriseAdministratorRole/updateEnterpriseAllowPrivateRepositoryForkingSetting/updateEnterpriseDefaultRepositoryPermissionSetting/updateEnterpriseDeployKeySetting/updateEnterpriseMembersCanChangeRepositoryVisibilitySetting/updateEnterpriseMembersCanCreateRepositoriesSetting/updateEnterpriseMembersCanDeleteIssuesSetting/updateEnterpriseMembersCanDeleteRepositoriesSetting/updateEnterpriseMembersCanInviteCollaboratorsSetting/updateEnterpriseMembersCanMakePurchasesSetting/updateEnterpriseMembersCanUpdateProtectedBranchesSetting/updateEnterpriseMembersCanViewDependencyInsightsSetting/updateEnterpriseOrganizationProjectsSetting/updateEnterpriseOwnerOrganizationRole/updateEnterpriseProfile/updateEnterpriseRepositoryProjectsSetting/updateEnterpriseTeamDiscussionsSetting/updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting/updateEnterpriseTwoFactorAuthenticationRequiredSetting/updateEnvironment/updateIpAllowListEnabledSetting/updateIpAllowListEntry/updateIpAllowListForInstalledAppsEnabledSetting/updateIssue/updateIssueComment/updateLabel/updateNotificationRestrictionSetting/updateOrganizationAllowPrivateRepositoryForkingSetting/updateOrganizationWebCommitSignoffSetting/updatePatreonSponsorability/updateProject/updateProjectCard/updateProjectColumn/updateProjectV2/updateProjectV2Collaborators/updateProjectV2DraftIssue/updateProjectV2Field/updateProjectV2ItemFieldValue/updateProjectV2ItemPosition/updateProjectV2StatusUpdate/updatePullRequest/updatePullRequestBranch/updatePullRequestReview/updatePullRequestReviewComment/updateRef/updateRefs/updateRepository/updateRepositoryRuleset/updateRepositoryWebCommitSignoffSetting/updateSponsorshipPreferences/updateSubscription/updateTeamDiscussion/updateTeamDiscussionComment/updateTeamReviewAssignment/updateTeamsRepository/updateTopics/updateUserList/updateUserListsForItem/verifyVerifiableDomain")
  return {
    query: <T = Query, E = GraphQLError>(payload: $Operation<QueryFields>, options?: Options): Promise<{ data?: T | null, errors?: E[] }> => request(Q, null, payload, options),
    mutation: <T = Mutation, E = GraphQLError>(payload: $Operation<MutationFields>, options?: Options): Promise<{ data?: T | null, errors?: E[] }> => request(M, null, payload, options),
    queries: queries as {
      /** Look up a code of conduct by its key */
      codeOfConduct: <T = CodeOfConduct | null>(payload: CodeOfConductFields & { $args: QueryCodeOfConductArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a code of conduct by its key */
      codesOfConduct: <T = (CodeOfConduct | null)[] | null>(payload: CodeOfConductFields & $Options, options?: Options) => Promise<T> ,
      /** Look up an enterprise by URL slug. */
      enterprise: <T = Enterprise | null>(payload: EnterpriseFields & { $args: QueryEnterpriseArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
      enterpriseAdministratorInvitation: <T = EnterpriseAdministratorInvitation | null>(payload: EnterpriseAdministratorInvitationFields & { $args: QueryEnterpriseAdministratorInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a pending enterprise administrator invitation by invitation token. */
      enterpriseAdministratorInvitationByToken: <T = EnterpriseAdministratorInvitation | null>(payload: EnterpriseAdministratorInvitationFields & { $args: QueryEnterpriseAdministratorInvitationByTokenArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a pending enterprise unaffiliated member invitation by invitee and enterprise. */
      enterpriseMemberInvitation: <T = EnterpriseMemberInvitation | null>(payload: EnterpriseMemberInvitationFields & { $args: QueryEnterpriseMemberInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a pending enterprise unaffiliated member invitation by invitation token. */
      enterpriseMemberInvitationByToken: <T = EnterpriseMemberInvitation | null>(payload: EnterpriseMemberInvitationFields & { $args: QueryEnterpriseMemberInvitationByTokenArgs } & $Options, options?: Options) => Promise<T> ,
      /** ID of the object. */
      id: <T = ID>(payload: $Pick, options?: Options) => Promise<T> ,
      /** Look up an open source license by its key */
      license: <T = License | null>(payload: LicenseFields & { $args: QueryLicenseArgs } & $Options, options?: Options) => Promise<T> ,
      /** Return a list of known open source licenses */
      licenses: <T = (License | null)[]>(payload: LicenseFields & $Options, options?: Options) => Promise<T> ,
      /** Get alphabetically sorted list of Marketplace categories */
      marketplaceCategories: <T = MarketplaceCategory[]>(payload: MarketplaceCategoryFields & { $args?: QueryMarketplaceCategoriesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a Marketplace category by its slug. */
      marketplaceCategory: <T = MarketplaceCategory | null>(payload: MarketplaceCategoryFields & { $args: QueryMarketplaceCategoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a single Marketplace listing */
      marketplaceListing: <T = MarketplaceListing | null>(payload: MarketplaceListingFields & { $args: QueryMarketplaceListingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up Marketplace listings */
      marketplaceListings: <T = MarketplaceListingConnection>(payload: MarketplaceListingConnectionFields & { $args?: QueryMarketplaceListingsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Return information about the GitHub instance */
      meta: <T = GitHubMetadata>(payload: GitHubMetadataFields & $Options, options?: Options) => Promise<T> ,
      /** Fetches an object given its ID. */
      node: <T = Node | null>(payload: NodeFields & { $args: QueryNodeArgs } & NodePossibleTypes & $Options, options?: Options) => Promise<T> ,
      /** Lookup nodes by a list of IDs. */
      nodes: <T = (Node | null)[]>(payload: NodeFields & { $args: QueryNodesArgs } & NodePossibleTypes & $Options, options?: Options) => Promise<T> ,
      /** Lookup a organization by login. */
      organization: <T = Organization | null>(payload: OrganizationFields & { $args: QueryOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** The client's rate limit information. */
      rateLimit: <T = RateLimit | null>(payload: RateLimitFields & { $args?: QueryRateLimitArgs } & $Options, options?: Options) => Promise<T> ,
      /** Workaround for re-exposing the root query object. (Refer to
       * https://github.com/facebook/relay/issues/112 for more information.) */
      relay: <T = Query>(payload: QueryFields & $Options, options?: Options) => Promise<T> ,
      /** Lookup a given repository by the owner and repository name. */
      repository: <T = Repository | null>(payload: RepositoryFields & { $args: QueryRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Lookup a repository owner (ie. either a User or an Organization) by login. */
      repositoryOwner: <T = RepositoryOwner | null>(payload: RepositoryOwnerFields & { $args: QueryRepositoryOwnerArgs } & RepositoryOwnerPossibleTypes & $Options, options?: Options) => Promise<T> ,
      /** Lookup resource by a URL. */
      resource: <T = UniformResourceLocatable | null>(payload: UniformResourceLocatableFields & { $args: QueryResourceArgs } & UniformResourceLocatablePossibleTypes & $Options, options?: Options) => Promise<T> ,
      /** Perform a search across resources, returning a maximum of 1,000 results. */
      search: <T = SearchResultItemConnection>(payload: SearchResultItemConnectionFields & { $args: QuerySearchArgs } & $Options, options?: Options) => Promise<T> ,
      /** GitHub Security Advisories */
      securityAdvisories: <T = SecurityAdvisoryConnection>(payload: SecurityAdvisoryConnectionFields & { $args?: QuerySecurityAdvisoriesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Fetch a Security Advisory by its GHSA ID */
      securityAdvisory: <T = SecurityAdvisory | null>(payload: SecurityAdvisoryFields & { $args: QuerySecurityAdvisoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Software Vulnerabilities documented by GitHub Security Advisories */
      securityVulnerabilities: <T = SecurityVulnerabilityConnection>(payload: SecurityVulnerabilityConnectionFields & { $args?: QuerySecurityVulnerabilitiesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Users and organizations who can be sponsored via GitHub Sponsors. */
      sponsorables: <T = SponsorableItemConnection>(payload: SponsorableItemConnectionFields & { $args?: QuerySponsorablesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Look up a topic by name. */
      topic: <T = Topic | null>(payload: TopicFields & { $args: QueryTopicArgs } & $Options, options?: Options) => Promise<T> ,
      /** Lookup a user by login. */
      user: <T = User | null>(payload: UserFields & { $args: QueryUserArgs } & $Options, options?: Options) => Promise<T> ,
      /** The currently authenticated user. */
      viewer: <T = User>(payload: UserFields & $Options, options?: Options) => Promise<T> 
    },
    mutations: mutations as {
      /** Clear all of a customer's queued migrations */
      abortQueuedMigrations: <T = AbortQueuedMigrationsPayload | null>(payload: AbortQueuedMigrationsPayloadFields & { $args: MutationAbortQueuedMigrationsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Abort a repository migration queued or in progress. */
      abortRepositoryMigration: <T = AbortRepositoryMigrationPayload | null>(payload: AbortRepositoryMigrationPayloadFields & { $args: MutationAbortRepositoryMigrationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
      acceptEnterpriseAdministratorInvitation: <T = AcceptEnterpriseAdministratorInvitationPayload | null>(payload: AcceptEnterpriseAdministratorInvitationPayloadFields & { $args: MutationAcceptEnterpriseAdministratorInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Accepts a pending invitation for a user to become an unaffiliated member of an enterprise. */
      acceptEnterpriseMemberInvitation: <T = AcceptEnterpriseMemberInvitationPayload | null>(payload: AcceptEnterpriseMemberInvitationPayloadFields & { $args: MutationAcceptEnterpriseMemberInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Applies a suggested topic to the repository. */
      acceptTopicSuggestion: <T = AcceptTopicSuggestionPayload | null>(payload: AcceptTopicSuggestionPayloadFields & { $args: MutationAcceptTopicSuggestionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Access user namespace repository for a temporary duration. */
      accessUserNamespaceRepository: <T = AccessUserNamespaceRepositoryPayload | null>(payload: AccessUserNamespaceRepositoryPayloadFields & { $args: MutationAccessUserNamespaceRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds assignees to an assignable object. */
      addAssigneesToAssignable: <T = AddAssigneesToAssignablePayload | null>(payload: AddAssigneesToAssignablePayloadFields & { $args: MutationAddAssigneesToAssignableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a comment to an Issue or Pull Request. */
      addComment: <T = AddCommentPayload | null>(payload: AddCommentPayloadFields & { $args: MutationAddCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a comment to a Discussion, possibly as a reply to another comment. */
      addDiscussionComment: <T = AddDiscussionCommentPayload | null>(payload: AddDiscussionCommentPayloadFields & { $args: MutationAddDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Vote for an option in a discussion poll. */
      addDiscussionPollVote: <T = AddDiscussionPollVotePayload | null>(payload: AddDiscussionPollVotePayloadFields & { $args: MutationAddDiscussionPollVoteArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds enterprise members to an organization within the enterprise. */
      addEnterpriseOrganizationMember: <T = AddEnterpriseOrganizationMemberPayload | null>(payload: AddEnterpriseOrganizationMemberPayloadFields & { $args: MutationAddEnterpriseOrganizationMemberArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a support entitlement to an enterprise member. */
      addEnterpriseSupportEntitlement: <T = AddEnterpriseSupportEntitlementPayload | null>(payload: AddEnterpriseSupportEntitlementPayloadFields & { $args: MutationAddEnterpriseSupportEntitlementArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds labels to a labelable object. */
      addLabelsToLabelable: <T = AddLabelsToLabelablePayload | null>(payload: AddLabelsToLabelablePayloadFields & { $args: MutationAddLabelsToLabelableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
      addProjectCard: <T = AddProjectCardPayload | null>(payload: AddProjectCardPayloadFields & { $args: MutationAddProjectCardArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a column to a Project. */
      addProjectColumn: <T = AddProjectColumnPayload | null>(payload: AddProjectColumnPayloadFields & { $args: MutationAddProjectColumnArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new draft issue and add it to a Project. */
      addProjectV2DraftIssue: <T = AddProjectV2DraftIssuePayload | null>(payload: AddProjectV2DraftIssuePayloadFields & { $args: MutationAddProjectV2DraftIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Links an existing content instance to a Project. */
      addProjectV2ItemById: <T = AddProjectV2ItemByIdPayload | null>(payload: AddProjectV2ItemByIdPayloadFields & { $args: MutationAddProjectV2ItemByIdArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a review to a Pull Request. */
      addPullRequestReview: <T = AddPullRequestReviewPayload | null>(payload: AddPullRequestReviewPayloadFields & { $args: MutationAddPullRequestReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a comment to a review. */
      addPullRequestReviewComment: <T = AddPullRequestReviewCommentPayload | null>(payload: AddPullRequestReviewCommentPayloadFields & { $args: MutationAddPullRequestReviewCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a new thread to a pending Pull Request Review. */
      addPullRequestReviewThread: <T = AddPullRequestReviewThreadPayload | null>(payload: AddPullRequestReviewThreadPayloadFields & { $args: MutationAddPullRequestReviewThreadArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a reply to an existing Pull Request Review Thread. */
      addPullRequestReviewThreadReply: <T = AddPullRequestReviewThreadReplyPayload | null>(payload: AddPullRequestReviewThreadReplyPayloadFields & { $args: MutationAddPullRequestReviewThreadReplyArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a reaction to a subject. */
      addReaction: <T = AddReactionPayload | null>(payload: AddReactionPayloadFields & { $args: MutationAddReactionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a star to a Starrable. */
      addStar: <T = AddStarPayload | null>(payload: AddStarPayloadFields & { $args: MutationAddStarArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a sub-issue to a given issue */
      addSubIssue: <T = AddSubIssuePayload | null>(payload: AddSubIssuePayloadFields & { $args: MutationAddSubIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Add an upvote to a discussion or discussion comment. */
      addUpvote: <T = AddUpvotePayload | null>(payload: AddUpvotePayloadFields & { $args: MutationAddUpvoteArgs } & $Options, options?: Options) => Promise<T> ,
      /** Adds a verifiable domain to an owning account. */
      addVerifiableDomain: <T = AddVerifiableDomainPayload | null>(payload: AddVerifiableDomainPayloadFields & { $args: MutationAddVerifiableDomainArgs } & $Options, options?: Options) => Promise<T> ,
      /** Approve all pending deployments under one or more environments */
      approveDeployments: <T = ApproveDeploymentsPayload | null>(payload: ApproveDeploymentsPayloadFields & { $args: MutationApproveDeploymentsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Approve a verifiable domain for notification delivery. */
      approveVerifiableDomain: <T = ApproveVerifiableDomainPayload | null>(payload: ApproveVerifiableDomainPayloadFields & { $args: MutationApproveVerifiableDomainArgs } & $Options, options?: Options) => Promise<T> ,
      /** Archives a ProjectV2Item */
      archiveProjectV2Item: <T = ArchiveProjectV2ItemPayload | null>(payload: ArchiveProjectV2ItemPayloadFields & { $args: MutationArchiveProjectV2ItemArgs } & $Options, options?: Options) => Promise<T> ,
      /** Marks a repository as archived. */
      archiveRepository: <T = ArchiveRepositoryPayload | null>(payload: ArchiveRepositoryPayloadFields & { $args: MutationArchiveRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Cancels a pending invitation for an administrator to join an enterprise. */
      cancelEnterpriseAdminInvitation: <T = CancelEnterpriseAdminInvitationPayload | null>(payload: CancelEnterpriseAdminInvitationPayloadFields & { $args: MutationCancelEnterpriseAdminInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Cancels a pending invitation for an unaffiliated member to join an enterprise. */
      cancelEnterpriseMemberInvitation: <T = CancelEnterpriseMemberInvitationPayload | null>(payload: CancelEnterpriseMemberInvitationPayloadFields & { $args: MutationCancelEnterpriseMemberInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Cancel an active sponsorship. */
      cancelSponsorship: <T = CancelSponsorshipPayload | null>(payload: CancelSponsorshipPayloadFields & { $args: MutationCancelSponsorshipArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update your status on GitHub. */
      changeUserStatus: <T = ChangeUserStatusPayload | null>(payload: ChangeUserStatusPayloadFields & { $args: MutationChangeUserStatusArgs } & $Options, options?: Options) => Promise<T> ,
      /** Clears all labels from a labelable object. */
      clearLabelsFromLabelable: <T = ClearLabelsFromLabelablePayload | null>(payload: ClearLabelsFromLabelablePayloadFields & { $args: MutationClearLabelsFromLabelableArgs } & $Options, options?: Options) => Promise<T> ,
      /** This mutation clears the value of a field for an item in a Project. Currently
       * only text, number, date, assignees, labels, single-select, iteration and
       * milestone fields are supported. */
      clearProjectV2ItemFieldValue: <T = ClearProjectV2ItemFieldValuePayload | null>(payload: ClearProjectV2ItemFieldValuePayloadFields & { $args: MutationClearProjectV2ItemFieldValueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new project by cloning configuration from an existing project. */
      cloneProject: <T = CloneProjectPayload | null>(payload: CloneProjectPayloadFields & { $args: MutationCloneProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new repository with the same files and directory structure as a template repository. */
      cloneTemplateRepository: <T = CloneTemplateRepositoryPayload | null>(payload: CloneTemplateRepositoryPayloadFields & { $args: MutationCloneTemplateRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Close a discussion. */
      closeDiscussion: <T = CloseDiscussionPayload | null>(payload: CloseDiscussionPayloadFields & { $args: MutationCloseDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Close an issue. */
      closeIssue: <T = CloseIssuePayload | null>(payload: CloseIssuePayloadFields & { $args: MutationCloseIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Close a pull request. */
      closePullRequest: <T = ClosePullRequestPayload | null>(payload: ClosePullRequestPayloadFields & { $args: MutationClosePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Convert a project note card to one associated with a newly created issue. */
      convertProjectCardNoteToIssue: <T = ConvertProjectCardNoteToIssuePayload | null>(payload: ConvertProjectCardNoteToIssuePayloadFields & { $args: MutationConvertProjectCardNoteToIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Converts a projectV2 draft issue item to an issue. */
      convertProjectV2DraftIssueItemToIssue: <T = ConvertProjectV2DraftIssueItemToIssuePayload | null>(payload: ConvertProjectV2DraftIssueItemToIssuePayloadFields & { $args: MutationConvertProjectV2DraftIssueItemToIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Converts a pull request to draft */
      convertPullRequestToDraft: <T = ConvertPullRequestToDraftPayload | null>(payload: ConvertPullRequestToDraftPayloadFields & { $args: MutationConvertPullRequestToDraftArgs } & $Options, options?: Options) => Promise<T> ,
      /** Copy a project. */
      copyProjectV2: <T = CopyProjectV2Payload | null>(payload: CopyProjectV2PayloadFields & { $args: MutationCopyProjectV2Args } & $Options, options?: Options) => Promise<T> ,
      /** Invites a user to claim reattributable data */
      createAttributionInvitation: <T = CreateAttributionInvitationPayload | null>(payload: CreateAttributionInvitationPayloadFields & { $args: MutationCreateAttributionInvitationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new branch protection rule */
      createBranchProtectionRule: <T = CreateBranchProtectionRulePayload | null>(payload: CreateBranchProtectionRulePayloadFields & { $args: MutationCreateBranchProtectionRuleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a check run. */
      createCheckRun: <T = CreateCheckRunPayload | null>(payload: CreateCheckRunPayloadFields & { $args: MutationCreateCheckRunArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a check suite */
      createCheckSuite: <T = CreateCheckSuitePayload | null>(payload: CreateCheckSuitePayloadFields & { $args: MutationCreateCheckSuiteArgs } & $Options, options?: Options) => Promise<T> ,
      /** Appends a commit to the given branch as the authenticated user.
       *
       * This mutation creates a commit whose parent is the HEAD of the provided
       * branch and also updates that branch to point to the new commit.
       * It can be thought of as similar to `git commit`.
       *
       * ### Locating a Branch
       *
       * Commits are appended to a `branch` of type `Ref`.
       * This must refer to a git branch (i.e.  the fully qualified path must
       * begin with `refs/heads/`, although including this prefix is optional.
       *
       * Callers may specify the `branch` to commit to either by its global node
       * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
       * more details see the documentation for `CommittableBranch`.
       *
       * ### Describing Changes
       *
       * `fileChanges` are specified as a `FilesChanges` object describing
       * `FileAdditions` and `FileDeletions`.
       *
       * Please see the documentation for `FileChanges` for more information on
       * how to use this argument to describe any set of file changes.
       *
       * ### Authorship
       *
       * Similar to the web commit interface, this mutation does not support
       * specifying the author or committer of the commit and will not add
       * support for this in the future.
       *
       * A commit created by a successful execution of this mutation will be
       * authored by the owner of the credential which authenticates the API
       * request.  The committer will be identical to that of commits authored
       * using the web interface.
       *
       * If you need full control over author and committer information, please
       * use the Git Database REST API instead.
       *
       * ### Commit Signing
       *
       * Commits made using this mutation are automatically signed by GitHub if
       * supported and will be marked as verified in the user interface. */
      createCommitOnBranch: <T = CreateCommitOnBranchPayload | null>(payload: CreateCommitOnBranchPayloadFields & { $args: MutationCreateCommitOnBranchArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new deployment event. */
      createDeployment: <T = CreateDeploymentPayload | null>(payload: CreateDeploymentPayloadFields & { $args: MutationCreateDeploymentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a deployment status. */
      createDeploymentStatus: <T = CreateDeploymentStatusPayload | null>(payload: CreateDeploymentStatusPayloadFields & { $args: MutationCreateDeploymentStatusArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a discussion. */
      createDiscussion: <T = CreateDiscussionPayload | null>(payload: CreateDiscussionPayloadFields & { $args: MutationCreateDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates an organization as part of an enterprise account. A personal access
       * token used to create an organization is implicitly permitted to update the
       * organization it created, if the organization is part of an enterprise that has
       * SAML enabled or uses Enterprise Managed Users. If the organization is not part
       * of such an enterprise, and instead has SAML enabled for it individually, the
       * token will then require SAML authorization to continue working against that organization. */
      createEnterpriseOrganization: <T = CreateEnterpriseOrganizationPayload | null>(payload: CreateEnterpriseOrganizationPayloadFields & { $args: MutationCreateEnterpriseOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates an environment or simply returns it if already exists. */
      createEnvironment: <T = CreateEnvironmentPayload | null>(payload: CreateEnvironmentPayloadFields & { $args: MutationCreateEnvironmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new IP allow list entry. */
      createIpAllowListEntry: <T = CreateIpAllowListEntryPayload | null>(payload: CreateIpAllowListEntryPayloadFields & { $args: MutationCreateIpAllowListEntryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new issue. */
      createIssue: <T = CreateIssuePayload | null>(payload: CreateIssuePayloadFields & { $args: MutationCreateIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new label. */
      createLabel: <T = CreateLabelPayload | null>(payload: CreateLabelPayloadFields & { $args: MutationCreateLabelArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a branch linked to an issue. */
      createLinkedBranch: <T = CreateLinkedBranchPayload | null>(payload: CreateLinkedBranchPayloadFields & { $args: MutationCreateLinkedBranchArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a GitHub Enterprise Importer (GEI) migration source. */
      createMigrationSource: <T = CreateMigrationSourcePayload | null>(payload: CreateMigrationSourcePayloadFields & { $args: MutationCreateMigrationSourceArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new project. */
      createProject: <T = CreateProjectPayload | null>(payload: CreateProjectPayloadFields & { $args: MutationCreateProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new project. */
      createProjectV2: <T = CreateProjectV2Payload | null>(payload: CreateProjectV2PayloadFields & { $args: MutationCreateProjectV2Args } & $Options, options?: Options) => Promise<T> ,
      /** Create a new project field. */
      createProjectV2Field: <T = CreateProjectV2FieldPayload | null>(payload: CreateProjectV2FieldPayloadFields & { $args: MutationCreateProjectV2FieldArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a status update within a Project. */
      createProjectV2StatusUpdate: <T = CreateProjectV2StatusUpdatePayload | null>(payload: CreateProjectV2StatusUpdatePayloadFields & { $args: MutationCreateProjectV2StatusUpdateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new pull request */
      createPullRequest: <T = CreatePullRequestPayload | null>(payload: CreatePullRequestPayloadFields & { $args: MutationCreatePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new Git Ref. */
      createRef: <T = CreateRefPayload | null>(payload: CreateRefPayloadFields & { $args: MutationCreateRefArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new repository. */
      createRepository: <T = CreateRepositoryPayload | null>(payload: CreateRepositoryPayloadFields & { $args: MutationCreateRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a repository ruleset */
      createRepositoryRuleset: <T = CreateRepositoryRulesetPayload | null>(payload: CreateRepositoryRulesetPayloadFields & { $args: MutationCreateRepositoryRulesetArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */
      createSponsorsListing: <T = CreateSponsorsListingPayload | null>(payload: CreateSponsorsListingPayloadFields & { $args: MutationCreateSponsorsListingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a new payment tier for your GitHub Sponsors profile. */
      createSponsorsTier: <T = CreateSponsorsTierPayload | null>(payload: CreateSponsorsTierPayloadFields & { $args: MutationCreateSponsorsTierArgs } & $Options, options?: Options) => Promise<T> ,
      /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
      createSponsorship: <T = CreateSponsorshipPayload | null>(payload: CreateSponsorshipPayloadFields & { $args: MutationCreateSponsorshipArgs } & $Options, options?: Options) => Promise<T> ,
      /** Make many sponsorships for different sponsorable users or organizations at
       * once. Can only sponsor those who have a public GitHub Sponsors profile. */
      createSponsorships: <T = CreateSponsorshipsPayload | null>(payload: CreateSponsorshipsPayloadFields & { $args: MutationCreateSponsorshipsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new team discussion. */
      createTeamDiscussion: <T = CreateTeamDiscussionPayload | null>(payload: CreateTeamDiscussionPayloadFields & { $args: MutationCreateTeamDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new team discussion comment. */
      createTeamDiscussionComment: <T = CreateTeamDiscussionCommentPayload | null>(payload: CreateTeamDiscussionCommentPayloadFields & { $args: MutationCreateTeamDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new user list. */
      createUserList: <T = CreateUserListPayload | null>(payload: CreateUserListPayloadFields & { $args: MutationCreateUserListArgs } & $Options, options?: Options) => Promise<T> ,
      /** Rejects a suggested topic for the repository. */
      declineTopicSuggestion: <T = DeclineTopicSuggestionPayload | null>(payload: DeclineTopicSuggestionPayloadFields & { $args: MutationDeclineTopicSuggestionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a branch protection rule */
      deleteBranchProtectionRule: <T = DeleteBranchProtectionRulePayload | null>(payload: DeleteBranchProtectionRulePayloadFields & { $args: MutationDeleteBranchProtectionRuleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a deployment. */
      deleteDeployment: <T = DeleteDeploymentPayload | null>(payload: DeleteDeploymentPayloadFields & { $args: MutationDeleteDeploymentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a discussion and all of its replies. */
      deleteDiscussion: <T = DeleteDiscussionPayload | null>(payload: DeleteDiscussionPayloadFields & { $args: MutationDeleteDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a discussion comment. If it has replies, wipe it instead. */
      deleteDiscussionComment: <T = DeleteDiscussionCommentPayload | null>(payload: DeleteDiscussionCommentPayloadFields & { $args: MutationDeleteDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes an environment */
      deleteEnvironment: <T = DeleteEnvironmentPayload | null>(payload: DeleteEnvironmentPayloadFields & { $args: MutationDeleteEnvironmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes an IP allow list entry. */
      deleteIpAllowListEntry: <T = DeleteIpAllowListEntryPayload | null>(payload: DeleteIpAllowListEntryPayloadFields & { $args: MutationDeleteIpAllowListEntryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes an Issue object. */
      deleteIssue: <T = DeleteIssuePayload | null>(payload: DeleteIssuePayloadFields & { $args: MutationDeleteIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes an IssueComment object. */
      deleteIssueComment: <T = DeleteIssueCommentPayload | null>(payload: DeleteIssueCommentPayloadFields & { $args: MutationDeleteIssueCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a label. */
      deleteLabel: <T = DeleteLabelPayload | null>(payload: DeleteLabelPayloadFields & { $args: MutationDeleteLabelArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unlink a branch from an issue. */
      deleteLinkedBranch: <T = DeleteLinkedBranchPayload | null>(payload: DeleteLinkedBranchPayloadFields & { $args: MutationDeleteLinkedBranchArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a package version. */
      deletePackageVersion: <T = DeletePackageVersionPayload | null>(payload: DeletePackageVersionPayloadFields & { $args: MutationDeletePackageVersionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a project. */
      deleteProject: <T = DeleteProjectPayload | null>(payload: DeleteProjectPayloadFields & { $args: MutationDeleteProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a project card. */
      deleteProjectCard: <T = DeleteProjectCardPayload | null>(payload: DeleteProjectCardPayloadFields & { $args: MutationDeleteProjectCardArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a project column. */
      deleteProjectColumn: <T = DeleteProjectColumnPayload | null>(payload: DeleteProjectColumnPayloadFields & { $args: MutationDeleteProjectColumnArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a project. */
      deleteProjectV2: <T = DeleteProjectV2Payload | null>(payload: DeleteProjectV2PayloadFields & { $args: MutationDeleteProjectV2Args } & $Options, options?: Options) => Promise<T> ,
      /** Delete a project field. */
      deleteProjectV2Field: <T = DeleteProjectV2FieldPayload | null>(payload: DeleteProjectV2FieldPayloadFields & { $args: MutationDeleteProjectV2FieldArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes an item from a Project. */
      deleteProjectV2Item: <T = DeleteProjectV2ItemPayload | null>(payload: DeleteProjectV2ItemPayloadFields & { $args: MutationDeleteProjectV2ItemArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a project status update. */
      deleteProjectV2StatusUpdate: <T = DeleteProjectV2StatusUpdatePayload | null>(payload: DeleteProjectV2StatusUpdatePayloadFields & { $args: MutationDeleteProjectV2StatusUpdateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a project workflow. */
      deleteProjectV2Workflow: <T = DeleteProjectV2WorkflowPayload | null>(payload: DeleteProjectV2WorkflowPayloadFields & { $args: MutationDeleteProjectV2WorkflowArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a pull request review. */
      deletePullRequestReview: <T = DeletePullRequestReviewPayload | null>(payload: DeletePullRequestReviewPayloadFields & { $args: MutationDeletePullRequestReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a pull request review comment. */
      deletePullRequestReviewComment: <T = DeletePullRequestReviewCommentPayload | null>(payload: DeletePullRequestReviewCommentPayloadFields & { $args: MutationDeletePullRequestReviewCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a Git Ref. */
      deleteRef: <T = DeleteRefPayload | null>(payload: DeleteRefPayloadFields & { $args: MutationDeleteRefArgs } & $Options, options?: Options) => Promise<T> ,
      /** Delete a repository ruleset */
      deleteRepositoryRuleset: <T = DeleteRepositoryRulesetPayload | null>(payload: DeleteRepositoryRulesetPayloadFields & { $args: MutationDeleteRepositoryRulesetArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a team discussion. */
      deleteTeamDiscussion: <T = DeleteTeamDiscussionPayload | null>(payload: DeleteTeamDiscussionPayloadFields & { $args: MutationDeleteTeamDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a team discussion comment. */
      deleteTeamDiscussionComment: <T = DeleteTeamDiscussionCommentPayload | null>(payload: DeleteTeamDiscussionCommentPayloadFields & { $args: MutationDeleteTeamDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a user list. */
      deleteUserList: <T = DeleteUserListPayload | null>(payload: DeleteUserListPayloadFields & { $args: MutationDeleteUserListArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a verifiable domain. */
      deleteVerifiableDomain: <T = DeleteVerifiableDomainPayload | null>(payload: DeleteVerifiableDomainPayloadFields & { $args: MutationDeleteVerifiableDomainArgs } & $Options, options?: Options) => Promise<T> ,
      /** Remove a pull request from the merge queue. */
      dequeuePullRequest: <T = DequeuePullRequestPayload | null>(payload: DequeuePullRequestPayloadFields & { $args: MutationDequeuePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Disable auto merge on the given pull request */
      disablePullRequestAutoMerge: <T = DisablePullRequestAutoMergePayload | null>(payload: DisablePullRequestAutoMergePayloadFields & { $args: MutationDisablePullRequestAutoMergeArgs } & $Options, options?: Options) => Promise<T> ,
      /** Dismisses an approved or rejected pull request review. */
      dismissPullRequestReview: <T = DismissPullRequestReviewPayload | null>(payload: DismissPullRequestReviewPayloadFields & { $args: MutationDismissPullRequestReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Dismisses the Dependabot alert. */
      dismissRepositoryVulnerabilityAlert: <T = DismissRepositoryVulnerabilityAlertPayload | null>(payload: DismissRepositoryVulnerabilityAlertPayloadFields & { $args: MutationDismissRepositoryVulnerabilityAlertArgs } & $Options, options?: Options) => Promise<T> ,
      /** Enable the default auto-merge on a pull request. */
      enablePullRequestAutoMerge: <T = EnablePullRequestAutoMergePayload | null>(payload: EnablePullRequestAutoMergePayloadFields & { $args: MutationEnablePullRequestAutoMergeArgs } & $Options, options?: Options) => Promise<T> ,
      /** Add a pull request to the merge queue. */
      enqueuePullRequest: <T = EnqueuePullRequestPayload | null>(payload: EnqueuePullRequestPayloadFields & { $args: MutationEnqueuePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Follow an organization. */
      followOrganization: <T = FollowOrganizationPayload | null>(payload: FollowOrganizationPayloadFields & { $args: MutationFollowOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Follow a user. */
      followUser: <T = FollowUserPayload | null>(payload: FollowUserPayloadFields & { $args: MutationFollowUserArgs } & $Options, options?: Options) => Promise<T> ,
      /** Grant the migrator role to a user for all organizations under an enterprise account. */
      grantEnterpriseOrganizationsMigratorRole: <T = GrantEnterpriseOrganizationsMigratorRolePayload | null>(payload: GrantEnterpriseOrganizationsMigratorRolePayloadFields & { $args: MutationGrantEnterpriseOrganizationsMigratorRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Grant the migrator role to a user or a team. */
      grantMigratorRole: <T = GrantMigratorRolePayload | null>(payload: GrantMigratorRolePayloadFields & { $args: MutationGrantMigratorRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a new project by importing columns and a list of issues/PRs. */
      importProject: <T = ImportProjectPayload | null>(payload: ImportProjectPayloadFields & { $args: MutationImportProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Invite someone to become an administrator of the enterprise. */
      inviteEnterpriseAdmin: <T = InviteEnterpriseAdminPayload | null>(payload: InviteEnterpriseAdminPayloadFields & { $args: MutationInviteEnterpriseAdminArgs } & $Options, options?: Options) => Promise<T> ,
      /** Invite someone to become an unaffiliated member of the enterprise. */
      inviteEnterpriseMember: <T = InviteEnterpriseMemberPayload | null>(payload: InviteEnterpriseMemberPayloadFields & { $args: MutationInviteEnterpriseMemberArgs } & $Options, options?: Options) => Promise<T> ,
      /** Links a project to a repository. */
      linkProjectV2ToRepository: <T = LinkProjectV2ToRepositoryPayload | null>(payload: LinkProjectV2ToRepositoryPayloadFields & { $args: MutationLinkProjectV2ToRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Links a project to a team. */
      linkProjectV2ToTeam: <T = LinkProjectV2ToTeamPayload | null>(payload: LinkProjectV2ToTeamPayloadFields & { $args: MutationLinkProjectV2ToTeamArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates a repository link for a project. */
      linkRepositoryToProject: <T = LinkRepositoryToProjectPayload | null>(payload: LinkRepositoryToProjectPayloadFields & { $args: MutationLinkRepositoryToProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Lock a lockable object */
      lockLockable: <T = LockLockablePayload | null>(payload: LockLockablePayloadFields & { $args: MutationLockLockableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
      markDiscussionCommentAsAnswer: <T = MarkDiscussionCommentAsAnswerPayload | null>(payload: MarkDiscussionCommentAsAnswerPayloadFields & { $args: MutationMarkDiscussionCommentAsAnswerArgs } & $Options, options?: Options) => Promise<T> ,
      /** Mark a pull request file as viewed */
      markFileAsViewed: <T = MarkFileAsViewedPayload | null>(payload: MarkFileAsViewedPayloadFields & { $args: MutationMarkFileAsViewedArgs } & $Options, options?: Options) => Promise<T> ,
      /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */
      markProjectV2AsTemplate: <T = MarkProjectV2AsTemplatePayload | null>(payload: MarkProjectV2AsTemplatePayloadFields & { $args: MutationMarkProjectV2AsTemplateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Marks a pull request ready for review. */
      markPullRequestReadyForReview: <T = MarkPullRequestReadyForReviewPayload | null>(payload: MarkPullRequestReadyForReviewPayloadFields & { $args: MutationMarkPullRequestReadyForReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Merge a head into a branch. */
      mergeBranch: <T = MergeBranchPayload | null>(payload: MergeBranchPayloadFields & { $args: MutationMergeBranchArgs } & $Options, options?: Options) => Promise<T> ,
      /** Merge a pull request. */
      mergePullRequest: <T = MergePullRequestPayload | null>(payload: MergePullRequestPayloadFields & { $args: MutationMergePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
      minimizeComment: <T = MinimizeCommentPayload | null>(payload: MinimizeCommentPayloadFields & { $args: MutationMinimizeCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Moves a project card to another place. */
      moveProjectCard: <T = MoveProjectCardPayload | null>(payload: MoveProjectCardPayloadFields & { $args: MutationMoveProjectCardArgs } & $Options, options?: Options) => Promise<T> ,
      /** Moves a project column to another place. */
      moveProjectColumn: <T = MoveProjectColumnPayload | null>(payload: MoveProjectColumnPayloadFields & { $args: MutationMoveProjectColumnArgs } & $Options, options?: Options) => Promise<T> ,
      /** Pin an environment to a repository */
      pinEnvironment: <T = PinEnvironmentPayload | null>(payload: PinEnvironmentPayloadFields & { $args: MutationPinEnvironmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Pin an issue to a repository */
      pinIssue: <T = PinIssuePayload | null>(payload: PinIssuePayloadFields & { $args: MutationPinIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */
      publishSponsorsTier: <T = PublishSponsorsTierPayload | null>(payload: PublishSponsorsTierPayloadFields & { $args: MutationPublishSponsorsTierArgs } & $Options, options?: Options) => Promise<T> ,
      /** Regenerates the identity provider recovery codes for an enterprise */
      regenerateEnterpriseIdentityProviderRecoveryCodes: <T = RegenerateEnterpriseIdentityProviderRecoveryCodesPayload | null>(payload: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadFields & { $args: MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Regenerates a verifiable domain's verification token. */
      regenerateVerifiableDomainToken: <T = RegenerateVerifiableDomainTokenPayload | null>(payload: RegenerateVerifiableDomainTokenPayloadFields & { $args: MutationRegenerateVerifiableDomainTokenArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reject all pending deployments under one or more environments */
      rejectDeployments: <T = RejectDeploymentsPayload | null>(payload: RejectDeploymentsPayloadFields & { $args: MutationRejectDeploymentsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes assignees from an assignable object. */
      removeAssigneesFromAssignable: <T = RemoveAssigneesFromAssignablePayload | null>(payload: RemoveAssigneesFromAssignablePayloadFields & { $args: MutationRemoveAssigneesFromAssignableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes an administrator from the enterprise. */
      removeEnterpriseAdmin: <T = RemoveEnterpriseAdminPayload | null>(payload: RemoveEnterpriseAdminPayloadFields & { $args: MutationRemoveEnterpriseAdminArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes the identity provider from an enterprise. Owners of enterprises both
       * with and without Enterprise Managed Users may use this mutation. */
      removeEnterpriseIdentityProvider: <T = RemoveEnterpriseIdentityProviderPayload | null>(payload: RemoveEnterpriseIdentityProviderPayloadFields & { $args: MutationRemoveEnterpriseIdentityProviderArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes a user from all organizations within the enterprise */
      removeEnterpriseMember: <T = RemoveEnterpriseMemberPayload | null>(payload: RemoveEnterpriseMemberPayloadFields & { $args: MutationRemoveEnterpriseMemberArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes an organization from the enterprise */
      removeEnterpriseOrganization: <T = RemoveEnterpriseOrganizationPayload | null>(payload: RemoveEnterpriseOrganizationPayloadFields & { $args: MutationRemoveEnterpriseOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes a support entitlement from an enterprise member. */
      removeEnterpriseSupportEntitlement: <T = RemoveEnterpriseSupportEntitlementPayload | null>(payload: RemoveEnterpriseSupportEntitlementPayloadFields & { $args: MutationRemoveEnterpriseSupportEntitlementArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes labels from a Labelable object. */
      removeLabelsFromLabelable: <T = RemoveLabelsFromLabelablePayload | null>(payload: RemoveLabelsFromLabelablePayloadFields & { $args: MutationRemoveLabelsFromLabelableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes outside collaborator from all repositories in an organization. */
      removeOutsideCollaborator: <T = RemoveOutsideCollaboratorPayload | null>(payload: RemoveOutsideCollaboratorPayloadFields & { $args: MutationRemoveOutsideCollaboratorArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes a reaction from a subject. */
      removeReaction: <T = RemoveReactionPayload | null>(payload: RemoveReactionPayloadFields & { $args: MutationRemoveReactionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes a star from a Starrable. */
      removeStar: <T = RemoveStarPayload | null>(payload: RemoveStarPayloadFields & { $args: MutationRemoveStarArgs } & $Options, options?: Options) => Promise<T> ,
      /** Removes a sub-issue from a given issue */
      removeSubIssue: <T = RemoveSubIssuePayload | null>(payload: RemoveSubIssuePayloadFields & { $args: MutationRemoveSubIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Remove an upvote to a discussion or discussion comment. */
      removeUpvote: <T = RemoveUpvotePayload | null>(payload: RemoveUpvotePayloadFields & { $args: MutationRemoveUpvoteArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reopen a discussion. */
      reopenDiscussion: <T = ReopenDiscussionPayload | null>(payload: ReopenDiscussionPayloadFields & { $args: MutationReopenDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reopen a issue. */
      reopenIssue: <T = ReopenIssuePayload | null>(payload: ReopenIssuePayloadFields & { $args: MutationReopenIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reopen a pull request. */
      reopenPullRequest: <T = ReopenPullRequestPayload | null>(payload: ReopenPullRequestPayloadFields & { $args: MutationReopenPullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reorder a pinned repository environment */
      reorderEnvironment: <T = ReorderEnvironmentPayload | null>(payload: ReorderEnvironmentPayloadFields & { $args: MutationReorderEnvironmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Reprioritizes a sub-issue to a different position in the parent list. */
      reprioritizeSubIssue: <T = ReprioritizeSubIssuePayload | null>(payload: ReprioritizeSubIssuePayloadFields & { $args: MutationReprioritizeSubIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Set review requests on a pull request. */
      requestReviews: <T = RequestReviewsPayload | null>(payload: RequestReviewsPayloadFields & { $args: MutationRequestReviewsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Rerequests an existing check suite. */
      rerequestCheckSuite: <T = RerequestCheckSuitePayload | null>(payload: RerequestCheckSuitePayloadFields & { $args: MutationRerequestCheckSuiteArgs } & $Options, options?: Options) => Promise<T> ,
      /** Marks a review thread as resolved. */
      resolveReviewThread: <T = ResolveReviewThreadPayload | null>(payload: ResolveReviewThreadPayloadFields & { $args: MutationResolveReviewThreadArgs } & $Options, options?: Options) => Promise<T> ,
      /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */
      retireSponsorsTier: <T = RetireSponsorsTierPayload | null>(payload: RetireSponsorsTierPayloadFields & { $args: MutationRetireSponsorsTierArgs } & $Options, options?: Options) => Promise<T> ,
      /** Create a pull request that reverts the changes from a merged pull request. */
      revertPullRequest: <T = RevertPullRequestPayload | null>(payload: RevertPullRequestPayloadFields & { $args: MutationRevertPullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Revoke the migrator role to a user for all organizations under an enterprise account. */
      revokeEnterpriseOrganizationsMigratorRole: <T = RevokeEnterpriseOrganizationsMigratorRolePayload | null>(payload: RevokeEnterpriseOrganizationsMigratorRolePayloadFields & { $args: MutationRevokeEnterpriseOrganizationsMigratorRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Revoke the migrator role from a user or a team. */
      revokeMigratorRole: <T = RevokeMigratorRolePayload | null>(payload: RevokeMigratorRolePayloadFields & { $args: MutationRevokeMigratorRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates or updates the identity provider for an enterprise. */
      setEnterpriseIdentityProvider: <T = SetEnterpriseIdentityProviderPayload | null>(payload: SetEnterpriseIdentityProviderPayloadFields & { $args: MutationSetEnterpriseIdentityProviderArgs } & $Options, options?: Options) => Promise<T> ,
      /** Set an organization level interaction limit for an organization's public repositories. */
      setOrganizationInteractionLimit: <T = SetOrganizationInteractionLimitPayload | null>(payload: SetOrganizationInteractionLimitPayloadFields & { $args: MutationSetOrganizationInteractionLimitArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets an interaction limit setting for a repository. */
      setRepositoryInteractionLimit: <T = SetRepositoryInteractionLimitPayload | null>(payload: SetRepositoryInteractionLimitPayloadFields & { $args: MutationSetRepositoryInteractionLimitArgs } & $Options, options?: Options) => Promise<T> ,
      /** Set a user level interaction limit for an user's public repositories. */
      setUserInteractionLimit: <T = SetUserInteractionLimitPayload | null>(payload: SetUserInteractionLimitPayloadFields & { $args: MutationSetUserInteractionLimitArgs } & $Options, options?: Options) => Promise<T> ,
      /** Starts a GitHub Enterprise Importer organization migration. */
      startOrganizationMigration: <T = StartOrganizationMigrationPayload | null>(payload: StartOrganizationMigrationPayloadFields & { $args: MutationStartOrganizationMigrationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Starts a GitHub Enterprise Importer (GEI) repository migration. */
      startRepositoryMigration: <T = StartRepositoryMigrationPayload | null>(payload: StartRepositoryMigrationPayloadFields & { $args: MutationStartRepositoryMigrationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Submits a pending pull request review. */
      submitPullRequestReview: <T = SubmitPullRequestReviewPayload | null>(payload: SubmitPullRequestReviewPayloadFields & { $args: MutationSubmitPullRequestReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Transfer an organization from one enterprise to another enterprise. */
      transferEnterpriseOrganization: <T = TransferEnterpriseOrganizationPayload | null>(payload: TransferEnterpriseOrganizationPayloadFields & { $args: MutationTransferEnterpriseOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Transfer an issue to a different repository */
      transferIssue: <T = TransferIssuePayload | null>(payload: TransferIssuePayloadFields & { $args: MutationTransferIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unarchives a ProjectV2Item */
      unarchiveProjectV2Item: <T = UnarchiveProjectV2ItemPayload | null>(payload: UnarchiveProjectV2ItemPayloadFields & { $args: MutationUnarchiveProjectV2ItemArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unarchives a repository. */
      unarchiveRepository: <T = UnarchiveRepositoryPayload | null>(payload: UnarchiveRepositoryPayloadFields & { $args: MutationUnarchiveRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unfollow an organization. */
      unfollowOrganization: <T = UnfollowOrganizationPayload | null>(payload: UnfollowOrganizationPayloadFields & { $args: MutationUnfollowOrganizationArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unfollow a user. */
      unfollowUser: <T = UnfollowUserPayload | null>(payload: UnfollowUserPayloadFields & { $args: MutationUnfollowUserArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unlinks a project from a repository. */
      unlinkProjectV2FromRepository: <T = UnlinkProjectV2FromRepositoryPayload | null>(payload: UnlinkProjectV2FromRepositoryPayloadFields & { $args: MutationUnlinkProjectV2FromRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unlinks a project to a team. */
      unlinkProjectV2FromTeam: <T = UnlinkProjectV2FromTeamPayload | null>(payload: UnlinkProjectV2FromTeamPayloadFields & { $args: MutationUnlinkProjectV2FromTeamArgs } & $Options, options?: Options) => Promise<T> ,
      /** Deletes a repository link from a project. */
      unlinkRepositoryFromProject: <T = UnlinkRepositoryFromProjectPayload | null>(payload: UnlinkRepositoryFromProjectPayloadFields & { $args: MutationUnlinkRepositoryFromProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unlock a lockable object */
      unlockLockable: <T = UnlockLockablePayload | null>(payload: UnlockLockablePayloadFields & { $args: MutationUnlockLockableArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
      unmarkDiscussionCommentAsAnswer: <T = UnmarkDiscussionCommentAsAnswerPayload | null>(payload: UnmarkDiscussionCommentAsAnswerPayloadFields & { $args: MutationUnmarkDiscussionCommentAsAnswerArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unmark a pull request file as viewed */
      unmarkFileAsViewed: <T = UnmarkFileAsViewedPayload | null>(payload: UnmarkFileAsViewedPayloadFields & { $args: MutationUnmarkFileAsViewedArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unmark an issue as a duplicate of another issue. */
      unmarkIssueAsDuplicate: <T = UnmarkIssueAsDuplicatePayload | null>(payload: UnmarkIssueAsDuplicatePayloadFields & { $args: MutationUnmarkIssueAsDuplicateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unmark a project as a template. */
      unmarkProjectV2AsTemplate: <T = UnmarkProjectV2AsTemplatePayload | null>(payload: UnmarkProjectV2AsTemplatePayloadFields & { $args: MutationUnmarkProjectV2AsTemplateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
      unminimizeComment: <T = UnminimizeCommentPayload | null>(payload: UnminimizeCommentPayloadFields & { $args: MutationUnminimizeCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Unpin a pinned issue from a repository */
      unpinIssue: <T = UnpinIssuePayload | null>(payload: UnpinIssuePayloadFields & { $args: MutationUnpinIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Marks a review thread as unresolved. */
      unresolveReviewThread: <T = UnresolveReviewThreadPayload | null>(payload: UnresolveReviewThreadPayloadFields & { $args: MutationUnresolveReviewThreadArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a branch protection rule */
      updateBranchProtectionRule: <T = UpdateBranchProtectionRulePayload | null>(payload: UpdateBranchProtectionRulePayloadFields & { $args: MutationUpdateBranchProtectionRuleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a check run */
      updateCheckRun: <T = UpdateCheckRunPayload | null>(payload: UpdateCheckRunPayloadFields & { $args: MutationUpdateCheckRunArgs } & $Options, options?: Options) => Promise<T> ,
      /** Modifies the settings of an existing check suite */
      updateCheckSuitePreferences: <T = UpdateCheckSuitePreferencesPayload | null>(payload: UpdateCheckSuitePreferencesPayloadFields & { $args: MutationUpdateCheckSuitePreferencesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a discussion */
      updateDiscussion: <T = UpdateDiscussionPayload | null>(payload: UpdateDiscussionPayloadFields & { $args: MutationUpdateDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update the contents of a comment on a Discussion */
      updateDiscussionComment: <T = UpdateDiscussionCommentPayload | null>(payload: UpdateDiscussionCommentPayloadFields & { $args: MutationUpdateDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates the role of an enterprise administrator. */
      updateEnterpriseAdministratorRole: <T = UpdateEnterpriseAdministratorRolePayload | null>(payload: UpdateEnterpriseAdministratorRolePayloadFields & { $args: MutationUpdateEnterpriseAdministratorRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether private repository forks are enabled for an enterprise. */
      updateEnterpriseAllowPrivateRepositoryForkingSetting: <T = UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload | null>(payload: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadFields & { $args: MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the base repository permission for organizations in an enterprise. */
      updateEnterpriseDefaultRepositoryPermissionSetting: <T = UpdateEnterpriseDefaultRepositoryPermissionSettingPayload | null>(payload: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadFields & { $args: MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether deploy keys are allowed to be created and used for an enterprise. */
      updateEnterpriseDeployKeySetting: <T = UpdateEnterpriseDeployKeySettingPayload | null>(payload: UpdateEnterpriseDeployKeySettingPayloadFields & { $args: MutationUpdateEnterpriseDeployKeySettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
      updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: <T = UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload | null>(payload: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the members can create repositories setting for an enterprise. */
      updateEnterpriseMembersCanCreateRepositoriesSetting: <T = UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload | null>(payload: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the members can delete issues setting for an enterprise. */
      updateEnterpriseMembersCanDeleteIssuesSetting: <T = UpdateEnterpriseMembersCanDeleteIssuesSettingPayload | null>(payload: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the members can delete repositories setting for an enterprise. */
      updateEnterpriseMembersCanDeleteRepositoriesSetting: <T = UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload | null>(payload: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether members can invite collaborators are enabled for an enterprise. */
      updateEnterpriseMembersCanInviteCollaboratorsSetting: <T = UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload | null>(payload: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether or not an organization owner can make purchases. */
      updateEnterpriseMembersCanMakePurchasesSetting: <T = UpdateEnterpriseMembersCanMakePurchasesSettingPayload | null>(payload: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the members can update protected branches setting for an enterprise. */
      updateEnterpriseMembersCanUpdateProtectedBranchesSetting: <T = UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload | null>(payload: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the members can view dependency insights for an enterprise. */
      updateEnterpriseMembersCanViewDependencyInsightsSetting: <T = UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload | null>(payload: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadFields & { $args: MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether organization projects are enabled for an enterprise. */
      updateEnterpriseOrganizationProjectsSetting: <T = UpdateEnterpriseOrganizationProjectsSettingPayload | null>(payload: UpdateEnterpriseOrganizationProjectsSettingPayloadFields & { $args: MutationUpdateEnterpriseOrganizationProjectsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates the role of an enterprise owner with an organization. */
      updateEnterpriseOwnerOrganizationRole: <T = UpdateEnterpriseOwnerOrganizationRolePayload | null>(payload: UpdateEnterpriseOwnerOrganizationRolePayloadFields & { $args: MutationUpdateEnterpriseOwnerOrganizationRoleArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an enterprise's profile. */
      updateEnterpriseProfile: <T = UpdateEnterpriseProfilePayload | null>(payload: UpdateEnterpriseProfilePayloadFields & { $args: MutationUpdateEnterpriseProfileArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether repository projects are enabled for a enterprise. */
      updateEnterpriseRepositoryProjectsSetting: <T = UpdateEnterpriseRepositoryProjectsSettingPayload | null>(payload: UpdateEnterpriseRepositoryProjectsSettingPayloadFields & { $args: MutationUpdateEnterpriseRepositoryProjectsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether team discussions are enabled for an enterprise. */
      updateEnterpriseTeamDiscussionsSetting: <T = UpdateEnterpriseTeamDiscussionsSettingPayload | null>(payload: UpdateEnterpriseTeamDiscussionsSettingPayloadFields & { $args: MutationUpdateEnterpriseTeamDiscussionsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets the two-factor authentication methods that users of an enterprise may not use. */
      updateEnterpriseTwoFactorAuthenticationDisallowedMethodsSetting: <T = UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayload | null>(payload: UpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingPayloadFields & { $args: MutationUpdateEnterpriseTwoFactorAuthenticationDisallowedMethodsSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether two factor authentication is required for all users in an enterprise. */
      updateEnterpriseTwoFactorAuthenticationRequiredSetting: <T = UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload | null>(payload: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadFields & { $args: MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an environment. */
      updateEnvironment: <T = UpdateEnvironmentPayload | null>(payload: UpdateEnvironmentPayloadFields & { $args: MutationUpdateEnvironmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether an IP allow list is enabled on an owner. */
      updateIpAllowListEnabledSetting: <T = UpdateIpAllowListEnabledSettingPayload | null>(payload: UpdateIpAllowListEnabledSettingPayloadFields & { $args: MutationUpdateIpAllowListEnabledSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an IP allow list entry. */
      updateIpAllowListEntry: <T = UpdateIpAllowListEntryPayload | null>(payload: UpdateIpAllowListEntryPayloadFields & { $args: MutationUpdateIpAllowListEntryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
      updateIpAllowListForInstalledAppsEnabledSetting: <T = UpdateIpAllowListForInstalledAppsEnabledSettingPayload | null>(payload: UpdateIpAllowListForInstalledAppsEnabledSettingPayloadFields & { $args: MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an Issue. */
      updateIssue: <T = UpdateIssuePayload | null>(payload: UpdateIssuePayloadFields & { $args: MutationUpdateIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an IssueComment object. */
      updateIssueComment: <T = UpdateIssueCommentPayload | null>(payload: UpdateIssueCommentPayloadFields & { $args: MutationUpdateIssueCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing label. */
      updateLabel: <T = UpdateLabelPayload | null>(payload: UpdateLabelPayloadFields & { $args: MutationUpdateLabelArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
      updateNotificationRestrictionSetting: <T = UpdateNotificationRestrictionSettingPayload | null>(payload: UpdateNotificationRestrictionSettingPayloadFields & { $args: MutationUpdateNotificationRestrictionSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether private repository forks are enabled for an organization. */
      updateOrganizationAllowPrivateRepositoryForkingSetting: <T = UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload | null>(payload: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadFields & { $args: MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
      updateOrganizationWebCommitSignoffSetting: <T = UpdateOrganizationWebCommitSignoffSettingPayload | null>(payload: UpdateOrganizationWebCommitSignoffSettingPayloadFields & { $args: MutationUpdateOrganizationWebCommitSignoffSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Toggle the setting for your GitHub Sponsors profile that allows other GitHub
       * accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
       * Only applicable when you have a GitHub Sponsors profile and have connected
       * your GitHub account with Patreon. */
      updatePatreonSponsorability: <T = UpdatePatreonSponsorabilityPayload | null>(payload: UpdatePatreonSponsorabilityPayloadFields & { $args: MutationUpdatePatreonSponsorabilityArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing project. */
      updateProject: <T = UpdateProjectPayload | null>(payload: UpdateProjectPayloadFields & { $args: MutationUpdateProjectArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing project card. */
      updateProjectCard: <T = UpdateProjectCardPayload | null>(payload: UpdateProjectCardPayloadFields & { $args: MutationUpdateProjectCardArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing project column. */
      updateProjectColumn: <T = UpdateProjectColumnPayload | null>(payload: UpdateProjectColumnPayloadFields & { $args: MutationUpdateProjectColumnArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing project. */
      updateProjectV2: <T = UpdateProjectV2Payload | null>(payload: UpdateProjectV2PayloadFields & { $args: MutationUpdateProjectV2Args } & $Options, options?: Options) => Promise<T> ,
      /** Update the collaborators on a team or a project */
      updateProjectV2Collaborators: <T = UpdateProjectV2CollaboratorsPayload | null>(payload: UpdateProjectV2CollaboratorsPayloadFields & { $args: MutationUpdateProjectV2CollaboratorsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates a draft issue within a Project. */
      updateProjectV2DraftIssue: <T = UpdateProjectV2DraftIssuePayload | null>(payload: UpdateProjectV2DraftIssuePayloadFields & { $args: MutationUpdateProjectV2DraftIssueArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a project field. */
      updateProjectV2Field: <T = UpdateProjectV2FieldPayload | null>(payload: UpdateProjectV2FieldPayloadFields & { $args: MutationUpdateProjectV2FieldArgs } & $Options, options?: Options) => Promise<T> ,
      /** This mutation updates the value of a field for an item in a Project. Currently
       * only single-select, text, number, date, and iteration fields are supported. */
      updateProjectV2ItemFieldValue: <T = UpdateProjectV2ItemFieldValuePayload | null>(payload: UpdateProjectV2ItemFieldValuePayloadFields & { $args: MutationUpdateProjectV2ItemFieldValueArgs } & $Options, options?: Options) => Promise<T> ,
      /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
      updateProjectV2ItemPosition: <T = UpdateProjectV2ItemPositionPayload | null>(payload: UpdateProjectV2ItemPositionPayloadFields & { $args: MutationUpdateProjectV2ItemPositionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates a status update within a Project. */
      updateProjectV2StatusUpdate: <T = UpdateProjectV2StatusUpdatePayload | null>(payload: UpdateProjectV2StatusUpdatePayloadFields & { $args: MutationUpdateProjectV2StatusUpdateArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a pull request */
      updatePullRequest: <T = UpdatePullRequestPayload | null>(payload: UpdatePullRequestPayloadFields & { $args: MutationUpdatePullRequestArgs } & $Options, options?: Options) => Promise<T> ,
      /** Merge or Rebase HEAD from upstream branch into pull request branch */
      updatePullRequestBranch: <T = UpdatePullRequestBranchPayload | null>(payload: UpdatePullRequestBranchPayloadFields & { $args: MutationUpdatePullRequestBranchArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates the body of a pull request review. */
      updatePullRequestReview: <T = UpdatePullRequestReviewPayload | null>(payload: UpdatePullRequestReviewPayloadFields & { $args: MutationUpdatePullRequestReviewArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates a pull request review comment. */
      updatePullRequestReviewComment: <T = UpdatePullRequestReviewCommentPayload | null>(payload: UpdatePullRequestReviewCommentPayloadFields & { $args: MutationUpdatePullRequestReviewCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a Git Ref. */
      updateRef: <T = UpdateRefPayload | null>(payload: UpdateRefPayloadFields & { $args: MutationUpdateRefArgs } & $Options, options?: Options) => Promise<T> ,
      /** Creates, updates and/or deletes multiple refs in a repository.
       *
       * This mutation takes a list of `RefUpdate`s and performs these updates
       * on the repository. All updates are performed atomically, meaning that
       * if one of them is rejected, no other ref will be modified.
       *
       * `RefUpdate.beforeOid` specifies that the given reference needs to point
       * to the given value before performing any updates. A value of
       * `0000000000000000000000000000000000000000` can be used to verify that
       * the references should not exist.
       *
       * `RefUpdate.afterOid` specifies the value that the given reference
       * will point to after performing all updates. A value of
       * `0000000000000000000000000000000000000000` can be used to delete a
       * reference.
       *
       * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
       * for the given reference will be allowed. */
      updateRefs: <T = UpdateRefsPayload | null>(payload: UpdateRefsPayloadFields & { $args: MutationUpdateRefsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update information about a repository. */
      updateRepository: <T = UpdateRepositoryPayload | null>(payload: UpdateRepositoryPayloadFields & { $args: MutationUpdateRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update a repository ruleset */
      updateRepositoryRuleset: <T = UpdateRepositoryRulesetPayload | null>(payload: UpdateRepositoryRulesetPayloadFields & { $args: MutationUpdateRepositoryRulesetArgs } & $Options, options?: Options) => Promise<T> ,
      /** Sets whether contributors are required to sign off on web-based commits for a repository. */
      updateRepositoryWebCommitSignoffSetting: <T = UpdateRepositoryWebCommitSignoffSettingPayload | null>(payload: UpdateRepositoryWebCommitSignoffSettingPayloadFields & { $args: MutationUpdateRepositoryWebCommitSignoffSettingArgs } & $Options, options?: Options) => Promise<T> ,
      /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
      updateSponsorshipPreferences: <T = UpdateSponsorshipPreferencesPayload | null>(payload: UpdateSponsorshipPreferencesPayloadFields & { $args: MutationUpdateSponsorshipPreferencesArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates the state for subscribable subjects. */
      updateSubscription: <T = UpdateSubscriptionPayload | null>(payload: UpdateSubscriptionPayloadFields & { $args: MutationUpdateSubscriptionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates a team discussion. */
      updateTeamDiscussion: <T = UpdateTeamDiscussionPayload | null>(payload: UpdateTeamDiscussionPayloadFields & { $args: MutationUpdateTeamDiscussionArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates a discussion comment. */
      updateTeamDiscussionComment: <T = UpdateTeamDiscussionCommentPayload | null>(payload: UpdateTeamDiscussionCommentPayloadFields & { $args: MutationUpdateTeamDiscussionCommentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates team review assignment. */
      updateTeamReviewAssignment: <T = UpdateTeamReviewAssignmentPayload | null>(payload: UpdateTeamReviewAssignmentPayloadFields & { $args: MutationUpdateTeamReviewAssignmentArgs } & $Options, options?: Options) => Promise<T> ,
      /** Update team repository. */
      updateTeamsRepository: <T = UpdateTeamsRepositoryPayload | null>(payload: UpdateTeamsRepositoryPayloadFields & { $args: MutationUpdateTeamsRepositoryArgs } & $Options, options?: Options) => Promise<T> ,
      /** Replaces the repository's topics with the given topics. */
      updateTopics: <T = UpdateTopicsPayload | null>(payload: UpdateTopicsPayloadFields & { $args: MutationUpdateTopicsArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates an existing user list. */
      updateUserList: <T = UpdateUserListPayload | null>(payload: UpdateUserListPayloadFields & { $args: MutationUpdateUserListArgs } & $Options, options?: Options) => Promise<T> ,
      /** Updates which of the viewer's lists an item belongs to */
      updateUserListsForItem: <T = UpdateUserListsForItemPayload | null>(payload: UpdateUserListsForItemPayloadFields & { $args: MutationUpdateUserListsForItemArgs } & $Options, options?: Options) => Promise<T> ,
      /** Verify that a verifiable domain has the expected DNS record. */
      verifyVerifiableDomain: <T = VerifyVerifiableDomainPayload | null>(payload: VerifyVerifiableDomainPayloadFields & { $args: MutationVerifyVerifiableDomainArgs } & $Options, options?: Options) => Promise<T> 
    }
  }
}
